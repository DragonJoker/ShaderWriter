
/*
See LICENSE file in root folder
*/

#include "ShaderWriter/BaseTypes/Void.hpp"
#include "ShaderWriter/BaseTypes/Array.hpp"
#include "ShaderWriter/BaseTypes/Bool.hpp"
#include "ShaderWriter/BaseTypes/Double.hpp"
#include "ShaderWriter/BaseTypes/Float.hpp"
#include "ShaderWriter/BaseTypes/Int.hpp"
#include "ShaderWriter/BaseTypes/UInt.hpp"
#include "ShaderWriter/Intrinsics/TextureAccessFunctions.hpp"

#include <ShaderAST/Expr/MakeTextureAccess.hpp>

namespace sdw
{
#pragma region textureSize
	/**
	*name
	*	textureSize
	*/
	/**@{*/
	MaybeOptional< Int > textureSize( MaybeOptional< SampledImage1DRgba32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< Int >{ findShader( image, lod )
				, expr::makeTextureSize1DFRgba32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DFRgba32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< SampledImage1DRgba16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< Int >{ findShader( image, lod )
				, expr::makeTextureSize1DFRgba16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DFRgba16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< SampledImage1DRg32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< Int >{ findShader( image, lod )
				, expr::makeTextureSize1DFRg32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DFRg32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< SampledImage1DRg16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< Int >{ findShader( image, lod )
				, expr::makeTextureSize1DFRg16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DFRg16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< SampledImage1DR32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< Int >{ findShader( image, lod )
				, expr::makeTextureSize1DFR32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DFR32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< SampledImage1DR16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< Int >{ findShader( image, lod )
				, expr::makeTextureSize1DFR16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DFR16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize2DFRgba32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DFRgba32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize2DFRgba16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DFRgba16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize2DFRg32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DFRg32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize2DFRg16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DFRg16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize2DFR32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DFR32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize2DFR16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DFR16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< SampledImage3DRgba32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize3DFRgba32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DFRgba32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< SampledImage3DRgba16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize3DFRgba16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DFRgba16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< SampledImage3DRg32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize3DFRg32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DFRg32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< SampledImage3DRg16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize3DFRg16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DFRg16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< SampledImage3DR32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize3DFR32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DFR32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< SampledImage3DR16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize3DFR16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DFR16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< SampledImageCubeRgba32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeFRgba32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeFRgba32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< SampledImageCubeRgba16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeFRgba16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeFRgba16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< SampledImageCubeRg32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeFRg32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeFRg32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< SampledImageCubeRg16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeFRg16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeFRg16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< SampledImageCubeR32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeFR32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeFR32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< SampledImageCubeR16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeFR16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeFR16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< SampledImage1DShadowR32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< Int >{ findShader( image, lod )
				, expr::makeTextureSize1DShadowFR32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DShadowFR32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< SampledImage1DShadowR16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< Int >{ findShader( image, lod )
				, expr::makeTextureSize1DShadowFR16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DShadowFR16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< SampledImage2DShadowR32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize2DShadowFR32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DShadowFR32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< SampledImage2DShadowR16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize2DShadowFR16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DShadowFR16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< SampledImageCubeShadowR32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeShadowFR32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeShadowFR32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< SampledImageCubeShadowR16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeShadowFR16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeShadowFR16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< SampledImageCubeArrayRgba32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeArrayFRgba32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayFRgba32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< SampledImageCubeArrayRgba16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeArrayFRgba16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayFRgba16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< SampledImageCubeArrayRg32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeArrayFRg32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayFRg32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< SampledImageCubeArrayRg16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeArrayFRg16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayFRg16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< SampledImageCubeArrayR32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeArrayFR32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayFR32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< SampledImageCubeArrayR16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeArrayFR16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayFR16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< SampledImageCubeArrayShadowR32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeArrayShadowFR32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayShadowFR32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< SampledImageCubeArrayShadowR16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeArrayShadowFR16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayShadowFR16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< SampledImage1DArrayRgba32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize1DArrayFRgba32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayFRgba32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< SampledImage1DArrayRgba16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize1DArrayFRgba16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayFRgba16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< SampledImage1DArrayRg32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize1DArrayFRg32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayFRg32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< SampledImage1DArrayRg16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize1DArrayFRg16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayFRg16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< SampledImage1DArrayR32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize1DArrayFR32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayFR32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< SampledImage1DArrayR16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize1DArrayFR16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayFR16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< SampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize2DArrayFRgba32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayFRgba32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< SampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize2DArrayFRgba16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayFRgba16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< SampledImage2DArrayRg32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize2DArrayFRg32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayFRg32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< SampledImage2DArrayRg16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize2DArrayFRg16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayFRg16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< SampledImage2DArrayR32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize2DArrayFR32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayFR32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< SampledImage2DArrayR16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize2DArrayFR16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayFR16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< SampledImage1DArrayShadowR32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize1DArrayShadowFR32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayShadowFR32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< SampledImage1DArrayShadowR16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize1DArrayShadowFR16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayShadowFR16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< SampledImage2DArrayShadowR32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize2DArrayShadowFR32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayShadowFR32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< SampledImage2DArrayShadowR16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize2DArrayShadowFR16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayShadowFR16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< ISampledImage1DRgba32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< Int >{ findShader( image, lod )
				, expr::makeTextureSize1DIRgba32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DIRgba32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< ISampledImage1DRgba16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< Int >{ findShader( image, lod )
				, expr::makeTextureSize1DIRgba16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DIRgba16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< ISampledImage1DRgba8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< Int >{ findShader( image, lod )
				, expr::makeTextureSize1DIRgba8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DIRgba8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< ISampledImage1DRg32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< Int >{ findShader( image, lod )
				, expr::makeTextureSize1DIRg32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DIRg32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< ISampledImage1DRg16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< Int >{ findShader( image, lod )
				, expr::makeTextureSize1DIRg16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DIRg16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< ISampledImage1DRg8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< Int >{ findShader( image, lod )
				, expr::makeTextureSize1DIRg8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DIRg8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< ISampledImage1DR32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< Int >{ findShader( image, lod )
				, expr::makeTextureSize1DIR32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DIR32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< ISampledImage1DR16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< Int >{ findShader( image, lod )
				, expr::makeTextureSize1DIR16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DIR16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< ISampledImage1DR8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< Int >{ findShader( image, lod )
				, expr::makeTextureSize1DIR8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DIR8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize2DIRgba32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DIRgba32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize2DIRgba16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DIRgba16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize2DIRgba8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DIRgba8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize2DIRg32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DIRg32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize2DIRg16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DIRg16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize2DIRg8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DIRg8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize2DIR32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DIR32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize2DIR16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DIR16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize2DIR8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DIR8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< ISampledImage3DRgba32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize3DIRgba32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DIRgba32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< ISampledImage3DRgba16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize3DIRgba16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DIRgba16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< ISampledImage3DRgba8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize3DIRgba8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DIRgba8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< ISampledImage3DRg32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize3DIRg32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DIRg32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< ISampledImage3DRg16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize3DIRg16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DIRg16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< ISampledImage3DRg8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize3DIRg8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DIRg8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< ISampledImage3DR32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize3DIR32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DIR32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< ISampledImage3DR16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize3DIR16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DIR16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< ISampledImage3DR8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize3DIR8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DIR8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< ISampledImageCubeRgba32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeIRgba32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeIRgba32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< ISampledImageCubeRgba16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeIRgba16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeIRgba16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< ISampledImageCubeRgba8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeIRgba8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeIRgba8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< ISampledImageCubeRg32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeIRg32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeIRg32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< ISampledImageCubeRg16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeIRg16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeIRg16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< ISampledImageCubeRg8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeIRg8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeIRg8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< ISampledImageCubeR32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeIR32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeIR32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< ISampledImageCubeR16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeIR16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeIR16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< ISampledImageCubeR8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeIR8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeIR8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< ISampledImageCubeArrayRgba32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeArrayIRgba32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayIRgba32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< ISampledImageCubeArrayRgba16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeArrayIRgba16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayIRgba16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< ISampledImageCubeArrayRgba8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeArrayIRgba8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayIRgba8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< ISampledImageCubeArrayRg32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeArrayIRg32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayIRg32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< ISampledImageCubeArrayRg16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeArrayIRg16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayIRg16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< ISampledImageCubeArrayRg8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeArrayIRg8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayIRg8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< ISampledImageCubeArrayR32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeArrayIR32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayIR32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< ISampledImageCubeArrayR16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeArrayIR16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayIR16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< ISampledImageCubeArrayR8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeArrayIR8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayIR8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< ISampledImage1DArrayRgba32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize1DArrayIRgba32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayIRgba32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< ISampledImage1DArrayRgba16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize1DArrayIRgba16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayIRgba16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< ISampledImage1DArrayRgba8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize1DArrayIRgba8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayIRgba8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< ISampledImage1DArrayRg32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize1DArrayIRg32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayIRg32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< ISampledImage1DArrayRg16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize1DArrayIRg16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayIRg16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< ISampledImage1DArrayRg8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize1DArrayIRg8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayIRg8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< ISampledImage1DArrayR32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize1DArrayIR32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayIR32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< ISampledImage1DArrayR16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize1DArrayIR16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayIR16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< ISampledImage1DArrayR8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize1DArrayIR8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayIR8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< ISampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize2DArrayIRgba32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayIRgba32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< ISampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize2DArrayIRgba16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayIRgba16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< ISampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize2DArrayIRgba8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayIRgba8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< ISampledImage2DArrayRg32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize2DArrayIRg32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayIRg32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< ISampledImage2DArrayRg16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize2DArrayIRg16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayIRg16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< ISampledImage2DArrayRg8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize2DArrayIRg8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayIRg8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< ISampledImage2DArrayR32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize2DArrayIR32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayIR32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< ISampledImage2DArrayR16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize2DArrayIR16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayIR16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< ISampledImage2DArrayR8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize2DArrayIR8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayIR8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< USampledImage1DRgba32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< Int >{ findShader( image, lod )
				, expr::makeTextureSize1DURgba32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DURgba32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< USampledImage1DRgba16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< Int >{ findShader( image, lod )
				, expr::makeTextureSize1DURgba16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DURgba16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< USampledImage1DRgba8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< Int >{ findShader( image, lod )
				, expr::makeTextureSize1DURgba8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DURgba8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< USampledImage1DRg32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< Int >{ findShader( image, lod )
				, expr::makeTextureSize1DURg32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DURg32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< USampledImage1DRg16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< Int >{ findShader( image, lod )
				, expr::makeTextureSize1DURg16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DURg16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< USampledImage1DRg8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< Int >{ findShader( image, lod )
				, expr::makeTextureSize1DURg8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DURg8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< USampledImage1DR32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< Int >{ findShader( image, lod )
				, expr::makeTextureSize1DUR32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DUR32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< USampledImage1DR16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< Int >{ findShader( image, lod )
				, expr::makeTextureSize1DUR16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DUR16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< USampledImage1DR8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< Int >{ findShader( image, lod )
				, expr::makeTextureSize1DUR8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return Int{ findShader( image, lod )
			, expr::makeTextureSize1DUR8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize2DURgba32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DURgba32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize2DURgba16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DURgba16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize2DURgba8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DURgba8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize2DURg32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DURg32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize2DURg16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DURg16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize2DURg8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DURg8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize2DUR32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DUR32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize2DUR16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DUR16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize2DUR8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize2DUR8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< USampledImage3DRgba32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize3DURgba32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DURgba32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< USampledImage3DRgba16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize3DURgba16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DURgba16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< USampledImage3DRgba8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize3DURgba8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DURgba8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< USampledImage3DRg32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize3DURg32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DURg32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< USampledImage3DRg16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize3DURg16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DURg16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< USampledImage3DRg8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize3DURg8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DURg8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< USampledImage3DR32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize3DUR32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DUR32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< USampledImage3DR16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize3DUR16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DUR16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< USampledImage3DR8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize3DUR8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize3DUR8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< USampledImageCubeRgba32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeURgba32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeURgba32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< USampledImageCubeRgba16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeURgba16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeURgba16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< USampledImageCubeRgba8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeURgba8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeURgba8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< USampledImageCubeRg32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeURg32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeURg32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< USampledImageCubeRg16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeURg16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeURg16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< USampledImageCubeRg8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeURg8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeURg8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< USampledImageCubeR32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeUR32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeUR32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< USampledImageCubeR16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeUR16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeUR16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< USampledImageCubeR8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeUR8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSizeCubeUR8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< USampledImageCubeArrayRgba32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeArrayURgba32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayURgba32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< USampledImageCubeArrayRgba16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeArrayURgba16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayURgba16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< USampledImageCubeArrayRgba8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeArrayURgba8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayURgba8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< USampledImageCubeArrayRg32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeArrayURg32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayURg32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< USampledImageCubeArrayRg16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeArrayURg16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayURg16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< USampledImageCubeArrayRg8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeArrayURg8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayURg8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< USampledImageCubeArrayR32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeArrayUR32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayUR32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< USampledImageCubeArrayR16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeArrayUR16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayUR16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< USampledImageCubeArrayR8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSizeCubeArrayUR8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSizeCubeArrayUR8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< USampledImage1DArrayRgba32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize1DArrayURgba32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayURgba32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< USampledImage1DArrayRgba16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize1DArrayURgba16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayURgba16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< USampledImage1DArrayRgba8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize1DArrayURgba8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayURgba8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< USampledImage1DArrayRg32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize1DArrayURg32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayURg32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< USampledImage1DArrayRg16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize1DArrayURg16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayURg16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< USampledImage1DArrayRg8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize1DArrayURg8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayURg8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< USampledImage1DArrayR32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize1DArrayUR32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayUR32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< USampledImage1DArrayR16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize1DArrayUR16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayUR16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureSize( MaybeOptional< USampledImage1DArrayR8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, lod )
				, expr::makeTextureSize1DArrayUR8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec2{ findShader( image, lod )
			, expr::makeTextureSize1DArrayUR8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< USampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize2DArrayURgba32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayURgba32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< USampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize2DArrayURgba16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayURgba16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< USampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize2DArrayURgba8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayURgba8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< USampledImage2DArrayRg32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize2DArrayURg32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayURg32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< USampledImage2DArrayRg16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize2DArrayURg16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayURg16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< USampledImage2DArrayRg8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize2DArrayURg8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayURg8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< USampledImage2DArrayR32 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize2DArrayUR32( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayUR32( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< USampledImage2DArrayR16 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize2DArrayUR16( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayUR16( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec3 > textureSize( MaybeOptional< USampledImage2DArrayR8 > const & image
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, lod ) )
		{
			return Optional< IVec3 >{ findShader( image, lod )
				, expr::makeTextureSize2DArrayUR8( findTypesCache( image, lod )
					, makeExpr( image )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, lod ) };
		}

		return IVec3{ findShader( image, lod )
			, expr::makeTextureSize2DArrayUR8( findTypesCache( image, lod )
				, makeExpr( image )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< SampledImageBufferRgba32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureSizeBufferFRgba32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureSizeBufferFRgba32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< SampledImageBufferRgba16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureSizeBufferFRgba16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureSizeBufferFRgba16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< SampledImageBufferRg32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureSizeBufferFRg32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureSizeBufferFRg32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< SampledImageBufferRg16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureSizeBufferFRg16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureSizeBufferFRg16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< SampledImageBufferR32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureSizeBufferFR32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureSizeBufferFR32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< SampledImageBufferR16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureSizeBufferFR16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureSizeBufferFR16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< ISampledImageBufferRgba32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureSizeBufferIRgba32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureSizeBufferIRgba32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< ISampledImageBufferRgba16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureSizeBufferIRgba16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureSizeBufferIRgba16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< ISampledImageBufferRgba8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureSizeBufferIRgba8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureSizeBufferIRgba8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< ISampledImageBufferRg32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureSizeBufferIRg32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureSizeBufferIRg32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< ISampledImageBufferRg16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureSizeBufferIRg16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureSizeBufferIRg16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< ISampledImageBufferRg8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureSizeBufferIRg8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureSizeBufferIRg8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< ISampledImageBufferR32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureSizeBufferIR32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureSizeBufferIR32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< ISampledImageBufferR16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureSizeBufferIR16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureSizeBufferIR16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< ISampledImageBufferR8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureSizeBufferIR8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureSizeBufferIR8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< USampledImageBufferRgba32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureSizeBufferURgba32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureSizeBufferURgba32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< USampledImageBufferRgba16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureSizeBufferURgba16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureSizeBufferURgba16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< USampledImageBufferRgba8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureSizeBufferURgba8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureSizeBufferURgba8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< USampledImageBufferRg32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureSizeBufferURg32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureSizeBufferURg32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< USampledImageBufferRg16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureSizeBufferURg16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureSizeBufferURg16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< USampledImageBufferRg8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureSizeBufferURg8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureSizeBufferURg8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< USampledImageBufferR32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureSizeBufferUR32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureSizeBufferUR32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< USampledImageBufferR16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureSizeBufferUR16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureSizeBufferUR16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureSize( MaybeOptional< USampledImageBufferR8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureSizeBufferUR8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureSizeBufferUR8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureQueryLod
	/**
	*name
	*	textureQueryLod
	*/
	/**@{*/
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage1DRgba32 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DFRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DFRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage1DRgba16 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DFRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DFRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage1DRg32 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DFRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DFRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage1DRg16 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DFRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DFRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage1DR32 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DFR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DFR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage1DR16 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DFR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DFR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DFRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DFRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DFRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DFRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DFRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DFRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DFRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DFRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DFR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DFR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DFR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DFR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage3DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod3DFRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DFRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage3DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod3DFRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DFRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage3DRg32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod3DFRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DFRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage3DRg16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod3DFRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DFRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage3DR32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod3DFR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DFR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage3DR16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod3DFR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DFR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImageCubeRgba32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeFRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeFRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImageCubeRgba16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeFRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeFRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImageCubeRg32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeFRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeFRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImageCubeRg16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeFRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeFRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImageCubeR32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeFR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeFR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImageCubeR16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeFR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeFR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage1DArrayRgba32 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DArrayFRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayFRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage1DArrayRgba16 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DArrayFRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayFRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage1DArrayRg32 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DArrayFRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayFRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage1DArrayRg16 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DArrayFRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayFRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage1DArrayR32 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DArrayFR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayFR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage1DArrayR16 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DArrayFR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayFR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DArrayFRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayFRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DArrayFRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayFRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DArrayFRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayFRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DArrayFRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayFRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DArrayFR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayFR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DArrayFR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayFR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImageCubeArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeArrayFRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayFRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImageCubeArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeArrayFRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayFRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImageCubeArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeArrayFRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayFRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImageCubeArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeArrayFRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayFRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImageCubeArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeArrayFR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayFR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImageCubeArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeArrayFR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayFR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage1DShadowR32 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DShadowFR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DShadowFR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage1DShadowR16 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DShadowFR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DShadowFR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage2DShadowR32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DShadowFR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DShadowFR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage2DShadowR16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DShadowFR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DShadowFR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImageCubeShadowR32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeShadowFR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeShadowFR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImageCubeShadowR16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeShadowFR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeShadowFR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage1DArrayShadowR32 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DArrayShadowFR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayShadowFR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage1DArrayShadowR16 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DArrayShadowFR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayShadowFR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage2DArrayShadowR32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DArrayShadowFR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayShadowFR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImage2DArrayShadowR16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DArrayShadowFR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayShadowFR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImageCubeArrayShadowR32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeArrayShadowFR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayShadowFR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< SampledImageCubeArrayShadowR16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeArrayShadowFR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayShadowFR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage1DRgba32 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DIRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DIRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage1DRgba16 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DIRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DIRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage1DRgba8 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DIRgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DIRgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage1DRg32 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DIRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DIRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage1DRg16 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DIRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DIRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage1DRg8 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DIRg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DIRg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage1DR32 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DIR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DIR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage1DR16 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DIR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DIR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage1DR8 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DIR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DIR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DIRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DIRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DIRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DIRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DIRgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DIRgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DIRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DIRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DIRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DIRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DIRg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DIRg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DIR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DIR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DIR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DIR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DIR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DIR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage3DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod3DIRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DIRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage3DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod3DIRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DIRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage3DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod3DIRgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DIRgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage3DRg32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod3DIRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DIRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage3DRg16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod3DIRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DIRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage3DRg8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod3DIRg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DIRg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage3DR32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod3DIR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DIR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage3DR16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod3DIR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DIR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage3DR8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod3DIR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DIR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImageCubeRgba32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeIRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeIRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImageCubeRgba16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeIRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeIRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImageCubeRgba8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeIRgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeIRgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImageCubeRg32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeIRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeIRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImageCubeRg16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeIRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeIRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImageCubeRg8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeIRg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeIRg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImageCubeR32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeIR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeIR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImageCubeR16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeIR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeIR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImageCubeR8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeIR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeIR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage1DArrayRgba32 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DArrayIRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayIRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage1DArrayRgba16 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DArrayIRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayIRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage1DArrayRgba8 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DArrayIRgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayIRgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage1DArrayRg32 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DArrayIRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayIRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage1DArrayRg16 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DArrayIRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayIRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage1DArrayRg8 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DArrayIRg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayIRg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage1DArrayR32 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DArrayIR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayIR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage1DArrayR16 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DArrayIR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayIR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage1DArrayR8 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DArrayIR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayIR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DArrayIRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayIRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DArrayIRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayIRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DArrayIRgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayIRgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DArrayIRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayIRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DArrayIRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayIRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage2DArrayRg8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DArrayIRg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayIRg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DArrayIR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayIR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DArrayIR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayIR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImage2DArrayR8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DArrayIR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayIR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImageCubeArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeArrayIRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayIRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImageCubeArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeArrayIRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayIRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImageCubeArrayRgba8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeArrayIRgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayIRgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImageCubeArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeArrayIRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayIRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImageCubeArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeArrayIRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayIRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImageCubeArrayRg8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeArrayIRg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayIRg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImageCubeArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeArrayIR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayIR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImageCubeArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeArrayIR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayIR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< ISampledImageCubeArrayR8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeArrayIR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayIR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage1DRgba32 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DURgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DURgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage1DRgba16 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DURgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DURgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage1DRgba8 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DURgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DURgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage1DRg32 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DURg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DURg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage1DRg16 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DURg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DURg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage1DRg8 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DURg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DURg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage1DR32 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DUR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DUR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage1DR16 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DUR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DUR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage1DR8 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DUR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DUR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DURgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DURgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DURgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DURgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DURgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DURgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DURg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DURg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DURg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DURg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DURg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DURg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DUR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DUR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DUR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DUR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DUR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DUR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage3DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod3DURgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DURgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage3DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod3DURgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DURgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage3DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod3DURgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DURgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage3DRg32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod3DURg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DURg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage3DRg16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod3DURg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DURg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage3DRg8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod3DURg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DURg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage3DR32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod3DUR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DUR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage3DR16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod3DUR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DUR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage3DR8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod3DUR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod3DUR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImageCubeRgba32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeURgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeURgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImageCubeRgba16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeURgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeURgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImageCubeRgba8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeURgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeURgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImageCubeRg32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeURg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeURg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImageCubeRg16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeURg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeURg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImageCubeRg8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeURg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeURg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImageCubeR32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeUR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeUR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImageCubeR16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeUR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeUR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImageCubeR8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeUR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeUR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage1DArrayRgba32 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DArrayURgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayURgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage1DArrayRgba16 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DArrayURgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayURgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage1DArrayRgba8 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DArrayURgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayURgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage1DArrayRg32 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DArrayURg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayURg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage1DArrayRg16 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DArrayURg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayURg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage1DArrayRg8 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DArrayURg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayURg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage1DArrayR32 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DArrayUR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayUR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage1DArrayR16 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DArrayUR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayUR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage1DArrayR8 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod1DArrayUR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod1DArrayUR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DArrayURgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayURgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DArrayURgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayURgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DArrayURgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayURgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DArrayURg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayURg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DArrayURg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayURg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage2DArrayRg8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DArrayURg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayURg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DArrayUR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayUR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DArrayUR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayUR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImage2DArrayR8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLod2DArrayUR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLod2DArrayUR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImageCubeArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeArrayURgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayURgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImageCubeArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeArrayURgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayURgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImageCubeArrayRgba8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeArrayURgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayURgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImageCubeArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeArrayURg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayURg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImageCubeArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeArrayURg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayURg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImageCubeArrayRg8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeArrayURg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayURg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImageCubeArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeArrayUR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayUR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImageCubeArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeArrayUR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayUR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureQueryLod( MaybeOptional< USampledImageCubeArrayR8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureQueryLodCubeArrayUR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureQueryLodCubeArrayUR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureQueryLevels
	/**
	*name
	*	textureQueryLevels
	*/
	/**@{*/
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage1DRgba32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DFRgba32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DFRgba32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage1DRgba16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DFRgba16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DFRgba16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage1DRg32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DFRg32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DFRg32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage1DRg16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DFRg16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DFRg16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage1DR32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DFR32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DFR32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage1DR16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DFR16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DFR16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage2DRgba32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DFRgba32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DFRgba32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage2DRgba16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DFRgba16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DFRgba16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage2DRg32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DFRg32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DFRg32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage2DRg16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DFRg16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DFRg16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage2DR32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DFR32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DFR32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage2DR16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DFR16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DFR16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage3DRgba32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels3DFRgba32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DFRgba32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage3DRgba16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels3DFRgba16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DFRgba16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage3DRg32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels3DFRg32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DFRg32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage3DRg16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels3DFRg16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DFRg16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage3DR32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels3DFR32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DFR32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage3DR16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels3DFR16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DFR16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImageCubeRgba32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeFRgba32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeFRgba32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImageCubeRgba16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeFRgba16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeFRgba16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImageCubeRg32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeFRg32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeFRg32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImageCubeRg16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeFRg16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeFRg16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImageCubeR32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeFR32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeFR32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImageCubeR16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeFR16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeFR16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage1DArrayRgba32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DArrayFRgba32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayFRgba32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage1DArrayRgba16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DArrayFRgba16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayFRgba16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage1DArrayRg32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DArrayFRg32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayFRg32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage1DArrayRg16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DArrayFRg16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayFRg16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage1DArrayR32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DArrayFR32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayFR32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage1DArrayR16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DArrayFR16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayFR16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage2DArrayRgba32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DArrayFRgba32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayFRgba32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage2DArrayRgba16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DArrayFRgba16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayFRgba16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage2DArrayRg32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DArrayFRg32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayFRg32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage2DArrayRg16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DArrayFRg16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayFRg16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage2DArrayR32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DArrayFR32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayFR32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage2DArrayR16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DArrayFR16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayFR16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImageCubeArrayRgba32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeArrayFRgba32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayFRgba32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImageCubeArrayRgba16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeArrayFRgba16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayFRgba16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImageCubeArrayRg32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeArrayFRg32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayFRg32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImageCubeArrayRg16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeArrayFRg16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayFRg16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImageCubeArrayR32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeArrayFR32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayFR32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImageCubeArrayR16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeArrayFR16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayFR16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage1DShadowR32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DShadowFR32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DShadowFR32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage1DShadowR16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DShadowFR16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DShadowFR16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage2DShadowR32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DShadowFR32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DShadowFR32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage2DShadowR16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DShadowFR16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DShadowFR16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImageCubeShadowR32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeShadowFR32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeShadowFR32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImageCubeShadowR16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeShadowFR16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeShadowFR16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage1DArrayShadowR32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DArrayShadowFR32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayShadowFR32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage1DArrayShadowR16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DArrayShadowFR16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayShadowFR16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage2DArrayShadowR32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DArrayShadowFR32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayShadowFR32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImage2DArrayShadowR16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DArrayShadowFR16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayShadowFR16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImageCubeArrayShadowR32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeArrayShadowFR32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayShadowFR32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< SampledImageCubeArrayShadowR16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeArrayShadowFR16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayShadowFR16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage1DRgba32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DIRgba32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DIRgba32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage1DRgba16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DIRgba16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DIRgba16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage1DRgba8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DIRgba8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DIRgba8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage1DRg32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DIRg32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DIRg32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage1DRg16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DIRg16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DIRg16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage1DRg8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DIRg8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DIRg8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage1DR32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DIR32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DIR32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage1DR16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DIR16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DIR16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage1DR8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DIR8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DIR8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage2DRgba32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DIRgba32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DIRgba32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage2DRgba16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DIRgba16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DIRgba16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage2DRgba8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DIRgba8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DIRgba8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage2DRg32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DIRg32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DIRg32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage2DRg16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DIRg16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DIRg16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage2DRg8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DIRg8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DIRg8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage2DR32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DIR32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DIR32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage2DR16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DIR16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DIR16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage2DR8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DIR8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DIR8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage3DRgba32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels3DIRgba32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DIRgba32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage3DRgba16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels3DIRgba16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DIRgba16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage3DRgba8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels3DIRgba8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DIRgba8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage3DRg32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels3DIRg32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DIRg32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage3DRg16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels3DIRg16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DIRg16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage3DRg8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels3DIRg8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DIRg8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage3DR32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels3DIR32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DIR32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage3DR16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels3DIR16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DIR16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage3DR8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels3DIR8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DIR8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImageCubeRgba32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeIRgba32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeIRgba32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImageCubeRgba16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeIRgba16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeIRgba16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImageCubeRgba8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeIRgba8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeIRgba8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImageCubeRg32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeIRg32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeIRg32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImageCubeRg16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeIRg16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeIRg16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImageCubeRg8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeIRg8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeIRg8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImageCubeR32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeIR32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeIR32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImageCubeR16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeIR16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeIR16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImageCubeR8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeIR8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeIR8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage1DArrayRgba32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DArrayIRgba32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayIRgba32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage1DArrayRgba16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DArrayIRgba16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayIRgba16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage1DArrayRgba8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DArrayIRgba8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayIRgba8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage1DArrayRg32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DArrayIRg32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayIRg32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage1DArrayRg16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DArrayIRg16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayIRg16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage1DArrayRg8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DArrayIRg8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayIRg8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage1DArrayR32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DArrayIR32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayIR32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage1DArrayR16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DArrayIR16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayIR16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage1DArrayR8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DArrayIR8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayIR8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage2DArrayRgba32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DArrayIRgba32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayIRgba32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage2DArrayRgba16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DArrayIRgba16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayIRgba16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage2DArrayRgba8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DArrayIRgba8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayIRgba8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage2DArrayRg32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DArrayIRg32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayIRg32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage2DArrayRg16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DArrayIRg16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayIRg16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage2DArrayRg8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DArrayIRg8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayIRg8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage2DArrayR32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DArrayIR32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayIR32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage2DArrayR16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DArrayIR16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayIR16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImage2DArrayR8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DArrayIR8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayIR8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImageCubeArrayRgba32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeArrayIRgba32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayIRgba32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImageCubeArrayRgba16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeArrayIRgba16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayIRgba16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImageCubeArrayRgba8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeArrayIRgba8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayIRgba8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImageCubeArrayRg32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeArrayIRg32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayIRg32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImageCubeArrayRg16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeArrayIRg16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayIRg16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImageCubeArrayRg8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeArrayIRg8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayIRg8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImageCubeArrayR32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeArrayIR32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayIR32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImageCubeArrayR16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeArrayIR16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayIR16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< ISampledImageCubeArrayR8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeArrayIR8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayIR8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage1DRgba32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DURgba32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DURgba32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage1DRgba16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DURgba16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DURgba16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage1DRgba8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DURgba8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DURgba8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage1DRg32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DURg32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DURg32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage1DRg16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DURg16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DURg16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage1DRg8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DURg8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DURg8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage1DR32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DUR32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DUR32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage1DR16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DUR16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DUR16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage1DR8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DUR8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DUR8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage2DRgba32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DURgba32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DURgba32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage2DRgba16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DURgba16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DURgba16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage2DRgba8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DURgba8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DURgba8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage2DRg32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DURg32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DURg32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage2DRg16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DURg16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DURg16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage2DRg8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DURg8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DURg8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage2DR32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DUR32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DUR32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage2DR16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DUR16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DUR16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage2DR8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DUR8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DUR8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage3DRgba32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels3DURgba32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DURgba32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage3DRgba16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels3DURgba16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DURgba16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage3DRgba8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels3DURgba8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DURgba8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage3DRg32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels3DURg32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DURg32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage3DRg16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels3DURg16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DURg16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage3DRg8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels3DURg8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DURg8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage3DR32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels3DUR32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DUR32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage3DR16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels3DUR16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DUR16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage3DR8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels3DUR8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels3DUR8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImageCubeRgba32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeURgba32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeURgba32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImageCubeRgba16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeURgba16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeURgba16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImageCubeRgba8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeURgba8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeURgba8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImageCubeRg32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeURg32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeURg32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImageCubeRg16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeURg16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeURg16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImageCubeRg8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeURg8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeURg8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImageCubeR32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeUR32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeUR32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImageCubeR16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeUR16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeUR16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImageCubeR8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeUR8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeUR8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage1DArrayRgba32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DArrayURgba32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayURgba32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage1DArrayRgba16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DArrayURgba16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayURgba16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage1DArrayRgba8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DArrayURgba8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayURgba8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage1DArrayRg32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DArrayURg32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayURg32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage1DArrayRg16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DArrayURg16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayURg16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage1DArrayRg8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DArrayURg8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayURg8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage1DArrayR32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DArrayUR32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayUR32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage1DArrayR16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DArrayUR16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayUR16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage1DArrayR8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels1DArrayUR8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels1DArrayUR8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage2DArrayRgba32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DArrayURgba32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayURgba32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage2DArrayRgba16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DArrayURgba16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayURgba16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage2DArrayRgba8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DArrayURgba8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayURgba8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage2DArrayRg32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DArrayURg32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayURg32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage2DArrayRg16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DArrayURg16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayURg16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage2DArrayRg8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DArrayURg8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayURg8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage2DArrayR32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DArrayUR32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayUR32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage2DArrayR16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DArrayUR16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayUR16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImage2DArrayR8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevels2DArrayUR8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevels2DArrayUR8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImageCubeArrayRgba32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeArrayURgba32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayURgba32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImageCubeArrayRgba16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeArrayURgba16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayURgba16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImageCubeArrayRgba8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeArrayURgba8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayURgba8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImageCubeArrayRg32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeArrayURg32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayURg32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImageCubeArrayRg16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeArrayURg16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayURg16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImageCubeArrayRg8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeArrayURg8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayURg8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImageCubeArrayR32 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeArrayUR32( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayUR32( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImageCubeArrayR16 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeArrayUR16( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayUR16( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	MaybeOptional< Int > textureQueryLevels( MaybeOptional< USampledImageCubeArrayR8 > const & image )
	{
		if ( isAnyOptional( image ) )
		{
			return Optional< Int >{ findShader( image )
				, expr::makeTextureQueryLevelsCubeArrayUR8( findTypesCache( image )
					, makeExpr( image ) )
				, areOptionalEnabled( image ) };
		}

		return Int{ findShader( image )
			, expr::makeTextureQueryLevelsCubeArrayUR8( findTypesCache( image )
				, makeExpr( image ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region texture
	/**
	*name
	*	texture
	*/
	/**@{*/
	MaybeOptional< Vec4 > texture( MaybeOptional< SampledImage1DRgba32 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTexture1DFRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTexture1DFRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > texture( MaybeOptional< SampledImage1DRgba16 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTexture1DFRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTexture1DFRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > texture( MaybeOptional< SampledImage1DRg32 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTexture1DFRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTexture1DFRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > texture( MaybeOptional< SampledImage1DRg16 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTexture1DFRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTexture1DFRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage1DR32 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Float >{ findShader( image, P )
				, expr::makeTexture1DFR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Float{ findShader( image, P )
			, expr::makeTexture1DFR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage1DR16 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Float >{ findShader( image, P )
				, expr::makeTexture1DFR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Float{ findShader( image, P )
			, expr::makeTexture1DFR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > texture( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTexture2DFRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTexture2DFRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > texture( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTexture2DFRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTexture2DFRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > texture( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTexture2DFRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTexture2DFRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > texture( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTexture2DFRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTexture2DFRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Float >{ findShader( image, P )
				, expr::makeTexture2DFR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Float{ findShader( image, P )
			, expr::makeTexture2DFR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Float >{ findShader( image, P )
				, expr::makeTexture2DFR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Float{ findShader( image, P )
			, expr::makeTexture2DFR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > texture( MaybeOptional< SampledImage3DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTexture3DFRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTexture3DFRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > texture( MaybeOptional< SampledImage3DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTexture3DFRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTexture3DFRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > texture( MaybeOptional< SampledImage3DRg32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTexture3DFRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTexture3DFRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > texture( MaybeOptional< SampledImage3DRg16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTexture3DFRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTexture3DFRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage3DR32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Float >{ findShader( image, P )
				, expr::makeTexture3DFR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Float{ findShader( image, P )
			, expr::makeTexture3DFR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage3DR16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Float >{ findShader( image, P )
				, expr::makeTexture3DFR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Float{ findShader( image, P )
			, expr::makeTexture3DFR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > texture( MaybeOptional< SampledImageCubeRgba32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureCubeFRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureCubeFRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > texture( MaybeOptional< SampledImageCubeRgba16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureCubeFRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureCubeFRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > texture( MaybeOptional< SampledImageCubeRg32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureCubeFRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureCubeFRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > texture( MaybeOptional< SampledImageCubeRg16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureCubeFRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureCubeFRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImageCubeR32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Float >{ findShader( image, P )
				, expr::makeTextureCubeFR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Float{ findShader( image, P )
			, expr::makeTextureCubeFR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImageCubeR16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Float >{ findShader( image, P )
				, expr::makeTextureCubeFR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Float{ findShader( image, P )
			, expr::makeTextureCubeFR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > texture( MaybeOptional< SampledImage1DArrayRgba32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTexture1DArrayFRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTexture1DArrayFRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > texture( MaybeOptional< SampledImage1DArrayRgba16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTexture1DArrayFRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTexture1DArrayFRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > texture( MaybeOptional< SampledImage1DArrayRg32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTexture1DArrayFRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTexture1DArrayFRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > texture( MaybeOptional< SampledImage1DArrayRg16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTexture1DArrayFRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTexture1DArrayFRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage1DArrayR32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Float >{ findShader( image, P )
				, expr::makeTexture1DArrayFR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Float{ findShader( image, P )
			, expr::makeTexture1DArrayFR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage1DArrayR16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Float >{ findShader( image, P )
				, expr::makeTexture1DArrayFR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Float{ findShader( image, P )
			, expr::makeTexture1DArrayFR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > texture( MaybeOptional< SampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTexture2DArrayFRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTexture2DArrayFRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > texture( MaybeOptional< SampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTexture2DArrayFRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTexture2DArrayFRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > texture( MaybeOptional< SampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTexture2DArrayFRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTexture2DArrayFRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > texture( MaybeOptional< SampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTexture2DArrayFRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTexture2DArrayFRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Float >{ findShader( image, P )
				, expr::makeTexture2DArrayFR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Float{ findShader( image, P )
			, expr::makeTexture2DArrayFR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Float >{ findShader( image, P )
				, expr::makeTexture2DArrayFR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Float{ findShader( image, P )
			, expr::makeTexture2DArrayFR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > texture( MaybeOptional< SampledImageCubeArrayRgba32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureCubeArrayFRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureCubeArrayFRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > texture( MaybeOptional< SampledImageCubeArrayRgba16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureCubeArrayFRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureCubeArrayFRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > texture( MaybeOptional< SampledImageCubeArrayRg32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureCubeArrayFRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureCubeArrayFRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > texture( MaybeOptional< SampledImageCubeArrayRg16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureCubeArrayFRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureCubeArrayFRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImageCubeArrayR32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Float >{ findShader( image, P )
				, expr::makeTextureCubeArrayFR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Float{ findShader( image, P )
			, expr::makeTextureCubeArrayFR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImageCubeArrayR16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Float >{ findShader( image, P )
				, expr::makeTextureCubeArrayFR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Float{ findShader( image, P )
			, expr::makeTextureCubeArrayFR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImage1DRgba32 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTexture1DIRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTexture1DIRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImage1DRgba16 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTexture1DIRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTexture1DIRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImage1DRgba8 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTexture1DIRgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTexture1DIRgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImage1DRg32 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTexture1DIRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTexture1DIRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImage1DRg16 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTexture1DIRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTexture1DIRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImage1DRg8 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTexture1DIRg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTexture1DIRg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImage1DR32 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTexture1DIR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTexture1DIR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImage1DR16 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTexture1DIR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTexture1DIR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImage1DR8 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTexture1DIR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTexture1DIR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTexture2DIRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTexture2DIRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTexture2DIRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTexture2DIRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTexture2DIRgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTexture2DIRgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTexture2DIRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTexture2DIRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTexture2DIRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTexture2DIRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTexture2DIRg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTexture2DIRg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTexture2DIR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTexture2DIR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTexture2DIR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTexture2DIR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTexture2DIR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTexture2DIR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImage3DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTexture3DIRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTexture3DIRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImage3DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTexture3DIRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTexture3DIRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImage3DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTexture3DIRgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTexture3DIRgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImage3DRg32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTexture3DIRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTexture3DIRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImage3DRg16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTexture3DIRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTexture3DIRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImage3DRg8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTexture3DIRg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTexture3DIRg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImage3DR32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTexture3DIR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTexture3DIR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImage3DR16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTexture3DIR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTexture3DIR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImage3DR8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTexture3DIR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTexture3DIR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImageCubeRgba32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureCubeIRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureCubeIRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImageCubeRgba16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureCubeIRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureCubeIRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImageCubeRgba8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureCubeIRgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureCubeIRgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImageCubeRg32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTextureCubeIRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTextureCubeIRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImageCubeRg16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTextureCubeIRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTextureCubeIRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImageCubeRg8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTextureCubeIRg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTextureCubeIRg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImageCubeR32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTextureCubeIR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTextureCubeIR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImageCubeR16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTextureCubeIR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTextureCubeIR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImageCubeR8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTextureCubeIR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTextureCubeIR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImage1DArrayRgba32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTexture1DArrayIRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTexture1DArrayIRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImage1DArrayRgba16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTexture1DArrayIRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTexture1DArrayIRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImage1DArrayRgba8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTexture1DArrayIRgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTexture1DArrayIRgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImage1DArrayRg32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTexture1DArrayIRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTexture1DArrayIRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImage1DArrayRg16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTexture1DArrayIRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTexture1DArrayIRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImage1DArrayRg8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTexture1DArrayIRg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTexture1DArrayIRg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImage1DArrayR32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTexture1DArrayIR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTexture1DArrayIR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImage1DArrayR16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTexture1DArrayIR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTexture1DArrayIR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImage1DArrayR8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTexture1DArrayIR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTexture1DArrayIR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTexture2DArrayIRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTexture2DArrayIRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTexture2DArrayIRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTexture2DArrayIRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTexture2DArrayIRgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTexture2DArrayIRgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTexture2DArrayIRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTexture2DArrayIRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTexture2DArrayIRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTexture2DArrayIRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImage2DArrayRg8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTexture2DArrayIRg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTexture2DArrayIRg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTexture2DArrayIR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTexture2DArrayIR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTexture2DArrayIR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTexture2DArrayIR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImage2DArrayR8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTexture2DArrayIR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTexture2DArrayIR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImageCubeArrayRgba32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureCubeArrayIRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureCubeArrayIRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImageCubeArrayRgba16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureCubeArrayIRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureCubeArrayIRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImageCubeArrayRgba8 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureCubeArrayIRgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureCubeArrayIRgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImageCubeArrayRg32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTextureCubeArrayIRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTextureCubeArrayIRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImageCubeArrayRg16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTextureCubeArrayIRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTextureCubeArrayIRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImageCubeArrayRg8 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTextureCubeArrayIRg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTextureCubeArrayIRg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImageCubeArrayR32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTextureCubeArrayIR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTextureCubeArrayIR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImageCubeArrayR16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTextureCubeArrayIR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTextureCubeArrayIR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImageCubeArrayR8 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTextureCubeArrayIR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTextureCubeArrayIR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImage1DRgba32 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTexture1DURgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTexture1DURgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImage1DRgba16 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTexture1DURgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTexture1DURgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImage1DRgba8 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTexture1DURgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTexture1DURgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImage1DRg32 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTexture1DURg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTexture1DURg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImage1DRg16 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTexture1DURg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTexture1DURg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImage1DRg8 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTexture1DURg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTexture1DURg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImage1DR32 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTexture1DUR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTexture1DUR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImage1DR16 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTexture1DUR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTexture1DUR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImage1DR8 > const & image
		, MaybeOptional< Float > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTexture1DUR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTexture1DUR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTexture2DURgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTexture2DURgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTexture2DURgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTexture2DURgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTexture2DURgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTexture2DURgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTexture2DURg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTexture2DURg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTexture2DURg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTexture2DURg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTexture2DURg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTexture2DURg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTexture2DUR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTexture2DUR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTexture2DUR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTexture2DUR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTexture2DUR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTexture2DUR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImage3DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTexture3DURgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTexture3DURgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImage3DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTexture3DURgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTexture3DURgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImage3DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTexture3DURgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTexture3DURgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImage3DRg32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTexture3DURg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTexture3DURg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImage3DRg16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTexture3DURg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTexture3DURg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImage3DRg8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTexture3DURg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTexture3DURg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImage3DR32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTexture3DUR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTexture3DUR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImage3DR16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTexture3DUR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTexture3DUR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImage3DR8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTexture3DUR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTexture3DUR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImageCubeRgba32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureCubeURgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureCubeURgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImageCubeRgba16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureCubeURgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureCubeURgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImageCubeRgba8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureCubeURgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureCubeURgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImageCubeRg32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTextureCubeURg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTextureCubeURg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImageCubeRg16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTextureCubeURg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTextureCubeURg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImageCubeRg8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTextureCubeURg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTextureCubeURg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImageCubeR32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTextureCubeUR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTextureCubeUR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImageCubeR16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTextureCubeUR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTextureCubeUR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImageCubeR8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTextureCubeUR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTextureCubeUR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImage1DArrayRgba32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTexture1DArrayURgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTexture1DArrayURgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImage1DArrayRgba16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTexture1DArrayURgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTexture1DArrayURgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImage1DArrayRgba8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTexture1DArrayURgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTexture1DArrayURgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImage1DArrayRg32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTexture1DArrayURg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTexture1DArrayURg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImage1DArrayRg16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTexture1DArrayURg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTexture1DArrayURg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImage1DArrayRg8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTexture1DArrayURg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTexture1DArrayURg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImage1DArrayR32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTexture1DArrayUR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTexture1DArrayUR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImage1DArrayR16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTexture1DArrayUR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTexture1DArrayUR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImage1DArrayR8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTexture1DArrayUR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTexture1DArrayUR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTexture2DArrayURgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTexture2DArrayURgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTexture2DArrayURgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTexture2DArrayURgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTexture2DArrayURgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTexture2DArrayURgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTexture2DArrayURg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTexture2DArrayURg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTexture2DArrayURg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTexture2DArrayURg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImage2DArrayRg8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTexture2DArrayURg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTexture2DArrayURg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTexture2DArrayUR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTexture2DArrayUR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTexture2DArrayUR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTexture2DArrayUR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImage2DArrayR8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTexture2DArrayUR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTexture2DArrayUR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImageCubeArrayRgba32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureCubeArrayURgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureCubeArrayURgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImageCubeArrayRgba16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureCubeArrayURgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureCubeArrayURgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImageCubeArrayRgba8 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureCubeArrayURgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureCubeArrayURgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImageCubeArrayRg32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTextureCubeArrayURg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTextureCubeArrayURg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImageCubeArrayRg16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTextureCubeArrayURg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTextureCubeArrayURg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImageCubeArrayRg8 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTextureCubeArrayURg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTextureCubeArrayURg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImageCubeArrayR32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTextureCubeArrayUR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTextureCubeArrayUR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImageCubeArrayR16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTextureCubeArrayUR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTextureCubeArrayUR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImageCubeArrayR8 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTextureCubeArrayUR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTextureCubeArrayUR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage1DShadowR32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & refZ )
	{
		if ( isAnyOptional( image, P, refZ ) )
		{
			return Optional< Float >{ findShader( image, P, refZ )
				, expr::makeTexture1DShadowFR32( findTypesCache( image, P, refZ )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ ) )
				, areOptionalEnabled( image, P, refZ ) };
		}

		return Float{ findShader( image, P, refZ )
			, expr::makeTexture1DShadowFR32( findTypesCache( image, P, refZ )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage1DShadowR16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & refZ )
	{
		if ( isAnyOptional( image, P, refZ ) )
		{
			return Optional< Float >{ findShader( image, P, refZ )
				, expr::makeTexture1DShadowFR16( findTypesCache( image, P, refZ )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ ) )
				, areOptionalEnabled( image, P, refZ ) };
		}

		return Float{ findShader( image, P, refZ )
			, expr::makeTexture1DShadowFR16( findTypesCache( image, P, refZ )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage2DShadowR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ )
	{
		if ( isAnyOptional( image, P, refZ ) )
		{
			return Optional< Float >{ findShader( image, P, refZ )
				, expr::makeTexture2DShadowFR32( findTypesCache( image, P, refZ )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ ) )
				, areOptionalEnabled( image, P, refZ ) };
		}

		return Float{ findShader( image, P, refZ )
			, expr::makeTexture2DShadowFR32( findTypesCache( image, P, refZ )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage2DShadowR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ )
	{
		if ( isAnyOptional( image, P, refZ ) )
		{
			return Optional< Float >{ findShader( image, P, refZ )
				, expr::makeTexture2DShadowFR16( findTypesCache( image, P, refZ )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ ) )
				, areOptionalEnabled( image, P, refZ ) };
		}

		return Float{ findShader( image, P, refZ )
			, expr::makeTexture2DShadowFR16( findTypesCache( image, P, refZ )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImageCubeShadowR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ )
	{
		if ( isAnyOptional( image, P, refZ ) )
		{
			return Optional< Float >{ findShader( image, P, refZ )
				, expr::makeTextureCubeShadowFR32( findTypesCache( image, P, refZ )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ ) )
				, areOptionalEnabled( image, P, refZ ) };
		}

		return Float{ findShader( image, P, refZ )
			, expr::makeTextureCubeShadowFR32( findTypesCache( image, P, refZ )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImageCubeShadowR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ )
	{
		if ( isAnyOptional( image, P, refZ ) )
		{
			return Optional< Float >{ findShader( image, P, refZ )
				, expr::makeTextureCubeShadowFR16( findTypesCache( image, P, refZ )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ ) )
				, areOptionalEnabled( image, P, refZ ) };
		}

		return Float{ findShader( image, P, refZ )
			, expr::makeTextureCubeShadowFR16( findTypesCache( image, P, refZ )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage1DArrayShadowR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ )
	{
		if ( isAnyOptional( image, P, refZ ) )
		{
			return Optional< Float >{ findShader( image, P, refZ )
				, expr::makeTexture1DArrayShadowFR32( findTypesCache( image, P, refZ )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ ) )
				, areOptionalEnabled( image, P, refZ ) };
		}

		return Float{ findShader( image, P, refZ )
			, expr::makeTexture1DArrayShadowFR32( findTypesCache( image, P, refZ )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage1DArrayShadowR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ )
	{
		if ( isAnyOptional( image, P, refZ ) )
		{
			return Optional< Float >{ findShader( image, P, refZ )
				, expr::makeTexture1DArrayShadowFR16( findTypesCache( image, P, refZ )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ ) )
				, areOptionalEnabled( image, P, refZ ) };
		}

		return Float{ findShader( image, P, refZ )
			, expr::makeTexture1DArrayShadowFR16( findTypesCache( image, P, refZ )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage2DArrayShadowR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ )
	{
		if ( isAnyOptional( image, P, refZ ) )
		{
			return Optional< Float >{ findShader( image, P, refZ )
				, expr::makeTexture2DArrayShadowFR32( findTypesCache( image, P, refZ )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ ) )
				, areOptionalEnabled( image, P, refZ ) };
		}

		return Float{ findShader( image, P, refZ )
			, expr::makeTexture2DArrayShadowFR32( findTypesCache( image, P, refZ )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage2DArrayShadowR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ )
	{
		if ( isAnyOptional( image, P, refZ ) )
		{
			return Optional< Float >{ findShader( image, P, refZ )
				, expr::makeTexture2DArrayShadowFR16( findTypesCache( image, P, refZ )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ ) )
				, areOptionalEnabled( image, P, refZ ) };
		}

		return Float{ findShader( image, P, refZ )
			, expr::makeTexture2DArrayShadowFR16( findTypesCache( image, P, refZ )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImageCubeArrayShadowR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & refZ )
	{
		if ( isAnyOptional( image, P, refZ ) )
		{
			return Optional< Float >{ findShader( image, P, refZ )
				, expr::makeTextureCubeArrayShadowFR32( findTypesCache( image, P, refZ )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ ) )
				, areOptionalEnabled( image, P, refZ ) };
		}

		return Float{ findShader( image, P, refZ )
			, expr::makeTextureCubeArrayShadowFR32( findTypesCache( image, P, refZ )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImageCubeArrayShadowR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & refZ )
	{
		if ( isAnyOptional( image, P, refZ ) )
		{
			return Optional< Float >{ findShader( image, P, refZ )
				, expr::makeTextureCubeArrayShadowFR16( findTypesCache( image, P, refZ )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ ) )
				, areOptionalEnabled( image, P, refZ ) };
		}

		return Float{ findShader( image, P, refZ )
			, expr::makeTextureCubeArrayShadowFR16( findTypesCache( image, P, refZ )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureBias
	/**
	*name
	*	textureBias
	*/
	/**@{*/
	MaybeOptional< Vec4 > texture( MaybeOptional< SampledImage1DRgba32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, bias )
				, expr::makeTexture1DFBiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec4{ findShader( image, P, bias )
			, expr::makeTexture1DFBiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > texture( MaybeOptional< SampledImage1DRgba16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, bias )
				, expr::makeTexture1DFBiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec4{ findShader( image, P, bias )
			, expr::makeTexture1DFBiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > texture( MaybeOptional< SampledImage1DRg32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, bias )
				, expr::makeTexture1DFBiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec2{ findShader( image, P, bias )
			, expr::makeTexture1DFBiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > texture( MaybeOptional< SampledImage1DRg16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, bias )
				, expr::makeTexture1DFBiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec2{ findShader( image, P, bias )
			, expr::makeTexture1DFBiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage1DR32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Float >{ findShader( image, P, bias )
				, expr::makeTexture1DFBiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Float{ findShader( image, P, bias )
			, expr::makeTexture1DFBiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage1DR16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Float >{ findShader( image, P, bias )
				, expr::makeTexture1DFBiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Float{ findShader( image, P, bias )
			, expr::makeTexture1DFBiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > texture( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, bias )
				, expr::makeTexture2DFBiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec4{ findShader( image, P, bias )
			, expr::makeTexture2DFBiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > texture( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, bias )
				, expr::makeTexture2DFBiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec4{ findShader( image, P, bias )
			, expr::makeTexture2DFBiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > texture( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, bias )
				, expr::makeTexture2DFBiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec2{ findShader( image, P, bias )
			, expr::makeTexture2DFBiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > texture( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, bias )
				, expr::makeTexture2DFBiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec2{ findShader( image, P, bias )
			, expr::makeTexture2DFBiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Float >{ findShader( image, P, bias )
				, expr::makeTexture2DFBiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Float{ findShader( image, P, bias )
			, expr::makeTexture2DFBiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Float >{ findShader( image, P, bias )
				, expr::makeTexture2DFBiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Float{ findShader( image, P, bias )
			, expr::makeTexture2DFBiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > texture( MaybeOptional< SampledImage3DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, bias )
				, expr::makeTexture3DFBiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec4{ findShader( image, P, bias )
			, expr::makeTexture3DFBiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > texture( MaybeOptional< SampledImage3DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, bias )
				, expr::makeTexture3DFBiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec4{ findShader( image, P, bias )
			, expr::makeTexture3DFBiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > texture( MaybeOptional< SampledImage3DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, bias )
				, expr::makeTexture3DFBiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec2{ findShader( image, P, bias )
			, expr::makeTexture3DFBiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > texture( MaybeOptional< SampledImage3DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, bias )
				, expr::makeTexture3DFBiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec2{ findShader( image, P, bias )
			, expr::makeTexture3DFBiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage3DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Float >{ findShader( image, P, bias )
				, expr::makeTexture3DFBiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Float{ findShader( image, P, bias )
			, expr::makeTexture3DFBiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage3DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Float >{ findShader( image, P, bias )
				, expr::makeTexture3DFBiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Float{ findShader( image, P, bias )
			, expr::makeTexture3DFBiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > texture( MaybeOptional< SampledImageCubeRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, bias )
				, expr::makeTextureCubeFBiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec4{ findShader( image, P, bias )
			, expr::makeTextureCubeFBiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > texture( MaybeOptional< SampledImageCubeRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, bias )
				, expr::makeTextureCubeFBiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec4{ findShader( image, P, bias )
			, expr::makeTextureCubeFBiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > texture( MaybeOptional< SampledImageCubeRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, bias )
				, expr::makeTextureCubeFBiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec2{ findShader( image, P, bias )
			, expr::makeTextureCubeFBiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > texture( MaybeOptional< SampledImageCubeRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, bias )
				, expr::makeTextureCubeFBiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec2{ findShader( image, P, bias )
			, expr::makeTextureCubeFBiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImageCubeR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Float >{ findShader( image, P, bias )
				, expr::makeTextureCubeFBiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Float{ findShader( image, P, bias )
			, expr::makeTextureCubeFBiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImageCubeR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Float >{ findShader( image, P, bias )
				, expr::makeTextureCubeFBiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Float{ findShader( image, P, bias )
			, expr::makeTextureCubeFBiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > texture( MaybeOptional< SampledImage1DArrayRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, bias )
				, expr::makeTexture1DArrayFBiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec4{ findShader( image, P, bias )
			, expr::makeTexture1DArrayFBiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > texture( MaybeOptional< SampledImage1DArrayRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, bias )
				, expr::makeTexture1DArrayFBiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec4{ findShader( image, P, bias )
			, expr::makeTexture1DArrayFBiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > texture( MaybeOptional< SampledImage1DArrayRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, bias )
				, expr::makeTexture1DArrayFBiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec2{ findShader( image, P, bias )
			, expr::makeTexture1DArrayFBiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > texture( MaybeOptional< SampledImage1DArrayRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, bias )
				, expr::makeTexture1DArrayFBiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec2{ findShader( image, P, bias )
			, expr::makeTexture1DArrayFBiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage1DArrayR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Float >{ findShader( image, P, bias )
				, expr::makeTexture1DArrayFBiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Float{ findShader( image, P, bias )
			, expr::makeTexture1DArrayFBiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage1DArrayR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Float >{ findShader( image, P, bias )
				, expr::makeTexture1DArrayFBiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Float{ findShader( image, P, bias )
			, expr::makeTexture1DArrayFBiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > texture( MaybeOptional< SampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, bias )
				, expr::makeTexture2DArrayFBiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec4{ findShader( image, P, bias )
			, expr::makeTexture2DArrayFBiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > texture( MaybeOptional< SampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, bias )
				, expr::makeTexture2DArrayFBiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec4{ findShader( image, P, bias )
			, expr::makeTexture2DArrayFBiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > texture( MaybeOptional< SampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, bias )
				, expr::makeTexture2DArrayFBiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec2{ findShader( image, P, bias )
			, expr::makeTexture2DArrayFBiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > texture( MaybeOptional< SampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, bias )
				, expr::makeTexture2DArrayFBiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec2{ findShader( image, P, bias )
			, expr::makeTexture2DArrayFBiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Float >{ findShader( image, P, bias )
				, expr::makeTexture2DArrayFBiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Float{ findShader( image, P, bias )
			, expr::makeTexture2DArrayFBiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Float >{ findShader( image, P, bias )
				, expr::makeTexture2DArrayFBiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Float{ findShader( image, P, bias )
			, expr::makeTexture2DArrayFBiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > texture( MaybeOptional< SampledImageCubeArrayRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, bias )
				, expr::makeTextureCubeArrayFBiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec4{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayFBiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > texture( MaybeOptional< SampledImageCubeArrayRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, bias )
				, expr::makeTextureCubeArrayFBiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec4{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayFBiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > texture( MaybeOptional< SampledImageCubeArrayRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, bias )
				, expr::makeTextureCubeArrayFBiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec2{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayFBiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > texture( MaybeOptional< SampledImageCubeArrayRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, bias )
				, expr::makeTextureCubeArrayFBiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec2{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayFBiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImageCubeArrayR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Float >{ findShader( image, P, bias )
				, expr::makeTextureCubeArrayFBiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Float{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayFBiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImageCubeArrayR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Float >{ findShader( image, P, bias )
				, expr::makeTextureCubeArrayFBiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Float{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayFBiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImage1DRgba32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTexture1DIBiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTexture1DIBiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImage1DRgba16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTexture1DIBiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTexture1DIBiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImage1DRgba8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTexture1DIBiasRgba8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTexture1DIBiasRgba8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImage1DRg32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTexture1DIBiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTexture1DIBiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImage1DRg16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTexture1DIBiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTexture1DIBiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImage1DRg8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTexture1DIBiasRg8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTexture1DIBiasRg8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImage1DR32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTexture1DIBiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTexture1DIBiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImage1DR16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTexture1DIBiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTexture1DIBiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImage1DR8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTexture1DIBiasR8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTexture1DIBiasR8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTexture2DIBiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTexture2DIBiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTexture2DIBiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTexture2DIBiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTexture2DIBiasRgba8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTexture2DIBiasRgba8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTexture2DIBiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTexture2DIBiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTexture2DIBiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTexture2DIBiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTexture2DIBiasRg8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTexture2DIBiasRg8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTexture2DIBiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTexture2DIBiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTexture2DIBiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTexture2DIBiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTexture2DIBiasR8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTexture2DIBiasR8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImage3DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTexture3DIBiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTexture3DIBiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImage3DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTexture3DIBiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTexture3DIBiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImage3DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTexture3DIBiasRgba8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTexture3DIBiasRgba8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImage3DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTexture3DIBiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTexture3DIBiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImage3DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTexture3DIBiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTexture3DIBiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImage3DRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTexture3DIBiasRg8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTexture3DIBiasRg8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImage3DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTexture3DIBiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTexture3DIBiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImage3DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTexture3DIBiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTexture3DIBiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImage3DR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTexture3DIBiasR8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTexture3DIBiasR8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImageCubeRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTextureCubeIBiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureCubeIBiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImageCubeRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTextureCubeIBiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureCubeIBiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImageCubeRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTextureCubeIBiasRgba8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureCubeIBiasRgba8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImageCubeRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTextureCubeIBiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureCubeIBiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImageCubeRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTextureCubeIBiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureCubeIBiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImageCubeRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTextureCubeIBiasRg8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureCubeIBiasRg8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImageCubeR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTextureCubeIBiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTextureCubeIBiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImageCubeR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTextureCubeIBiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTextureCubeIBiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImageCubeR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTextureCubeIBiasR8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTextureCubeIBiasR8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImage1DArrayRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTexture1DArrayIBiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTexture1DArrayIBiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImage1DArrayRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTexture1DArrayIBiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTexture1DArrayIBiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImage1DArrayRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTexture1DArrayIBiasRgba8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTexture1DArrayIBiasRgba8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImage1DArrayRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTexture1DArrayIBiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTexture1DArrayIBiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImage1DArrayRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTexture1DArrayIBiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTexture1DArrayIBiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImage1DArrayRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTexture1DArrayIBiasRg8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTexture1DArrayIBiasRg8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImage1DArrayR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTexture1DArrayIBiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTexture1DArrayIBiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImage1DArrayR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTexture1DArrayIBiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTexture1DArrayIBiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImage1DArrayR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTexture1DArrayIBiasR8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTexture1DArrayIBiasR8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTexture2DArrayIBiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTexture2DArrayIBiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTexture2DArrayIBiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTexture2DArrayIBiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTexture2DArrayIBiasRgba8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTexture2DArrayIBiasRgba8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTexture2DArrayIBiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTexture2DArrayIBiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTexture2DArrayIBiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTexture2DArrayIBiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImage2DArrayRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTexture2DArrayIBiasRg8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTexture2DArrayIBiasRg8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTexture2DArrayIBiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTexture2DArrayIBiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTexture2DArrayIBiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTexture2DArrayIBiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImage2DArrayR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTexture2DArrayIBiasR8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTexture2DArrayIBiasR8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImageCubeArrayRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTextureCubeArrayIBiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayIBiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImageCubeArrayRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTextureCubeArrayIBiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayIBiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > texture( MaybeOptional< ISampledImageCubeArrayRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTextureCubeArrayIBiasRgba8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayIBiasRgba8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImageCubeArrayRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTextureCubeArrayIBiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayIBiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImageCubeArrayRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTextureCubeArrayIBiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayIBiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > texture( MaybeOptional< ISampledImageCubeArrayRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTextureCubeArrayIBiasRg8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayIBiasRg8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImageCubeArrayR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTextureCubeArrayIBiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayIBiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImageCubeArrayR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTextureCubeArrayIBiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayIBiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > texture( MaybeOptional< ISampledImageCubeArrayR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTextureCubeArrayIBiasR8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayIBiasR8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImage1DRgba32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTexture1DUBiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTexture1DUBiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImage1DRgba16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTexture1DUBiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTexture1DUBiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImage1DRgba8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTexture1DUBiasRgba8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTexture1DUBiasRgba8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImage1DRg32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTexture1DUBiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTexture1DUBiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImage1DRg16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTexture1DUBiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTexture1DUBiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImage1DRg8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTexture1DUBiasRg8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTexture1DUBiasRg8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImage1DR32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTexture1DUBiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTexture1DUBiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImage1DR16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTexture1DUBiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTexture1DUBiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImage1DR8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTexture1DUBiasR8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTexture1DUBiasR8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTexture2DUBiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTexture2DUBiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTexture2DUBiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTexture2DUBiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTexture2DUBiasRgba8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTexture2DUBiasRgba8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTexture2DUBiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTexture2DUBiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTexture2DUBiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTexture2DUBiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTexture2DUBiasRg8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTexture2DUBiasRg8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTexture2DUBiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTexture2DUBiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTexture2DUBiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTexture2DUBiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTexture2DUBiasR8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTexture2DUBiasR8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImage3DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTexture3DUBiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTexture3DUBiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImage3DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTexture3DUBiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTexture3DUBiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImage3DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTexture3DUBiasRgba8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTexture3DUBiasRgba8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImage3DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTexture3DUBiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTexture3DUBiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImage3DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTexture3DUBiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTexture3DUBiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImage3DRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTexture3DUBiasRg8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTexture3DUBiasRg8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImage3DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTexture3DUBiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTexture3DUBiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImage3DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTexture3DUBiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTexture3DUBiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImage3DR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTexture3DUBiasR8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTexture3DUBiasR8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImageCubeRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTextureCubeUBiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureCubeUBiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImageCubeRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTextureCubeUBiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureCubeUBiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImageCubeRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTextureCubeUBiasRgba8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureCubeUBiasRgba8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImageCubeRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTextureCubeUBiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureCubeUBiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImageCubeRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTextureCubeUBiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureCubeUBiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImageCubeRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTextureCubeUBiasRg8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureCubeUBiasRg8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImageCubeR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTextureCubeUBiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTextureCubeUBiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImageCubeR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTextureCubeUBiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTextureCubeUBiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImageCubeR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTextureCubeUBiasR8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTextureCubeUBiasR8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImage1DArrayRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTexture1DArrayUBiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTexture1DArrayUBiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImage1DArrayRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTexture1DArrayUBiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTexture1DArrayUBiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImage1DArrayRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTexture1DArrayUBiasRgba8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTexture1DArrayUBiasRgba8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImage1DArrayRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTexture1DArrayUBiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTexture1DArrayUBiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImage1DArrayRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTexture1DArrayUBiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTexture1DArrayUBiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImage1DArrayRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTexture1DArrayUBiasRg8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTexture1DArrayUBiasRg8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImage1DArrayR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTexture1DArrayUBiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTexture1DArrayUBiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImage1DArrayR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTexture1DArrayUBiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTexture1DArrayUBiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImage1DArrayR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTexture1DArrayUBiasR8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTexture1DArrayUBiasR8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTexture2DArrayUBiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTexture2DArrayUBiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTexture2DArrayUBiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTexture2DArrayUBiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTexture2DArrayUBiasRgba8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTexture2DArrayUBiasRgba8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTexture2DArrayUBiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTexture2DArrayUBiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTexture2DArrayUBiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTexture2DArrayUBiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImage2DArrayRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTexture2DArrayUBiasRg8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTexture2DArrayUBiasRg8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTexture2DArrayUBiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTexture2DArrayUBiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTexture2DArrayUBiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTexture2DArrayUBiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImage2DArrayR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTexture2DArrayUBiasR8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTexture2DArrayUBiasR8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImageCubeArrayRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTextureCubeArrayUBiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayUBiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImageCubeArrayRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTextureCubeArrayUBiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayUBiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > texture( MaybeOptional< USampledImageCubeArrayRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTextureCubeArrayUBiasRgba8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayUBiasRgba8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImageCubeArrayRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTextureCubeArrayUBiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayUBiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImageCubeArrayRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTextureCubeArrayUBiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayUBiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > texture( MaybeOptional< USampledImageCubeArrayRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTextureCubeArrayUBiasRg8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayUBiasRg8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImageCubeArrayR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTextureCubeArrayUBiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayUBiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImageCubeArrayR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTextureCubeArrayUBiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayUBiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > texture( MaybeOptional< USampledImageCubeArrayR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTextureCubeArrayUBiasR8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTextureCubeArrayUBiasR8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage1DShadowR32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, refZ, bias ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, bias )
				, expr::makeTexture1DShadowFBiasR32( findTypesCache( image, P, refZ, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, refZ, bias ) };
		}

		return Float{ findShader( image, P, refZ, bias )
			, expr::makeTexture1DShadowFBiasR32( findTypesCache( image, P, refZ, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage1DShadowR16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, refZ, bias ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, bias )
				, expr::makeTexture1DShadowFBiasR16( findTypesCache( image, P, refZ, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, refZ, bias ) };
		}

		return Float{ findShader( image, P, refZ, bias )
			, expr::makeTexture1DShadowFBiasR16( findTypesCache( image, P, refZ, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage2DShadowR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, refZ, bias ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, bias )
				, expr::makeTexture2DShadowFBiasR32( findTypesCache( image, P, refZ, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, refZ, bias ) };
		}

		return Float{ findShader( image, P, refZ, bias )
			, expr::makeTexture2DShadowFBiasR32( findTypesCache( image, P, refZ, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage2DShadowR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, refZ, bias ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, bias )
				, expr::makeTexture2DShadowFBiasR16( findTypesCache( image, P, refZ, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, refZ, bias ) };
		}

		return Float{ findShader( image, P, refZ, bias )
			, expr::makeTexture2DShadowFBiasR16( findTypesCache( image, P, refZ, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImageCubeShadowR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, refZ, bias ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, bias )
				, expr::makeTextureCubeShadowFBiasR32( findTypesCache( image, P, refZ, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, refZ, bias ) };
		}

		return Float{ findShader( image, P, refZ, bias )
			, expr::makeTextureCubeShadowFBiasR32( findTypesCache( image, P, refZ, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImageCubeShadowR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, refZ, bias ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, bias )
				, expr::makeTextureCubeShadowFBiasR16( findTypesCache( image, P, refZ, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, refZ, bias ) };
		}

		return Float{ findShader( image, P, refZ, bias )
			, expr::makeTextureCubeShadowFBiasR16( findTypesCache( image, P, refZ, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage1DArrayShadowR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, refZ, bias ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, bias )
				, expr::makeTexture1DArrayShadowFBiasR32( findTypesCache( image, P, refZ, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, refZ, bias ) };
		}

		return Float{ findShader( image, P, refZ, bias )
			, expr::makeTexture1DArrayShadowFBiasR32( findTypesCache( image, P, refZ, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > texture( MaybeOptional< SampledImage1DArrayShadowR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, refZ, bias ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, bias )
				, expr::makeTexture1DArrayShadowFBiasR16( findTypesCache( image, P, refZ, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, refZ, bias ) };
		}

		return Float{ findShader( image, P, refZ, bias )
			, expr::makeTexture1DArrayShadowFBiasR16( findTypesCache( image, P, refZ, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( bias ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureProj
	/**
	*name
	*	textureProj
	*/
	/**@{*/
	MaybeOptional< Vec4 > textureProj( MaybeOptional< SampledImage1DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureProj1DF2Rgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureProj1DF2Rgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureProj( MaybeOptional< SampledImage1DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureProj1DF2Rgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureProj1DF2Rgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureProj( MaybeOptional< SampledImage1DRg32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureProj1DF2Rg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureProj1DF2Rg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureProj( MaybeOptional< SampledImage1DRg16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureProj1DF2Rg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureProj1DF2Rg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Float > textureProj( MaybeOptional< SampledImage1DR32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Float >{ findShader( image, P )
				, expr::makeTextureProj1DF2R32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Float{ findShader( image, P )
			, expr::makeTextureProj1DF2R32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Float > textureProj( MaybeOptional< SampledImage1DR16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Float >{ findShader( image, P )
				, expr::makeTextureProj1DF2R16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Float{ findShader( image, P )
			, expr::makeTextureProj1DF2R16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureProj( MaybeOptional< SampledImage1DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureProj1DF4Rgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureProj1DF4Rgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureProj( MaybeOptional< SampledImage1DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureProj1DF4Rgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureProj1DF4Rgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureProj( MaybeOptional< SampledImage1DRg32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureProj1DF4Rg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureProj1DF4Rg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureProj( MaybeOptional< SampledImage1DRg16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureProj1DF4Rg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureProj1DF4Rg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Float > textureProj( MaybeOptional< SampledImage1DR32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Float >{ findShader( image, P )
				, expr::makeTextureProj1DF4R32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Float{ findShader( image, P )
			, expr::makeTextureProj1DF4R32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Float > textureProj( MaybeOptional< SampledImage1DR16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Float >{ findShader( image, P )
				, expr::makeTextureProj1DF4R16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Float{ findShader( image, P )
			, expr::makeTextureProj1DF4R16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureProj( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureProj2DF3Rgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureProj2DF3Rgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureProj( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureProj2DF3Rgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureProj2DF3Rgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureProj( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureProj2DF3Rg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureProj2DF3Rg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureProj( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureProj2DF3Rg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureProj2DF3Rg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Float > textureProj( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Float >{ findShader( image, P )
				, expr::makeTextureProj2DF3R32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Float{ findShader( image, P )
			, expr::makeTextureProj2DF3R32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Float > textureProj( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Float >{ findShader( image, P )
				, expr::makeTextureProj2DF3R16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Float{ findShader( image, P )
			, expr::makeTextureProj2DF3R16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureProj( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureProj2DF4Rgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureProj2DF4Rgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureProj( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureProj2DF4Rgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureProj2DF4Rgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureProj( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureProj2DF4Rg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureProj2DF4Rg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureProj( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureProj2DF4Rg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureProj2DF4Rg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Float > textureProj( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Float >{ findShader( image, P )
				, expr::makeTextureProj2DF4R32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Float{ findShader( image, P )
			, expr::makeTextureProj2DF4R32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Float > textureProj( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Float >{ findShader( image, P )
				, expr::makeTextureProj2DF4R16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Float{ findShader( image, P )
			, expr::makeTextureProj2DF4R16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureProj( MaybeOptional< SampledImage3DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureProj3DFRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureProj3DFRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureProj( MaybeOptional< SampledImage3DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureProj3DFRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureProj3DFRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureProj( MaybeOptional< SampledImage3DRg32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureProj3DFRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureProj3DFRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > textureProj( MaybeOptional< SampledImage3DRg16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTextureProj3DFRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTextureProj3DFRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Float > textureProj( MaybeOptional< SampledImage3DR32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Float >{ findShader( image, P )
				, expr::makeTextureProj3DFR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Float{ findShader( image, P )
			, expr::makeTextureProj3DFR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Float > textureProj( MaybeOptional< SampledImage3DR16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Float >{ findShader( image, P )
				, expr::makeTextureProj3DFR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Float{ findShader( image, P )
			, expr::makeTextureProj3DFR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureProj( MaybeOptional< ISampledImage1DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureProj1DI2Rgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureProj1DI2Rgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureProj( MaybeOptional< ISampledImage1DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureProj1DI2Rgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureProj1DI2Rgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureProj( MaybeOptional< ISampledImage1DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureProj1DI2Rgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureProj1DI2Rgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > textureProj( MaybeOptional< ISampledImage1DRg32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTextureProj1DI2Rg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTextureProj1DI2Rg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > textureProj( MaybeOptional< ISampledImage1DRg16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTextureProj1DI2Rg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTextureProj1DI2Rg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > textureProj( MaybeOptional< ISampledImage1DRg8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTextureProj1DI2Rg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTextureProj1DI2Rg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > textureProj( MaybeOptional< ISampledImage1DR32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTextureProj1DI2R32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTextureProj1DI2R32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > textureProj( MaybeOptional< ISampledImage1DR16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTextureProj1DI2R16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTextureProj1DI2R16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > textureProj( MaybeOptional< ISampledImage1DR8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTextureProj1DI2R8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTextureProj1DI2R8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureProj( MaybeOptional< ISampledImage1DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureProj1DI4Rgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureProj1DI4Rgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureProj( MaybeOptional< ISampledImage1DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureProj1DI4Rgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureProj1DI4Rgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureProj( MaybeOptional< ISampledImage1DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureProj1DI4Rgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureProj1DI4Rgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > textureProj( MaybeOptional< ISampledImage1DRg32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTextureProj1DI4Rg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTextureProj1DI4Rg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > textureProj( MaybeOptional< ISampledImage1DRg16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTextureProj1DI4Rg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTextureProj1DI4Rg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > textureProj( MaybeOptional< ISampledImage1DRg8 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTextureProj1DI4Rg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTextureProj1DI4Rg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > textureProj( MaybeOptional< ISampledImage1DR32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTextureProj1DI4R32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTextureProj1DI4R32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > textureProj( MaybeOptional< ISampledImage1DR16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTextureProj1DI4R16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTextureProj1DI4R16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > textureProj( MaybeOptional< ISampledImage1DR8 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTextureProj1DI4R8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTextureProj1DI4R8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureProj( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureProj2DI3Rgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureProj2DI3Rgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureProj( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureProj2DI3Rgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureProj2DI3Rgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureProj( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureProj2DI3Rgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureProj2DI3Rgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > textureProj( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTextureProj2DI3Rg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTextureProj2DI3Rg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > textureProj( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTextureProj2DI3Rg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTextureProj2DI3Rg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > textureProj( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTextureProj2DI3Rg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTextureProj2DI3Rg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > textureProj( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTextureProj2DI3R32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTextureProj2DI3R32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > textureProj( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTextureProj2DI3R16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTextureProj2DI3R16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > textureProj( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTextureProj2DI3R8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTextureProj2DI3R8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureProj( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureProj2DI4Rgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureProj2DI4Rgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureProj( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureProj2DI4Rgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureProj2DI4Rgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureProj( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureProj2DI4Rgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureProj2DI4Rgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > textureProj( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTextureProj2DI4Rg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTextureProj2DI4Rg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > textureProj( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTextureProj2DI4Rg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTextureProj2DI4Rg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > textureProj( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTextureProj2DI4Rg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTextureProj2DI4Rg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > textureProj( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTextureProj2DI4R32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTextureProj2DI4R32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > textureProj( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTextureProj2DI4R16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTextureProj2DI4R16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > textureProj( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTextureProj2DI4R8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTextureProj2DI4R8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureProj( MaybeOptional< ISampledImage3DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureProj3DIRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureProj3DIRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureProj( MaybeOptional< ISampledImage3DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureProj3DIRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureProj3DIRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureProj( MaybeOptional< ISampledImage3DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureProj3DIRgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureProj3DIRgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > textureProj( MaybeOptional< ISampledImage3DRg32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTextureProj3DIRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTextureProj3DIRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > textureProj( MaybeOptional< ISampledImage3DRg16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTextureProj3DIRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTextureProj3DIRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > textureProj( MaybeOptional< ISampledImage3DRg8 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTextureProj3DIRg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTextureProj3DIRg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > textureProj( MaybeOptional< ISampledImage3DR32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTextureProj3DIR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTextureProj3DIR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > textureProj( MaybeOptional< ISampledImage3DR16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTextureProj3DIR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTextureProj3DIR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > textureProj( MaybeOptional< ISampledImage3DR8 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTextureProj3DIR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTextureProj3DIR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureProj( MaybeOptional< USampledImage1DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureProj1DU2Rgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureProj1DU2Rgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureProj( MaybeOptional< USampledImage1DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureProj1DU2Rgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureProj1DU2Rgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureProj( MaybeOptional< USampledImage1DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureProj1DU2Rgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureProj1DU2Rgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > textureProj( MaybeOptional< USampledImage1DRg32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTextureProj1DU2Rg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTextureProj1DU2Rg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > textureProj( MaybeOptional< USampledImage1DRg16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTextureProj1DU2Rg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTextureProj1DU2Rg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > textureProj( MaybeOptional< USampledImage1DRg8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTextureProj1DU2Rg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTextureProj1DU2Rg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > textureProj( MaybeOptional< USampledImage1DR32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTextureProj1DU2R32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTextureProj1DU2R32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > textureProj( MaybeOptional< USampledImage1DR16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTextureProj1DU2R16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTextureProj1DU2R16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > textureProj( MaybeOptional< USampledImage1DR8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTextureProj1DU2R8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTextureProj1DU2R8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureProj( MaybeOptional< USampledImage1DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureProj1DU4Rgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureProj1DU4Rgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureProj( MaybeOptional< USampledImage1DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureProj1DU4Rgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureProj1DU4Rgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureProj( MaybeOptional< USampledImage1DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureProj1DU4Rgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureProj1DU4Rgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > textureProj( MaybeOptional< USampledImage1DRg32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTextureProj1DU4Rg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTextureProj1DU4Rg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > textureProj( MaybeOptional< USampledImage1DRg16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTextureProj1DU4Rg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTextureProj1DU4Rg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > textureProj( MaybeOptional< USampledImage1DRg8 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTextureProj1DU4Rg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTextureProj1DU4Rg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > textureProj( MaybeOptional< USampledImage1DR32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTextureProj1DU4R32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTextureProj1DU4R32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > textureProj( MaybeOptional< USampledImage1DR16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTextureProj1DU4R16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTextureProj1DU4R16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > textureProj( MaybeOptional< USampledImage1DR8 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTextureProj1DU4R8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTextureProj1DU4R8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureProj( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureProj2DU3Rgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureProj2DU3Rgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureProj( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureProj2DU3Rgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureProj2DU3Rgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureProj( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureProj2DU3Rgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureProj2DU3Rgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > textureProj( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTextureProj2DU3Rg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTextureProj2DU3Rg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > textureProj( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTextureProj2DU3Rg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTextureProj2DU3Rg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > textureProj( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTextureProj2DU3Rg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTextureProj2DU3Rg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > textureProj( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTextureProj2DU3R32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTextureProj2DU3R32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > textureProj( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTextureProj2DU3R16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTextureProj2DU3R16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > textureProj( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTextureProj2DU3R8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTextureProj2DU3R8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureProj( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureProj2DU4Rgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureProj2DU4Rgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureProj( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureProj2DU4Rgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureProj2DU4Rgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureProj( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureProj2DU4Rgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureProj2DU4Rgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > textureProj( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTextureProj2DU4Rg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTextureProj2DU4Rg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > textureProj( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTextureProj2DU4Rg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTextureProj2DU4Rg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > textureProj( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTextureProj2DU4Rg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTextureProj2DU4Rg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > textureProj( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTextureProj2DU4R32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTextureProj2DU4R32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > textureProj( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTextureProj2DU4R16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTextureProj2DU4R16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > textureProj( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTextureProj2DU4R8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTextureProj2DU4R8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureProj( MaybeOptional< USampledImage3DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureProj3DURgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureProj3DURgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureProj( MaybeOptional< USampledImage3DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureProj3DURgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureProj3DURgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureProj( MaybeOptional< USampledImage3DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureProj3DURgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureProj3DURgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > textureProj( MaybeOptional< USampledImage3DRg32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTextureProj3DURg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTextureProj3DURg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > textureProj( MaybeOptional< USampledImage3DRg16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTextureProj3DURg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTextureProj3DURg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > textureProj( MaybeOptional< USampledImage3DRg8 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTextureProj3DURg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTextureProj3DURg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > textureProj( MaybeOptional< USampledImage3DR32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTextureProj3DUR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTextureProj3DUR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > textureProj( MaybeOptional< USampledImage3DR16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTextureProj3DUR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTextureProj3DUR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > textureProj( MaybeOptional< USampledImage3DR8 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTextureProj3DUR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTextureProj3DUR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Float > textureProj( MaybeOptional< SampledImage1DShadowR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ )
	{
		if ( isAnyOptional( image, P, refZ ) )
		{
			return Optional< Float >{ findShader( image, P, refZ )
				, expr::makeTextureProj1DShadowFR32( findTypesCache( image, P, refZ )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ ) )
				, areOptionalEnabled( image, P, refZ ) };
		}

		return Float{ findShader( image, P, refZ )
			, expr::makeTextureProj1DShadowFR32( findTypesCache( image, P, refZ )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	MaybeOptional< Float > textureProj( MaybeOptional< SampledImage1DShadowR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ )
	{
		if ( isAnyOptional( image, P, refZ ) )
		{
			return Optional< Float >{ findShader( image, P, refZ )
				, expr::makeTextureProj1DShadowFR16( findTypesCache( image, P, refZ )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ ) )
				, areOptionalEnabled( image, P, refZ ) };
		}

		return Float{ findShader( image, P, refZ )
			, expr::makeTextureProj1DShadowFR16( findTypesCache( image, P, refZ )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	MaybeOptional< Float > textureProj( MaybeOptional< SampledImage2DShadowR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ )
	{
		if ( isAnyOptional( image, P, refZ ) )
		{
			return Optional< Float >{ findShader( image, P, refZ )
				, expr::makeTextureProj2DShadowFR32( findTypesCache( image, P, refZ )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ ) )
				, areOptionalEnabled( image, P, refZ ) };
		}

		return Float{ findShader( image, P, refZ )
			, expr::makeTextureProj2DShadowFR32( findTypesCache( image, P, refZ )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	MaybeOptional< Float > textureProj( MaybeOptional< SampledImage2DShadowR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ )
	{
		if ( isAnyOptional( image, P, refZ ) )
		{
			return Optional< Float >{ findShader( image, P, refZ )
				, expr::makeTextureProj2DShadowFR16( findTypesCache( image, P, refZ )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ ) )
				, areOptionalEnabled( image, P, refZ ) };
		}

		return Float{ findShader( image, P, refZ )
			, expr::makeTextureProj2DShadowFR16( findTypesCache( image, P, refZ )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureProjBias
	/**
	*name
	*	textureProjBias
	*/
	/**@{*/
	MaybeOptional< Vec4 > textureProj( MaybeOptional< SampledImage1DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DF2BiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DF2BiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > textureProj( MaybeOptional< SampledImage1DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DF2BiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DF2BiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > textureProj( MaybeOptional< SampledImage1DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DF2BiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DF2BiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > textureProj( MaybeOptional< SampledImage1DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DF2BiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DF2BiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureProj( MaybeOptional< SampledImage1DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Float >{ findShader( image, P, bias )
				, expr::makeTextureProj1DF2BiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Float{ findShader( image, P, bias )
			, expr::makeTextureProj1DF2BiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureProj( MaybeOptional< SampledImage1DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Float >{ findShader( image, P, bias )
				, expr::makeTextureProj1DF2BiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Float{ findShader( image, P, bias )
			, expr::makeTextureProj1DF2BiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > textureProj( MaybeOptional< SampledImage1DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DF4BiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DF4BiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > textureProj( MaybeOptional< SampledImage1DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DF4BiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DF4BiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > textureProj( MaybeOptional< SampledImage1DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DF4BiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DF4BiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > textureProj( MaybeOptional< SampledImage1DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DF4BiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DF4BiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureProj( MaybeOptional< SampledImage1DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Float >{ findShader( image, P, bias )
				, expr::makeTextureProj1DF4BiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Float{ findShader( image, P, bias )
			, expr::makeTextureProj1DF4BiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureProj( MaybeOptional< SampledImage1DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Float >{ findShader( image, P, bias )
				, expr::makeTextureProj1DF4BiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Float{ findShader( image, P, bias )
			, expr::makeTextureProj1DF4BiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > textureProj( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DF3BiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DF3BiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > textureProj( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DF3BiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DF3BiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > textureProj( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DF3BiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DF3BiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > textureProj( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DF3BiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DF3BiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureProj( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Float >{ findShader( image, P, bias )
				, expr::makeTextureProj2DF3BiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Float{ findShader( image, P, bias )
			, expr::makeTextureProj2DF3BiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureProj( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Float >{ findShader( image, P, bias )
				, expr::makeTextureProj2DF3BiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Float{ findShader( image, P, bias )
			, expr::makeTextureProj2DF3BiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > textureProj( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DF4BiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DF4BiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > textureProj( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DF4BiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DF4BiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > textureProj( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DF4BiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DF4BiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > textureProj( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DF4BiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DF4BiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureProj( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Float >{ findShader( image, P, bias )
				, expr::makeTextureProj2DF4BiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Float{ findShader( image, P, bias )
			, expr::makeTextureProj2DF4BiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureProj( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Float >{ findShader( image, P, bias )
				, expr::makeTextureProj2DF4BiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Float{ findShader( image, P, bias )
			, expr::makeTextureProj2DF4BiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > textureProj( MaybeOptional< SampledImage3DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj3DFBiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec4{ findShader( image, P, bias )
			, expr::makeTextureProj3DFBiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > textureProj( MaybeOptional< SampledImage3DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj3DFBiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec4{ findShader( image, P, bias )
			, expr::makeTextureProj3DFBiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > textureProj( MaybeOptional< SampledImage3DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj3DFBiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec2{ findShader( image, P, bias )
			, expr::makeTextureProj3DFBiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > textureProj( MaybeOptional< SampledImage3DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj3DFBiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Vec2{ findShader( image, P, bias )
			, expr::makeTextureProj3DFBiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureProj( MaybeOptional< SampledImage3DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Float >{ findShader( image, P, bias )
				, expr::makeTextureProj3DFBiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Float{ findShader( image, P, bias )
			, expr::makeTextureProj3DFBiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureProj( MaybeOptional< SampledImage3DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Float >{ findShader( image, P, bias )
				, expr::makeTextureProj3DFBiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Float{ findShader( image, P, bias )
			, expr::makeTextureProj3DFBiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureProj( MaybeOptional< ISampledImage1DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DI2BiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DI2BiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureProj( MaybeOptional< ISampledImage1DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DI2BiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DI2BiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureProj( MaybeOptional< ISampledImage1DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DI2BiasRgba8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DI2BiasRgba8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureProj( MaybeOptional< ISampledImage1DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DI2BiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DI2BiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureProj( MaybeOptional< ISampledImage1DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DI2BiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DI2BiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureProj( MaybeOptional< ISampledImage1DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DI2BiasRg8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DI2BiasRg8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureProj( MaybeOptional< ISampledImage1DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTextureProj1DI2BiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTextureProj1DI2BiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureProj( MaybeOptional< ISampledImage1DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTextureProj1DI2BiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTextureProj1DI2BiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureProj( MaybeOptional< ISampledImage1DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTextureProj1DI2BiasR8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTextureProj1DI2BiasR8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureProj( MaybeOptional< ISampledImage1DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DI4BiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DI4BiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureProj( MaybeOptional< ISampledImage1DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DI4BiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DI4BiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureProj( MaybeOptional< ISampledImage1DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DI4BiasRgba8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DI4BiasRgba8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureProj( MaybeOptional< ISampledImage1DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DI4BiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DI4BiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureProj( MaybeOptional< ISampledImage1DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DI4BiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DI4BiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureProj( MaybeOptional< ISampledImage1DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DI4BiasRg8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DI4BiasRg8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureProj( MaybeOptional< ISampledImage1DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTextureProj1DI4BiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTextureProj1DI4BiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureProj( MaybeOptional< ISampledImage1DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTextureProj1DI4BiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTextureProj1DI4BiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureProj( MaybeOptional< ISampledImage1DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTextureProj1DI4BiasR8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTextureProj1DI4BiasR8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureProj( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DI3BiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DI3BiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureProj( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DI3BiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DI3BiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureProj( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DI3BiasRgba8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DI3BiasRgba8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureProj( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DI3BiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DI3BiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureProj( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DI3BiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DI3BiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureProj( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DI3BiasRg8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DI3BiasRg8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureProj( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTextureProj2DI3BiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTextureProj2DI3BiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureProj( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTextureProj2DI3BiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTextureProj2DI3BiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureProj( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTextureProj2DI3BiasR8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTextureProj2DI3BiasR8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureProj( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DI4BiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DI4BiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureProj( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DI4BiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DI4BiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureProj( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DI4BiasRgba8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DI4BiasRgba8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureProj( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DI4BiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DI4BiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureProj( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DI4BiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DI4BiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureProj( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DI4BiasRg8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DI4BiasRg8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureProj( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTextureProj2DI4BiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTextureProj2DI4BiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureProj( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTextureProj2DI4BiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTextureProj2DI4BiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureProj( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTextureProj2DI4BiasR8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTextureProj2DI4BiasR8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureProj( MaybeOptional< ISampledImage3DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj3DIBiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureProj3DIBiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureProj( MaybeOptional< ISampledImage3DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj3DIBiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureProj3DIBiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureProj( MaybeOptional< ISampledImage3DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj3DIBiasRgba8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec4{ findShader( image, P, bias )
			, expr::makeTextureProj3DIBiasRgba8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureProj( MaybeOptional< ISampledImage3DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj3DIBiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureProj3DIBiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureProj( MaybeOptional< ISampledImage3DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj3DIBiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureProj3DIBiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureProj( MaybeOptional< ISampledImage3DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj3DIBiasRg8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return IVec2{ findShader( image, P, bias )
			, expr::makeTextureProj3DIBiasRg8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureProj( MaybeOptional< ISampledImage3DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTextureProj3DIBiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTextureProj3DIBiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureProj( MaybeOptional< ISampledImage3DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTextureProj3DIBiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTextureProj3DIBiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureProj( MaybeOptional< ISampledImage3DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< Int >{ findShader( image, P, bias )
				, expr::makeTextureProj3DIBiasR8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return Int{ findShader( image, P, bias )
			, expr::makeTextureProj3DIBiasR8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureProj( MaybeOptional< USampledImage1DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DU2BiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DU2BiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureProj( MaybeOptional< USampledImage1DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DU2BiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DU2BiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureProj( MaybeOptional< USampledImage1DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DU2BiasRgba8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DU2BiasRgba8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureProj( MaybeOptional< USampledImage1DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DU2BiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DU2BiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureProj( MaybeOptional< USampledImage1DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DU2BiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DU2BiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureProj( MaybeOptional< USampledImage1DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DU2BiasRg8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DU2BiasRg8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureProj( MaybeOptional< USampledImage1DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTextureProj1DU2BiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTextureProj1DU2BiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureProj( MaybeOptional< USampledImage1DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTextureProj1DU2BiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTextureProj1DU2BiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureProj( MaybeOptional< USampledImage1DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTextureProj1DU2BiasR8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTextureProj1DU2BiasR8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureProj( MaybeOptional< USampledImage1DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DU4BiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DU4BiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureProj( MaybeOptional< USampledImage1DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DU4BiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DU4BiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureProj( MaybeOptional< USampledImage1DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DU4BiasRgba8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureProj1DU4BiasRgba8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureProj( MaybeOptional< USampledImage1DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DU4BiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DU4BiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureProj( MaybeOptional< USampledImage1DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DU4BiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DU4BiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureProj( MaybeOptional< USampledImage1DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj1DU4BiasRg8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureProj1DU4BiasRg8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureProj( MaybeOptional< USampledImage1DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTextureProj1DU4BiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTextureProj1DU4BiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureProj( MaybeOptional< USampledImage1DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTextureProj1DU4BiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTextureProj1DU4BiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureProj( MaybeOptional< USampledImage1DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTextureProj1DU4BiasR8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTextureProj1DU4BiasR8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureProj( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DU3BiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DU3BiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureProj( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DU3BiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DU3BiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureProj( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DU3BiasRgba8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DU3BiasRgba8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureProj( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DU3BiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DU3BiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureProj( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DU3BiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DU3BiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureProj( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DU3BiasRg8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DU3BiasRg8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureProj( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTextureProj2DU3BiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTextureProj2DU3BiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureProj( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTextureProj2DU3BiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTextureProj2DU3BiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureProj( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTextureProj2DU3BiasR8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTextureProj2DU3BiasR8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureProj( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DU4BiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DU4BiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureProj( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DU4BiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DU4BiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureProj( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DU4BiasRgba8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureProj2DU4BiasRgba8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureProj( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DU4BiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DU4BiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureProj( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DU4BiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DU4BiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureProj( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj2DU4BiasRg8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureProj2DU4BiasRg8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureProj( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTextureProj2DU4BiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTextureProj2DU4BiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureProj( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTextureProj2DU4BiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTextureProj2DU4BiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureProj( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTextureProj2DU4BiasR8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTextureProj2DU4BiasR8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureProj( MaybeOptional< USampledImage3DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj3DUBiasRgba32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureProj3DUBiasRgba32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureProj( MaybeOptional< USampledImage3DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj3DUBiasRgba16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureProj3DUBiasRgba16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureProj( MaybeOptional< USampledImage3DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, bias )
				, expr::makeTextureProj3DUBiasRgba8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec4{ findShader( image, P, bias )
			, expr::makeTextureProj3DUBiasRgba8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureProj( MaybeOptional< USampledImage3DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj3DUBiasRg32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureProj3DUBiasRg32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureProj( MaybeOptional< USampledImage3DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj3DUBiasRg16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureProj3DUBiasRg16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureProj( MaybeOptional< USampledImage3DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, bias )
				, expr::makeTextureProj3DUBiasRg8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UVec2{ findShader( image, P, bias )
			, expr::makeTextureProj3DUBiasRg8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureProj( MaybeOptional< USampledImage3DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTextureProj3DUBiasR32( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTextureProj3DUBiasR32( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureProj( MaybeOptional< USampledImage3DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTextureProj3DUBiasR16( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTextureProj3DUBiasR16( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureProj( MaybeOptional< USampledImage3DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, bias )
				, expr::makeTextureProj3DUBiasR8( findTypesCache( image, P, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, bias ) };
		}

		return UInt{ findShader( image, P, bias )
			, expr::makeTextureProj3DUBiasR8( findTypesCache( image, P, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureProj( MaybeOptional< SampledImage1DShadowR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, refZ, bias ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, bias )
				, expr::makeTextureProj1DShadowFBiasR32( findTypesCache( image, P, refZ, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, refZ, bias ) };
		}

		return Float{ findShader( image, P, refZ, bias )
			, expr::makeTextureProj1DShadowFBiasR32( findTypesCache( image, P, refZ, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureProj( MaybeOptional< SampledImage1DShadowR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, refZ, bias ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, bias )
				, expr::makeTextureProj1DShadowFBiasR16( findTypesCache( image, P, refZ, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, refZ, bias ) };
		}

		return Float{ findShader( image, P, refZ, bias )
			, expr::makeTextureProj1DShadowFBiasR16( findTypesCache( image, P, refZ, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureProj( MaybeOptional< SampledImage2DShadowR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, refZ, bias ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, bias )
				, expr::makeTextureProj2DShadowFBiasR32( findTypesCache( image, P, refZ, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, refZ, bias ) };
		}

		return Float{ findShader( image, P, refZ, bias )
			, expr::makeTextureProj2DShadowFBiasR32( findTypesCache( image, P, refZ, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureProj( MaybeOptional< SampledImage2DShadowR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, refZ, bias ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, bias )
				, expr::makeTextureProj2DShadowFBiasR16( findTypesCache( image, P, refZ, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, refZ, bias ) };
		}

		return Float{ findShader( image, P, refZ, bias )
			, expr::makeTextureProj2DShadowFBiasR16( findTypesCache( image, P, refZ, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( bias ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureLod
	/**
	*name
	*	textureLod
	*/
	/**@{*/
	MaybeOptional< Vec4 > textureLod( MaybeOptional< SampledImage1DRgba32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DFRgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DFRgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > textureLod( MaybeOptional< SampledImage1DRgba16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DFRgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DFRgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > textureLod( MaybeOptional< SampledImage1DRg32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DFRg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DFRg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > textureLod( MaybeOptional< SampledImage1DRg16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DFRg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DFRg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureLod( MaybeOptional< SampledImage1DR32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTextureLod1DFR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTextureLod1DFR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureLod( MaybeOptional< SampledImage1DR16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTextureLod1DFR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTextureLod1DFR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > textureLod( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DFRgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DFRgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > textureLod( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DFRgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DFRgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > textureLod( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DFRg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DFRg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > textureLod( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DFRg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DFRg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureLod( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTextureLod2DFR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTextureLod2DFR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureLod( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTextureLod2DFR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTextureLod2DFR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > textureLod( MaybeOptional< SampledImage3DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod3DFRgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureLod3DFRgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > textureLod( MaybeOptional< SampledImage3DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod3DFRgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureLod3DFRgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > textureLod( MaybeOptional< SampledImage3DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod3DFRg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureLod3DFRg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > textureLod( MaybeOptional< SampledImage3DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod3DFRg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureLod3DFRg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureLod( MaybeOptional< SampledImage3DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTextureLod3DFR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTextureLod3DFR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureLod( MaybeOptional< SampledImage3DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTextureLod3DFR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTextureLod3DFR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > textureLod( MaybeOptional< SampledImageCubeRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeFRgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeFRgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > textureLod( MaybeOptional< SampledImageCubeRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeFRgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeFRgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > textureLod( MaybeOptional< SampledImageCubeRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeFRg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeFRg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > textureLod( MaybeOptional< SampledImageCubeRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeFRg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeFRg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureLod( MaybeOptional< SampledImageCubeR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeFR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTextureLodCubeFR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureLod( MaybeOptional< SampledImageCubeR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeFR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTextureLodCubeFR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > textureLod( MaybeOptional< SampledImage1DArrayRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DArrayFRgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayFRgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > textureLod( MaybeOptional< SampledImage1DArrayRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DArrayFRgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayFRgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > textureLod( MaybeOptional< SampledImage1DArrayRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DArrayFRg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayFRg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > textureLod( MaybeOptional< SampledImage1DArrayRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DArrayFRg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayFRg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureLod( MaybeOptional< SampledImage1DArrayR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTextureLod1DArrayFR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayFR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureLod( MaybeOptional< SampledImage1DArrayR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTextureLod1DArrayFR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayFR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > textureLod( MaybeOptional< SampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DArrayFRgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayFRgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > textureLod( MaybeOptional< SampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DArrayFRgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayFRgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > textureLod( MaybeOptional< SampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DArrayFRg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayFRg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > textureLod( MaybeOptional< SampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DArrayFRg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayFRg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureLod( MaybeOptional< SampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTextureLod2DArrayFR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayFR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureLod( MaybeOptional< SampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTextureLod2DArrayFR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayFR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > textureLod( MaybeOptional< SampledImageCubeArrayRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeArrayFRgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayFRgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > textureLod( MaybeOptional< SampledImageCubeArrayRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeArrayFRgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayFRgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > textureLod( MaybeOptional< SampledImageCubeArrayRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeArrayFRg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayFRg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > textureLod( MaybeOptional< SampledImageCubeArrayRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeArrayFRg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayFRg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureLod( MaybeOptional< SampledImageCubeArrayR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeArrayFR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayFR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureLod( MaybeOptional< SampledImageCubeArrayR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeArrayFR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayFR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureLod( MaybeOptional< ISampledImage1DRgba32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DIRgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DIRgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureLod( MaybeOptional< ISampledImage1DRgba16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DIRgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DIRgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureLod( MaybeOptional< ISampledImage1DRgba8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DIRgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DIRgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureLod( MaybeOptional< ISampledImage1DRg32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DIRg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DIRg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureLod( MaybeOptional< ISampledImage1DRg16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DIRg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DIRg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureLod( MaybeOptional< ISampledImage1DRg8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DIRg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DIRg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureLod( MaybeOptional< ISampledImage1DR32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureLod1DIR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureLod1DIR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureLod( MaybeOptional< ISampledImage1DR16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureLod1DIR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureLod1DIR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureLod( MaybeOptional< ISampledImage1DR8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureLod1DIR8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureLod1DIR8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureLod( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DIRgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DIRgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureLod( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DIRgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DIRgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureLod( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DIRgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DIRgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureLod( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DIRg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DIRg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureLod( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DIRg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DIRg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureLod( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DIRg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DIRg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureLod( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureLod2DIR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureLod2DIR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureLod( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureLod2DIR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureLod2DIR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureLod( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureLod2DIR8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureLod2DIR8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureLod( MaybeOptional< ISampledImage3DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod3DIRgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLod3DIRgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureLod( MaybeOptional< ISampledImage3DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod3DIRgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLod3DIRgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureLod( MaybeOptional< ISampledImage3DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod3DIRgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLod3DIRgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureLod( MaybeOptional< ISampledImage3DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod3DIRg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLod3DIRg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureLod( MaybeOptional< ISampledImage3DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod3DIRg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLod3DIRg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureLod( MaybeOptional< ISampledImage3DRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod3DIRg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLod3DIRg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureLod( MaybeOptional< ISampledImage3DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureLod3DIR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureLod3DIR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureLod( MaybeOptional< ISampledImage3DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureLod3DIR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureLod3DIR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureLod( MaybeOptional< ISampledImage3DR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureLod3DIR8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureLod3DIR8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureLod( MaybeOptional< ISampledImageCubeRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeIRgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeIRgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureLod( MaybeOptional< ISampledImageCubeRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeIRgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeIRgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureLod( MaybeOptional< ISampledImageCubeRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeIRgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeIRgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureLod( MaybeOptional< ISampledImageCubeRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeIRg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeIRg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureLod( MaybeOptional< ISampledImageCubeRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeIRg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeIRg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureLod( MaybeOptional< ISampledImageCubeRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeIRg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeIRg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureLod( MaybeOptional< ISampledImageCubeR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeIR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureLodCubeIR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureLod( MaybeOptional< ISampledImageCubeR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeIR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureLodCubeIR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureLod( MaybeOptional< ISampledImageCubeR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeIR8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureLodCubeIR8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureLod( MaybeOptional< ISampledImage1DArrayRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DArrayIRgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayIRgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureLod( MaybeOptional< ISampledImage1DArrayRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DArrayIRgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayIRgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureLod( MaybeOptional< ISampledImage1DArrayRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DArrayIRgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayIRgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureLod( MaybeOptional< ISampledImage1DArrayRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DArrayIRg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayIRg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureLod( MaybeOptional< ISampledImage1DArrayRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DArrayIRg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayIRg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureLod( MaybeOptional< ISampledImage1DArrayRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DArrayIRg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayIRg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureLod( MaybeOptional< ISampledImage1DArrayR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureLod1DArrayIR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayIR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureLod( MaybeOptional< ISampledImage1DArrayR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureLod1DArrayIR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayIR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureLod( MaybeOptional< ISampledImage1DArrayR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureLod1DArrayIR8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayIR8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureLod( MaybeOptional< ISampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DArrayIRgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayIRgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureLod( MaybeOptional< ISampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DArrayIRgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayIRgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureLod( MaybeOptional< ISampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DArrayIRgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayIRgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureLod( MaybeOptional< ISampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DArrayIRg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayIRg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureLod( MaybeOptional< ISampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DArrayIRg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayIRg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureLod( MaybeOptional< ISampledImage2DArrayRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DArrayIRg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayIRg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureLod( MaybeOptional< ISampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureLod2DArrayIR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayIR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureLod( MaybeOptional< ISampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureLod2DArrayIR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayIR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureLod( MaybeOptional< ISampledImage2DArrayR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureLod2DArrayIR8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayIR8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureLod( MaybeOptional< ISampledImageCubeArrayRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeArrayIRgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayIRgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureLod( MaybeOptional< ISampledImageCubeArrayRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeArrayIRgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayIRgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureLod( MaybeOptional< ISampledImageCubeArrayRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeArrayIRgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayIRgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureLod( MaybeOptional< ISampledImageCubeArrayRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeArrayIRg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayIRg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureLod( MaybeOptional< ISampledImageCubeArrayRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeArrayIRg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayIRg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureLod( MaybeOptional< ISampledImageCubeArrayRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeArrayIRg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayIRg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureLod( MaybeOptional< ISampledImageCubeArrayR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeArrayIR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayIR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureLod( MaybeOptional< ISampledImageCubeArrayR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeArrayIR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayIR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureLod( MaybeOptional< ISampledImageCubeArrayR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeArrayIR8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayIR8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureLod( MaybeOptional< USampledImage1DRgba32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DURgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DURgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureLod( MaybeOptional< USampledImage1DRgba16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DURgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DURgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureLod( MaybeOptional< USampledImage1DRgba8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DURgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DURgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureLod( MaybeOptional< USampledImage1DRg32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DURg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DURg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureLod( MaybeOptional< USampledImage1DRg16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DURg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DURg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureLod( MaybeOptional< USampledImage1DRg8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DURg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DURg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureLod( MaybeOptional< USampledImage1DR32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureLod1DUR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLod1DUR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureLod( MaybeOptional< USampledImage1DR16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureLod1DUR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLod1DUR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureLod( MaybeOptional< USampledImage1DR8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureLod1DUR8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLod1DUR8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureLod( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DURgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DURgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureLod( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DURgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DURgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureLod( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DURgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DURgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureLod( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DURg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DURg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureLod( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DURg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DURg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureLod( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DURg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DURg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureLod( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureLod2DUR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLod2DUR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureLod( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureLod2DUR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLod2DUR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureLod( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureLod2DUR8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLod2DUR8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureLod( MaybeOptional< USampledImage3DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod3DURgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLod3DURgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureLod( MaybeOptional< USampledImage3DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod3DURgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLod3DURgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureLod( MaybeOptional< USampledImage3DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod3DURgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLod3DURgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureLod( MaybeOptional< USampledImage3DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod3DURg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLod3DURg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureLod( MaybeOptional< USampledImage3DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod3DURg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLod3DURg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureLod( MaybeOptional< USampledImage3DRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod3DURg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLod3DURg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureLod( MaybeOptional< USampledImage3DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureLod3DUR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLod3DUR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureLod( MaybeOptional< USampledImage3DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureLod3DUR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLod3DUR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureLod( MaybeOptional< USampledImage3DR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureLod3DUR8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLod3DUR8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureLod( MaybeOptional< USampledImageCubeRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeURgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeURgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureLod( MaybeOptional< USampledImageCubeRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeURgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeURgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureLod( MaybeOptional< USampledImageCubeRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeURgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeURgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureLod( MaybeOptional< USampledImageCubeRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeURg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeURg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureLod( MaybeOptional< USampledImageCubeRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeURg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeURg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureLod( MaybeOptional< USampledImageCubeRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeURg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeURg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureLod( MaybeOptional< USampledImageCubeR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeUR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLodCubeUR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureLod( MaybeOptional< USampledImageCubeR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeUR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLodCubeUR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureLod( MaybeOptional< USampledImageCubeR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeUR8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLodCubeUR8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureLod( MaybeOptional< USampledImage1DArrayRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DArrayURgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayURgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureLod( MaybeOptional< USampledImage1DArrayRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DArrayURgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayURgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureLod( MaybeOptional< USampledImage1DArrayRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DArrayURgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayURgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureLod( MaybeOptional< USampledImage1DArrayRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DArrayURg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayURg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureLod( MaybeOptional< USampledImage1DArrayRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DArrayURg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayURg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureLod( MaybeOptional< USampledImage1DArrayRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod1DArrayURg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayURg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureLod( MaybeOptional< USampledImage1DArrayR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureLod1DArrayUR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayUR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureLod( MaybeOptional< USampledImage1DArrayR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureLod1DArrayUR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayUR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureLod( MaybeOptional< USampledImage1DArrayR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureLod1DArrayUR8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLod1DArrayUR8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureLod( MaybeOptional< USampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DArrayURgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayURgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureLod( MaybeOptional< USampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DArrayURgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayURgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureLod( MaybeOptional< USampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DArrayURgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayURgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureLod( MaybeOptional< USampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DArrayURg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayURg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureLod( MaybeOptional< USampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DArrayURg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayURg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureLod( MaybeOptional< USampledImage2DArrayRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLod2DArrayURg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayURg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureLod( MaybeOptional< USampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureLod2DArrayUR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayUR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureLod( MaybeOptional< USampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureLod2DArrayUR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayUR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureLod( MaybeOptional< USampledImage2DArrayR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureLod2DArrayUR8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLod2DArrayUR8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureLod( MaybeOptional< USampledImageCubeArrayRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeArrayURgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayURgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureLod( MaybeOptional< USampledImageCubeArrayRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeArrayURgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayURgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureLod( MaybeOptional< USampledImageCubeArrayRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeArrayURgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayURgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureLod( MaybeOptional< USampledImageCubeArrayRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeArrayURg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayURg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureLod( MaybeOptional< USampledImageCubeArrayRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeArrayURg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayURg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureLod( MaybeOptional< USampledImageCubeArrayRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeArrayURg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayURg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureLod( MaybeOptional< USampledImageCubeArrayR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeArrayUR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayUR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureLod( MaybeOptional< USampledImageCubeArrayR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeArrayUR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayUR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureLod( MaybeOptional< USampledImageCubeArrayR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureLodCubeArrayUR8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureLodCubeArrayUR8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureLod( MaybeOptional< SampledImage1DShadowR32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, refZ, lod ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, lod )
				, expr::makeTextureLod1DShadowFR32( findTypesCache( image, P, refZ, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, refZ, lod ) };
		}

		return Float{ findShader( image, P, refZ, lod )
			, expr::makeTextureLod1DShadowFR32( findTypesCache( image, P, refZ, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureLod( MaybeOptional< SampledImage1DShadowR16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, refZ, lod ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, lod )
				, expr::makeTextureLod1DShadowFR16( findTypesCache( image, P, refZ, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, refZ, lod ) };
		}

		return Float{ findShader( image, P, refZ, lod )
			, expr::makeTextureLod1DShadowFR16( findTypesCache( image, P, refZ, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureLod( MaybeOptional< SampledImage2DShadowR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, refZ, lod ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, lod )
				, expr::makeTextureLod2DShadowFR32( findTypesCache( image, P, refZ, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, refZ, lod ) };
		}

		return Float{ findShader( image, P, refZ, lod )
			, expr::makeTextureLod2DShadowFR32( findTypesCache( image, P, refZ, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureLod( MaybeOptional< SampledImage2DShadowR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, refZ, lod ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, lod )
				, expr::makeTextureLod2DShadowFR16( findTypesCache( image, P, refZ, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, refZ, lod ) };
		}

		return Float{ findShader( image, P, refZ, lod )
			, expr::makeTextureLod2DShadowFR16( findTypesCache( image, P, refZ, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureLod( MaybeOptional< SampledImage1DArrayShadowR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, refZ, lod ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, lod )
				, expr::makeTextureLod1DArrayShadowFR32( findTypesCache( image, P, refZ, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, refZ, lod ) };
		}

		return Float{ findShader( image, P, refZ, lod )
			, expr::makeTextureLod1DArrayShadowFR32( findTypesCache( image, P, refZ, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureLod( MaybeOptional< SampledImage1DArrayShadowR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, refZ, lod ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, lod )
				, expr::makeTextureLod1DArrayShadowFR16( findTypesCache( image, P, refZ, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, refZ, lod ) };
		}

		return Float{ findShader( image, P, refZ, lod )
			, expr::makeTextureLod1DArrayShadowFR16( findTypesCache( image, P, refZ, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureOffset
	/**
	*name
	*	textureOffset
	*/
	/**@{*/
	MaybeOptional< Vec4 > textureOffset( MaybeOptional< SampledImage1DRgba32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DFRgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DFRgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureOffset( MaybeOptional< SampledImage1DRgba16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DFRgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DFRgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureOffset( MaybeOptional< SampledImage1DRg32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DFRg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DFRg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureOffset( MaybeOptional< SampledImage1DRg16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DFRg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DFRg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage1DR32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Float >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DFR32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Float{ findShader( image, P, offset )
			, expr::makeTextureOffset1DFR32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage1DR16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Float >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DFR16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Float{ findShader( image, P, offset )
			, expr::makeTextureOffset1DFR16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureOffset( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DFRgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DFRgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureOffset( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DFRgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DFRgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureOffset( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DFRg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DFRg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureOffset( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DFRg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DFRg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Float >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DFR32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Float{ findShader( image, P, offset )
			, expr::makeTextureOffset2DFR32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Float >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DFR16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Float{ findShader( image, P, offset )
			, expr::makeTextureOffset2DFR16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureOffset( MaybeOptional< SampledImage3DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset3DFRgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureOffset3DFRgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureOffset( MaybeOptional< SampledImage3DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset3DFRgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureOffset3DFRgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureOffset( MaybeOptional< SampledImage3DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset3DFRg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureOffset3DFRg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureOffset( MaybeOptional< SampledImage3DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset3DFRg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureOffset3DFRg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage3DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Float >{ findShader( image, P, offset )
				, expr::makeTextureOffset3DFR32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Float{ findShader( image, P, offset )
			, expr::makeTextureOffset3DFR32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage3DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Float >{ findShader( image, P, offset )
				, expr::makeTextureOffset3DFR16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Float{ findShader( image, P, offset )
			, expr::makeTextureOffset3DFR16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureOffset( MaybeOptional< SampledImage1DArrayRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DArrayFRgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayFRgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureOffset( MaybeOptional< SampledImage1DArrayRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DArrayFRgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayFRgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureOffset( MaybeOptional< SampledImage1DArrayRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DArrayFRg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayFRg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureOffset( MaybeOptional< SampledImage1DArrayRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DArrayFRg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayFRg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage1DArrayR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Float >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DArrayFR32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Float{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayFR32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage1DArrayR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Float >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DArrayFR16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Float{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayFR16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureOffset( MaybeOptional< SampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DArrayFRgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayFRgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureOffset( MaybeOptional< SampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DArrayFRgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayFRgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureOffset( MaybeOptional< SampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DArrayFRg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayFRg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureOffset( MaybeOptional< SampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DArrayFRg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayFRg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Float >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DArrayFR32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Float{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayFR32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Float >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DArrayFR16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Float{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayFR16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureOffset( MaybeOptional< ISampledImage1DRgba32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DIRgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DIRgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureOffset( MaybeOptional< ISampledImage1DRgba16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DIRgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DIRgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureOffset( MaybeOptional< ISampledImage1DRgba8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DIRgba8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DIRgba8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureOffset( MaybeOptional< ISampledImage1DRg32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DIRg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DIRg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureOffset( MaybeOptional< ISampledImage1DRg16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DIRg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DIRg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureOffset( MaybeOptional< ISampledImage1DRg8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DIRg8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DIRg8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureOffset( MaybeOptional< ISampledImage1DR32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Int >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DIR32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset1DIR32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureOffset( MaybeOptional< ISampledImage1DR16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Int >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DIR16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset1DIR16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureOffset( MaybeOptional< ISampledImage1DR8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Int >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DIR8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset1DIR8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureOffset( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DIRgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DIRgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureOffset( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DIRgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DIRgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureOffset( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DIRgba8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DIRgba8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureOffset( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DIRg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DIRg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureOffset( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DIRg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DIRg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureOffset( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DIRg8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DIRg8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureOffset( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Int >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DIR32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset2DIR32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureOffset( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Int >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DIR16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset2DIR16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureOffset( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Int >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DIR8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset2DIR8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureOffset( MaybeOptional< ISampledImage3DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset3DIRgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset3DIRgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureOffset( MaybeOptional< ISampledImage3DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset3DIRgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset3DIRgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureOffset( MaybeOptional< ISampledImage3DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset3DIRgba8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset3DIRgba8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureOffset( MaybeOptional< ISampledImage3DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset3DIRg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset3DIRg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureOffset( MaybeOptional< ISampledImage3DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset3DIRg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset3DIRg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureOffset( MaybeOptional< ISampledImage3DRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset3DIRg8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset3DIRg8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureOffset( MaybeOptional< ISampledImage3DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Int >{ findShader( image, P, offset )
				, expr::makeTextureOffset3DIR32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset3DIR32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureOffset( MaybeOptional< ISampledImage3DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Int >{ findShader( image, P, offset )
				, expr::makeTextureOffset3DIR16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset3DIR16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureOffset( MaybeOptional< ISampledImage3DR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Int >{ findShader( image, P, offset )
				, expr::makeTextureOffset3DIR8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset3DIR8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureOffset( MaybeOptional< ISampledImage1DArrayRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DArrayIRgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayIRgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureOffset( MaybeOptional< ISampledImage1DArrayRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DArrayIRgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayIRgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureOffset( MaybeOptional< ISampledImage1DArrayRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DArrayIRgba8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayIRgba8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureOffset( MaybeOptional< ISampledImage1DArrayRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DArrayIRg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayIRg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureOffset( MaybeOptional< ISampledImage1DArrayRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DArrayIRg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayIRg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureOffset( MaybeOptional< ISampledImage1DArrayRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DArrayIRg8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayIRg8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureOffset( MaybeOptional< ISampledImage1DArrayR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Int >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DArrayIR32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayIR32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureOffset( MaybeOptional< ISampledImage1DArrayR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Int >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DArrayIR16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayIR16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureOffset( MaybeOptional< ISampledImage1DArrayR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Int >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DArrayIR8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayIR8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureOffset( MaybeOptional< ISampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DArrayIRgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayIRgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureOffset( MaybeOptional< ISampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DArrayIRgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayIRgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureOffset( MaybeOptional< ISampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DArrayIRgba8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayIRgba8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureOffset( MaybeOptional< ISampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DArrayIRg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayIRg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureOffset( MaybeOptional< ISampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DArrayIRg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayIRg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureOffset( MaybeOptional< ISampledImage2DArrayRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DArrayIRg8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayIRg8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureOffset( MaybeOptional< ISampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Int >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DArrayIR32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayIR32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureOffset( MaybeOptional< ISampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Int >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DArrayIR16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayIR16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureOffset( MaybeOptional< ISampledImage2DArrayR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Int >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DArrayIR8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Int{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayIR8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureOffset( MaybeOptional< USampledImage1DRgba32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DURgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DURgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureOffset( MaybeOptional< USampledImage1DRgba16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DURgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DURgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureOffset( MaybeOptional< USampledImage1DRgba8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DURgba8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DURgba8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureOffset( MaybeOptional< USampledImage1DRg32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DURg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DURg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureOffset( MaybeOptional< USampledImage1DRg16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DURg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DURg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureOffset( MaybeOptional< USampledImage1DRg8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DURg8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DURg8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureOffset( MaybeOptional< USampledImage1DR32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DUR32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset1DUR32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureOffset( MaybeOptional< USampledImage1DR16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DUR16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset1DUR16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureOffset( MaybeOptional< USampledImage1DR8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DUR8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset1DUR8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureOffset( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DURgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DURgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureOffset( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DURgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DURgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureOffset( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DURgba8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DURgba8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureOffset( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DURg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DURg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureOffset( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DURg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DURg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureOffset( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DURg8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DURg8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureOffset( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DUR32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset2DUR32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureOffset( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DUR16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset2DUR16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureOffset( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DUR8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset2DUR8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureOffset( MaybeOptional< USampledImage3DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset3DURgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset3DURgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureOffset( MaybeOptional< USampledImage3DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset3DURgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset3DURgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureOffset( MaybeOptional< USampledImage3DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset3DURgba8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset3DURgba8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureOffset( MaybeOptional< USampledImage3DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset3DURg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset3DURg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureOffset( MaybeOptional< USampledImage3DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset3DURg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset3DURg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureOffset( MaybeOptional< USampledImage3DRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset3DURg8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset3DURg8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureOffset( MaybeOptional< USampledImage3DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, offset )
				, expr::makeTextureOffset3DUR32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset3DUR32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureOffset( MaybeOptional< USampledImage3DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, offset )
				, expr::makeTextureOffset3DUR16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset3DUR16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureOffset( MaybeOptional< USampledImage3DR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, offset )
				, expr::makeTextureOffset3DUR8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset3DUR8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureOffset( MaybeOptional< USampledImage1DArrayRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DArrayURgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayURgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureOffset( MaybeOptional< USampledImage1DArrayRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DArrayURgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayURgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureOffset( MaybeOptional< USampledImage1DArrayRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DArrayURgba8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayURgba8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureOffset( MaybeOptional< USampledImage1DArrayRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DArrayURg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayURg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureOffset( MaybeOptional< USampledImage1DArrayRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DArrayURg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayURg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureOffset( MaybeOptional< USampledImage1DArrayRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DArrayURg8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayURg8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureOffset( MaybeOptional< USampledImage1DArrayR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DArrayUR32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayUR32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureOffset( MaybeOptional< USampledImage1DArrayR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DArrayUR16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayUR16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureOffset( MaybeOptional< USampledImage1DArrayR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, offset )
				, expr::makeTextureOffset1DArrayUR8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset1DArrayUR8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureOffset( MaybeOptional< USampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DArrayURgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayURgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureOffset( MaybeOptional< USampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DArrayURgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayURgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureOffset( MaybeOptional< USampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DArrayURgba8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayURgba8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureOffset( MaybeOptional< USampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DArrayURg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayURg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureOffset( MaybeOptional< USampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DArrayURg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayURg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureOffset( MaybeOptional< USampledImage2DArrayRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DArrayURg8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayURg8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureOffset( MaybeOptional< USampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DArrayUR32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayUR32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureOffset( MaybeOptional< USampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DArrayUR16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayUR16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureOffset( MaybeOptional< USampledImage2DArrayR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, offset )
				, expr::makeTextureOffset2DArrayUR8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UInt{ findShader( image, P, offset )
			, expr::makeTextureOffset2DArrayUR8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage1DShadowR32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, offset )
				, expr::makeTextureOffset1DShadowFR32( findTypesCache( image, P, refZ, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, offset ) };
		}

		return Float{ findShader( image, P, refZ, offset )
			, expr::makeTextureOffset1DShadowFR32( findTypesCache( image, P, refZ, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage1DShadowR16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, offset )
				, expr::makeTextureOffset1DShadowFR16( findTypesCache( image, P, refZ, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, offset ) };
		}

		return Float{ findShader( image, P, refZ, offset )
			, expr::makeTextureOffset1DShadowFR16( findTypesCache( image, P, refZ, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage2DShadowR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, offset )
				, expr::makeTextureOffset2DShadowFR32( findTypesCache( image, P, refZ, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, offset ) };
		}

		return Float{ findShader( image, P, refZ, offset )
			, expr::makeTextureOffset2DShadowFR32( findTypesCache( image, P, refZ, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage2DShadowR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, offset )
				, expr::makeTextureOffset2DShadowFR16( findTypesCache( image, P, refZ, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, offset ) };
		}

		return Float{ findShader( image, P, refZ, offset )
			, expr::makeTextureOffset2DShadowFR16( findTypesCache( image, P, refZ, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage1DArrayShadowR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, offset )
				, expr::makeTextureOffset1DArrayShadowFR32( findTypesCache( image, P, refZ, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, offset ) };
		}

		return Float{ findShader( image, P, refZ, offset )
			, expr::makeTextureOffset1DArrayShadowFR32( findTypesCache( image, P, refZ, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage1DArrayShadowR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, offset )
				, expr::makeTextureOffset1DArrayShadowFR16( findTypesCache( image, P, refZ, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, offset ) };
		}

		return Float{ findShader( image, P, refZ, offset )
			, expr::makeTextureOffset1DArrayShadowFR16( findTypesCache( image, P, refZ, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage2DArrayShadowR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, offset )
				, expr::makeTextureOffset2DArrayShadowFR32( findTypesCache( image, P, refZ, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, offset ) };
		}

		return Float{ findShader( image, P, refZ, offset )
			, expr::makeTextureOffset2DArrayShadowFR32( findTypesCache( image, P, refZ, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage2DArrayShadowR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, offset )
				, expr::makeTextureOffset2DArrayShadowFR16( findTypesCache( image, P, refZ, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, offset ) };
		}

		return Float{ findShader( image, P, refZ, offset )
			, expr::makeTextureOffset2DArrayShadowFR16( findTypesCache( image, P, refZ, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureOffsetBias
	/**
	*name
	*	textureOffsetBias
	*/
	/**@{*/
	MaybeOptional< Vec4 > textureOffset( MaybeOptional< SampledImage1DRgba32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DFBiasRgba32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DFBiasRgba32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > textureOffset( MaybeOptional< SampledImage1DRgba16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DFBiasRgba16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DFBiasRgba16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > textureOffset( MaybeOptional< SampledImage1DRg32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DFBiasRg32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DFBiasRg32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > textureOffset( MaybeOptional< SampledImage1DRg16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DFBiasRg16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DFBiasRg16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage1DR32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Float >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DFBiasR32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DFBiasR32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage1DR16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Float >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DFBiasR16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DFBiasR16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > textureOffset( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DFBiasRgba32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DFBiasRgba32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > textureOffset( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DFBiasRgba16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DFBiasRgba16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > textureOffset( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DFBiasRg32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DFBiasRg32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > textureOffset( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DFBiasRg16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DFBiasRg16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Float >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DFBiasR32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DFBiasR32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Float >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DFBiasR16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DFBiasR16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > textureOffset( MaybeOptional< SampledImage3DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset3DFBiasRgba32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DFBiasRgba32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > textureOffset( MaybeOptional< SampledImage3DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset3DFBiasRgba16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DFBiasRgba16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > textureOffset( MaybeOptional< SampledImage3DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset3DFBiasRg32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DFBiasRg32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > textureOffset( MaybeOptional< SampledImage3DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset3DFBiasRg16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DFBiasRg16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage3DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Float >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset3DFBiasR32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DFBiasR32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage3DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Float >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset3DFBiasR16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DFBiasR16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > textureOffset( MaybeOptional< SampledImage1DArrayRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DArrayFBiasRgba32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayFBiasRgba32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > textureOffset( MaybeOptional< SampledImage1DArrayRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DArrayFBiasRgba16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayFBiasRgba16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > textureOffset( MaybeOptional< SampledImage1DArrayRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DArrayFBiasRg32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayFBiasRg32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > textureOffset( MaybeOptional< SampledImage1DArrayRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DArrayFBiasRg16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayFBiasRg16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage1DArrayR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Float >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DArrayFBiasR32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayFBiasR32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage1DArrayR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Float >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DArrayFBiasR16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayFBiasR16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > textureOffset( MaybeOptional< SampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DArrayFBiasRgba32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayFBiasRgba32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > textureOffset( MaybeOptional< SampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DArrayFBiasRgba16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayFBiasRgba16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > textureOffset( MaybeOptional< SampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DArrayFBiasRg32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayFBiasRg32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > textureOffset( MaybeOptional< SampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DArrayFBiasRg16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayFBiasRg16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Float >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DArrayFBiasR32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayFBiasR32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Float >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DArrayFBiasR16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayFBiasR16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureOffset( MaybeOptional< ISampledImage1DRgba32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DIBiasRgba32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DIBiasRgba32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureOffset( MaybeOptional< ISampledImage1DRgba16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DIBiasRgba16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DIBiasRgba16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureOffset( MaybeOptional< ISampledImage1DRgba8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DIBiasRgba8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DIBiasRgba8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureOffset( MaybeOptional< ISampledImage1DRg32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DIBiasRg32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DIBiasRg32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureOffset( MaybeOptional< ISampledImage1DRg16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DIBiasRg16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DIBiasRg16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureOffset( MaybeOptional< ISampledImage1DRg8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DIBiasRg8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DIBiasRg8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureOffset( MaybeOptional< ISampledImage1DR32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Int >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DIBiasR32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DIBiasR32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureOffset( MaybeOptional< ISampledImage1DR16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Int >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DIBiasR16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DIBiasR16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureOffset( MaybeOptional< ISampledImage1DR8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Int >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DIBiasR8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DIBiasR8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureOffset( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DIBiasRgba32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DIBiasRgba32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureOffset( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DIBiasRgba16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DIBiasRgba16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureOffset( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DIBiasRgba8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DIBiasRgba8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureOffset( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DIBiasRg32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DIBiasRg32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureOffset( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DIBiasRg16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DIBiasRg16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureOffset( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DIBiasRg8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DIBiasRg8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureOffset( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Int >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DIBiasR32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DIBiasR32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureOffset( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Int >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DIBiasR16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DIBiasR16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureOffset( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Int >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DIBiasR8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DIBiasR8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureOffset( MaybeOptional< ISampledImage3DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset3DIBiasRgba32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DIBiasRgba32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureOffset( MaybeOptional< ISampledImage3DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset3DIBiasRgba16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DIBiasRgba16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureOffset( MaybeOptional< ISampledImage3DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset3DIBiasRgba8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DIBiasRgba8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureOffset( MaybeOptional< ISampledImage3DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset3DIBiasRg32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DIBiasRg32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureOffset( MaybeOptional< ISampledImage3DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset3DIBiasRg16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DIBiasRg16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureOffset( MaybeOptional< ISampledImage3DRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset3DIBiasRg8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DIBiasRg8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureOffset( MaybeOptional< ISampledImage3DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Int >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset3DIBiasR32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DIBiasR32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureOffset( MaybeOptional< ISampledImage3DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Int >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset3DIBiasR16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DIBiasR16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureOffset( MaybeOptional< ISampledImage3DR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Int >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset3DIBiasR8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DIBiasR8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureOffset( MaybeOptional< ISampledImage1DArrayRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DArrayIBiasRgba32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayIBiasRgba32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureOffset( MaybeOptional< ISampledImage1DArrayRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DArrayIBiasRgba16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayIBiasRgba16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureOffset( MaybeOptional< ISampledImage1DArrayRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DArrayIBiasRgba8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayIBiasRgba8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureOffset( MaybeOptional< ISampledImage1DArrayRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DArrayIBiasRg32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayIBiasRg32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureOffset( MaybeOptional< ISampledImage1DArrayRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DArrayIBiasRg16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayIBiasRg16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureOffset( MaybeOptional< ISampledImage1DArrayRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DArrayIBiasRg8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayIBiasRg8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureOffset( MaybeOptional< ISampledImage1DArrayR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Int >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DArrayIBiasR32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayIBiasR32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureOffset( MaybeOptional< ISampledImage1DArrayR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Int >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DArrayIBiasR16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayIBiasR16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureOffset( MaybeOptional< ISampledImage1DArrayR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Int >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DArrayIBiasR8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayIBiasR8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureOffset( MaybeOptional< ISampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DArrayIBiasRgba32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayIBiasRgba32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureOffset( MaybeOptional< ISampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DArrayIBiasRgba16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayIBiasRgba16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureOffset( MaybeOptional< ISampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DArrayIBiasRgba8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayIBiasRgba8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureOffset( MaybeOptional< ISampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DArrayIBiasRg32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayIBiasRg32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureOffset( MaybeOptional< ISampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DArrayIBiasRg16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayIBiasRg16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureOffset( MaybeOptional< ISampledImage2DArrayRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DArrayIBiasRg8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayIBiasRg8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureOffset( MaybeOptional< ISampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Int >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DArrayIBiasR32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayIBiasR32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureOffset( MaybeOptional< ISampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Int >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DArrayIBiasR16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayIBiasR16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureOffset( MaybeOptional< ISampledImage2DArrayR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Int >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DArrayIBiasR8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayIBiasR8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureOffset( MaybeOptional< USampledImage1DRgba32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DUBiasRgba32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DUBiasRgba32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureOffset( MaybeOptional< USampledImage1DRgba16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DUBiasRgba16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DUBiasRgba16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureOffset( MaybeOptional< USampledImage1DRgba8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DUBiasRgba8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DUBiasRgba8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureOffset( MaybeOptional< USampledImage1DRg32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DUBiasRg32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DUBiasRg32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureOffset( MaybeOptional< USampledImage1DRg16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DUBiasRg16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DUBiasRg16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureOffset( MaybeOptional< USampledImage1DRg8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DUBiasRg8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DUBiasRg8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureOffset( MaybeOptional< USampledImage1DR32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DUBiasR32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DUBiasR32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureOffset( MaybeOptional< USampledImage1DR16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DUBiasR16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DUBiasR16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureOffset( MaybeOptional< USampledImage1DR8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DUBiasR8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DUBiasR8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureOffset( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DUBiasRgba32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DUBiasRgba32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureOffset( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DUBiasRgba16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DUBiasRgba16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureOffset( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DUBiasRgba8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DUBiasRgba8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureOffset( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DUBiasRg32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DUBiasRg32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureOffset( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DUBiasRg16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DUBiasRg16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureOffset( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DUBiasRg8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DUBiasRg8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureOffset( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DUBiasR32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DUBiasR32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureOffset( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DUBiasR16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DUBiasR16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureOffset( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DUBiasR8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DUBiasR8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureOffset( MaybeOptional< USampledImage3DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset3DUBiasRgba32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DUBiasRgba32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureOffset( MaybeOptional< USampledImage3DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset3DUBiasRgba16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DUBiasRgba16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureOffset( MaybeOptional< USampledImage3DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset3DUBiasRgba8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DUBiasRgba8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureOffset( MaybeOptional< USampledImage3DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset3DUBiasRg32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DUBiasRg32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureOffset( MaybeOptional< USampledImage3DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset3DUBiasRg16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DUBiasRg16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureOffset( MaybeOptional< USampledImage3DRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset3DUBiasRg8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DUBiasRg8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureOffset( MaybeOptional< USampledImage3DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset3DUBiasR32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DUBiasR32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureOffset( MaybeOptional< USampledImage3DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset3DUBiasR16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DUBiasR16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureOffset( MaybeOptional< USampledImage3DR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset3DUBiasR8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset3DUBiasR8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureOffset( MaybeOptional< USampledImage1DArrayRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DArrayUBiasRgba32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayUBiasRgba32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureOffset( MaybeOptional< USampledImage1DArrayRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DArrayUBiasRgba16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayUBiasRgba16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureOffset( MaybeOptional< USampledImage1DArrayRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DArrayUBiasRgba8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayUBiasRgba8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureOffset( MaybeOptional< USampledImage1DArrayRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DArrayUBiasRg32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayUBiasRg32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureOffset( MaybeOptional< USampledImage1DArrayRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DArrayUBiasRg16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayUBiasRg16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureOffset( MaybeOptional< USampledImage1DArrayRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DArrayUBiasRg8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayUBiasRg8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureOffset( MaybeOptional< USampledImage1DArrayR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DArrayUBiasR32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayUBiasR32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureOffset( MaybeOptional< USampledImage1DArrayR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DArrayUBiasR16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayUBiasR16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureOffset( MaybeOptional< USampledImage1DArrayR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset1DArrayUBiasR8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset1DArrayUBiasR8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureOffset( MaybeOptional< USampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DArrayUBiasRgba32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayUBiasRgba32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureOffset( MaybeOptional< USampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DArrayUBiasRgba16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayUBiasRgba16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureOffset( MaybeOptional< USampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DArrayUBiasRgba8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayUBiasRgba8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureOffset( MaybeOptional< USampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DArrayUBiasRg32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayUBiasRg32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureOffset( MaybeOptional< USampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DArrayUBiasRg16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayUBiasRg16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureOffset( MaybeOptional< USampledImage2DArrayRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DArrayUBiasRg8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayUBiasRg8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureOffset( MaybeOptional< USampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DArrayUBiasR32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayUBiasR32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureOffset( MaybeOptional< USampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DArrayUBiasR16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayUBiasR16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureOffset( MaybeOptional< USampledImage2DArrayR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, offset, bias )
				, expr::makeTextureOffset2DArrayUBiasR8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureOffset2DArrayUBiasR8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage1DShadowR32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, refZ, offset, bias ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, offset, bias )
				, expr::makeTextureOffset1DShadowFBiasR32( findTypesCache( image, P, refZ, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, refZ, offset, bias ) };
		}

		return Float{ findShader( image, P, refZ, offset, bias )
			, expr::makeTextureOffset1DShadowFBiasR32( findTypesCache( image, P, refZ, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage1DShadowR16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, refZ, offset, bias ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, offset, bias )
				, expr::makeTextureOffset1DShadowFBiasR16( findTypesCache( image, P, refZ, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, refZ, offset, bias ) };
		}

		return Float{ findShader( image, P, refZ, offset, bias )
			, expr::makeTextureOffset1DShadowFBiasR16( findTypesCache( image, P, refZ, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage2DShadowR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, refZ, offset, bias ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, offset, bias )
				, expr::makeTextureOffset2DShadowFBiasR32( findTypesCache( image, P, refZ, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, refZ, offset, bias ) };
		}

		return Float{ findShader( image, P, refZ, offset, bias )
			, expr::makeTextureOffset2DShadowFBiasR32( findTypesCache( image, P, refZ, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureOffset( MaybeOptional< SampledImage2DShadowR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, refZ, offset, bias ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, offset, bias )
				, expr::makeTextureOffset2DShadowFBiasR16( findTypesCache( image, P, refZ, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, refZ, offset, bias ) };
		}

		return Float{ findShader( image, P, refZ, offset, bias )
			, expr::makeTextureOffset2DShadowFBiasR16( findTypesCache( image, P, refZ, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region texelFetch
	/**
	*name
	*	texelFetch
	*/
	/**@{*/
	MaybeOptional< Vec4 > texelFetch( MaybeOptional< SampledImage1DRgba32 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DFRgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DFRgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > texelFetch( MaybeOptional< SampledImage1DRgba16 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DFRgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DFRgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > texelFetch( MaybeOptional< SampledImage1DRg32 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DFRg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DFRg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > texelFetch( MaybeOptional< SampledImage1DRg16 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DFRg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DFRg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > texelFetch( MaybeOptional< SampledImage1DR32 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DFR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTexelFetch1DFR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > texelFetch( MaybeOptional< SampledImage1DR16 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DFR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTexelFetch1DFR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > texelFetch( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DFRgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DFRgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > texelFetch( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DFRgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DFRgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > texelFetch( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DFRg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DFRg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > texelFetch( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DFRg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DFRg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > texelFetch( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DFR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTexelFetch2DFR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > texelFetch( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DFR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTexelFetch2DFR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > texelFetch( MaybeOptional< SampledImage3DRgba32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch3DFRgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTexelFetch3DFRgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > texelFetch( MaybeOptional< SampledImage3DRgba16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch3DFRgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTexelFetch3DFRgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > texelFetch( MaybeOptional< SampledImage3DRg32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch3DFRg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTexelFetch3DFRg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > texelFetch( MaybeOptional< SampledImage3DRg16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch3DFRg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTexelFetch3DFRg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > texelFetch( MaybeOptional< SampledImage3DR32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTexelFetch3DFR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTexelFetch3DFR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > texelFetch( MaybeOptional< SampledImage3DR16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTexelFetch3DFR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTexelFetch3DFR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > texelFetch( MaybeOptional< SampledImage1DArrayRgba32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DArrayFRgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayFRgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > texelFetch( MaybeOptional< SampledImage1DArrayRgba16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DArrayFRgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayFRgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > texelFetch( MaybeOptional< SampledImage1DArrayRg32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DArrayFRg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayFRg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > texelFetch( MaybeOptional< SampledImage1DArrayRg16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DArrayFRg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayFRg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > texelFetch( MaybeOptional< SampledImage1DArrayR32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DArrayFR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayFR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > texelFetch( MaybeOptional< SampledImage1DArrayR16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DArrayFR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayFR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > texelFetch( MaybeOptional< SampledImage2DArrayRgba32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DArrayFRgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayFRgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > texelFetch( MaybeOptional< SampledImage2DArrayRgba16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DArrayFRgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayFRgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > texelFetch( MaybeOptional< SampledImage2DArrayRg32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DArrayFRg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayFRg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > texelFetch( MaybeOptional< SampledImage2DArrayRg16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DArrayFRg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayFRg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > texelFetch( MaybeOptional< SampledImage2DArrayR32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DArrayFR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayFR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > texelFetch( MaybeOptional< SampledImage2DArrayR16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DArrayFR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayFR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > texelFetch( MaybeOptional< ISampledImage1DRgba32 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DIRgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DIRgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > texelFetch( MaybeOptional< ISampledImage1DRgba16 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DIRgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DIRgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > texelFetch( MaybeOptional< ISampledImage1DRgba8 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DIRgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DIRgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > texelFetch( MaybeOptional< ISampledImage1DRg32 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DIRg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DIRg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > texelFetch( MaybeOptional< ISampledImage1DRg16 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DIRg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DIRg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > texelFetch( MaybeOptional< ISampledImage1DRg8 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DIRg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DIRg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > texelFetch( MaybeOptional< ISampledImage1DR32 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DIR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTexelFetch1DIR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > texelFetch( MaybeOptional< ISampledImage1DR16 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DIR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTexelFetch1DIR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > texelFetch( MaybeOptional< ISampledImage1DR8 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DIR8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTexelFetch1DIR8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > texelFetch( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DIRgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DIRgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > texelFetch( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DIRgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DIRgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > texelFetch( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DIRgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DIRgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > texelFetch( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DIRg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DIRg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > texelFetch( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DIRg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DIRg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > texelFetch( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DIRg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DIRg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > texelFetch( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DIR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTexelFetch2DIR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > texelFetch( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DIR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTexelFetch2DIR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > texelFetch( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DIR8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTexelFetch2DIR8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > texelFetch( MaybeOptional< ISampledImage3DRgba32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch3DIRgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch3DIRgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > texelFetch( MaybeOptional< ISampledImage3DRgba16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch3DIRgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch3DIRgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > texelFetch( MaybeOptional< ISampledImage3DRgba8 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch3DIRgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch3DIRgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > texelFetch( MaybeOptional< ISampledImage3DRg32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch3DIRg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch3DIRg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > texelFetch( MaybeOptional< ISampledImage3DRg16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch3DIRg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch3DIRg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > texelFetch( MaybeOptional< ISampledImage3DRg8 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch3DIRg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch3DIRg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > texelFetch( MaybeOptional< ISampledImage3DR32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTexelFetch3DIR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTexelFetch3DIR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > texelFetch( MaybeOptional< ISampledImage3DR16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTexelFetch3DIR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTexelFetch3DIR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > texelFetch( MaybeOptional< ISampledImage3DR8 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTexelFetch3DIR8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTexelFetch3DIR8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > texelFetch( MaybeOptional< ISampledImage1DArrayRgba32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DArrayIRgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayIRgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > texelFetch( MaybeOptional< ISampledImage1DArrayRgba16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DArrayIRgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayIRgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > texelFetch( MaybeOptional< ISampledImage1DArrayRgba8 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DArrayIRgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayIRgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > texelFetch( MaybeOptional< ISampledImage1DArrayRg32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DArrayIRg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayIRg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > texelFetch( MaybeOptional< ISampledImage1DArrayRg16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DArrayIRg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayIRg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > texelFetch( MaybeOptional< ISampledImage1DArrayRg8 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DArrayIRg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayIRg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > texelFetch( MaybeOptional< ISampledImage1DArrayR32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DArrayIR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayIR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > texelFetch( MaybeOptional< ISampledImage1DArrayR16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DArrayIR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayIR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > texelFetch( MaybeOptional< ISampledImage1DArrayR8 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DArrayIR8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayIR8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > texelFetch( MaybeOptional< ISampledImage2DArrayRgba32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DArrayIRgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayIRgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > texelFetch( MaybeOptional< ISampledImage2DArrayRgba16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DArrayIRgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayIRgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > texelFetch( MaybeOptional< ISampledImage2DArrayRgba8 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DArrayIRgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayIRgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > texelFetch( MaybeOptional< ISampledImage2DArrayRg32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DArrayIRg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayIRg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > texelFetch( MaybeOptional< ISampledImage2DArrayRg16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DArrayIRg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayIRg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > texelFetch( MaybeOptional< ISampledImage2DArrayRg8 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DArrayIRg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayIRg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > texelFetch( MaybeOptional< ISampledImage2DArrayR32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DArrayIR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayIR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > texelFetch( MaybeOptional< ISampledImage2DArrayR16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DArrayIR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayIR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > texelFetch( MaybeOptional< ISampledImage2DArrayR8 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DArrayIR8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayIR8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > texelFetch( MaybeOptional< USampledImage1DRgba32 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DURgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DURgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > texelFetch( MaybeOptional< USampledImage1DRgba16 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DURgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DURgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > texelFetch( MaybeOptional< USampledImage1DRgba8 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DURgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DURgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > texelFetch( MaybeOptional< USampledImage1DRg32 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DURg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DURg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > texelFetch( MaybeOptional< USampledImage1DRg16 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DURg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DURg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > texelFetch( MaybeOptional< USampledImage1DRg8 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DURg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DURg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > texelFetch( MaybeOptional< USampledImage1DR32 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DUR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTexelFetch1DUR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > texelFetch( MaybeOptional< USampledImage1DR16 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DUR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTexelFetch1DUR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > texelFetch( MaybeOptional< USampledImage1DR8 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DUR8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTexelFetch1DUR8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > texelFetch( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DURgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DURgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > texelFetch( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DURgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DURgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > texelFetch( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DURgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DURgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > texelFetch( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DURg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DURg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > texelFetch( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DURg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DURg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > texelFetch( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DURg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DURg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > texelFetch( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DUR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTexelFetch2DUR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > texelFetch( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DUR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTexelFetch2DUR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > texelFetch( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DUR8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTexelFetch2DUR8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > texelFetch( MaybeOptional< USampledImage3DRgba32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch3DURgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch3DURgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > texelFetch( MaybeOptional< USampledImage3DRgba16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch3DURgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch3DURgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > texelFetch( MaybeOptional< USampledImage3DRgba8 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch3DURgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch3DURgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > texelFetch( MaybeOptional< USampledImage3DRg32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch3DURg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch3DURg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > texelFetch( MaybeOptional< USampledImage3DRg16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch3DURg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch3DURg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > texelFetch( MaybeOptional< USampledImage3DRg8 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch3DURg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch3DURg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > texelFetch( MaybeOptional< USampledImage3DR32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTexelFetch3DUR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTexelFetch3DUR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > texelFetch( MaybeOptional< USampledImage3DR16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTexelFetch3DUR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTexelFetch3DUR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > texelFetch( MaybeOptional< USampledImage3DR8 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTexelFetch3DUR8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTexelFetch3DUR8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > texelFetch( MaybeOptional< USampledImage1DArrayRgba32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DArrayURgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayURgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > texelFetch( MaybeOptional< USampledImage1DArrayRgba16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DArrayURgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayURgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > texelFetch( MaybeOptional< USampledImage1DArrayRgba8 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DArrayURgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayURgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > texelFetch( MaybeOptional< USampledImage1DArrayRg32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DArrayURg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayURg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > texelFetch( MaybeOptional< USampledImage1DArrayRg16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DArrayURg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayURg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > texelFetch( MaybeOptional< USampledImage1DArrayRg8 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DArrayURg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayURg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > texelFetch( MaybeOptional< USampledImage1DArrayR32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DArrayUR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayUR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > texelFetch( MaybeOptional< USampledImage1DArrayR16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DArrayUR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayUR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > texelFetch( MaybeOptional< USampledImage1DArrayR8 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTexelFetch1DArrayUR8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTexelFetch1DArrayUR8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > texelFetch( MaybeOptional< USampledImage2DArrayRgba32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DArrayURgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayURgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > texelFetch( MaybeOptional< USampledImage2DArrayRgba16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DArrayURgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayURgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > texelFetch( MaybeOptional< USampledImage2DArrayRgba8 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DArrayURgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayURgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > texelFetch( MaybeOptional< USampledImage2DArrayRg32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DArrayURg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayURg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > texelFetch( MaybeOptional< USampledImage2DArrayRg16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DArrayURg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayURg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > texelFetch( MaybeOptional< USampledImage2DArrayRg8 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DArrayURg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayURg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > texelFetch( MaybeOptional< USampledImage2DArrayR32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DArrayUR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayUR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > texelFetch( MaybeOptional< USampledImage2DArrayR16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DArrayUR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayUR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > texelFetch( MaybeOptional< USampledImage2DArrayR8 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTexelFetch2DArrayUR8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTexelFetch2DArrayUR8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > texelFetch( MaybeOptional< SampledImageBufferRgba32 > const & image
		, MaybeOptional< Int > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTexelFetchBufferFRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTexelFetchBufferFRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > texelFetch( MaybeOptional< SampledImageBufferRgba16 > const & image
		, MaybeOptional< Int > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTexelFetchBufferFRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTexelFetchBufferFRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > texelFetch( MaybeOptional< SampledImageBufferRg32 > const & image
		, MaybeOptional< Int > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTexelFetchBufferFRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTexelFetchBufferFRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec2 > texelFetch( MaybeOptional< SampledImageBufferRg16 > const & image
		, MaybeOptional< Int > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec2 >{ findShader( image, P )
				, expr::makeTexelFetchBufferFRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec2{ findShader( image, P )
			, expr::makeTexelFetchBufferFRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Float > texelFetch( MaybeOptional< SampledImageBufferR32 > const & image
		, MaybeOptional< Int > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Float >{ findShader( image, P )
				, expr::makeTexelFetchBufferFR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Float{ findShader( image, P )
			, expr::makeTexelFetchBufferFR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Float > texelFetch( MaybeOptional< SampledImageBufferR16 > const & image
		, MaybeOptional< Int > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Float >{ findShader( image, P )
				, expr::makeTexelFetchBufferFR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Float{ findShader( image, P )
			, expr::makeTexelFetchBufferFR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > texelFetch( MaybeOptional< ISampledImageBufferRgba32 > const & image
		, MaybeOptional< Int > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTexelFetchBufferIRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTexelFetchBufferIRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > texelFetch( MaybeOptional< ISampledImageBufferRgba16 > const & image
		, MaybeOptional< Int > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTexelFetchBufferIRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTexelFetchBufferIRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > texelFetch( MaybeOptional< ISampledImageBufferRgba8 > const & image
		, MaybeOptional< Int > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTexelFetchBufferIRgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTexelFetchBufferIRgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > texelFetch( MaybeOptional< ISampledImageBufferRg32 > const & image
		, MaybeOptional< Int > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTexelFetchBufferIRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTexelFetchBufferIRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > texelFetch( MaybeOptional< ISampledImageBufferRg16 > const & image
		, MaybeOptional< Int > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTexelFetchBufferIRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTexelFetchBufferIRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec2 > texelFetch( MaybeOptional< ISampledImageBufferRg8 > const & image
		, MaybeOptional< Int > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec2 >{ findShader( image, P )
				, expr::makeTexelFetchBufferIRg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec2{ findShader( image, P )
			, expr::makeTexelFetchBufferIRg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > texelFetch( MaybeOptional< ISampledImageBufferR32 > const & image
		, MaybeOptional< Int > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTexelFetchBufferIR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTexelFetchBufferIR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > texelFetch( MaybeOptional< ISampledImageBufferR16 > const & image
		, MaybeOptional< Int > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTexelFetchBufferIR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTexelFetchBufferIR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Int > texelFetch( MaybeOptional< ISampledImageBufferR8 > const & image
		, MaybeOptional< Int > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Int >{ findShader( image, P )
				, expr::makeTexelFetchBufferIR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Int{ findShader( image, P )
			, expr::makeTexelFetchBufferIR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > texelFetch( MaybeOptional< USampledImageBufferRgba32 > const & image
		, MaybeOptional< Int > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTexelFetchBufferURgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTexelFetchBufferURgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > texelFetch( MaybeOptional< USampledImageBufferRgba16 > const & image
		, MaybeOptional< Int > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTexelFetchBufferURgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTexelFetchBufferURgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > texelFetch( MaybeOptional< USampledImageBufferRgba8 > const & image
		, MaybeOptional< Int > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTexelFetchBufferURgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTexelFetchBufferURgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > texelFetch( MaybeOptional< USampledImageBufferRg32 > const & image
		, MaybeOptional< Int > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTexelFetchBufferURg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTexelFetchBufferURg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > texelFetch( MaybeOptional< USampledImageBufferRg16 > const & image
		, MaybeOptional< Int > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTexelFetchBufferURg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTexelFetchBufferURg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec2 > texelFetch( MaybeOptional< USampledImageBufferRg8 > const & image
		, MaybeOptional< Int > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec2 >{ findShader( image, P )
				, expr::makeTexelFetchBufferURg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec2{ findShader( image, P )
			, expr::makeTexelFetchBufferURg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > texelFetch( MaybeOptional< USampledImageBufferR32 > const & image
		, MaybeOptional< Int > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTexelFetchBufferUR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTexelFetchBufferUR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > texelFetch( MaybeOptional< USampledImageBufferR16 > const & image
		, MaybeOptional< Int > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTexelFetchBufferUR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTexelFetchBufferUR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UInt > texelFetch( MaybeOptional< USampledImageBufferR8 > const & image
		, MaybeOptional< Int > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UInt >{ findShader( image, P )
				, expr::makeTexelFetchBufferUR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UInt{ findShader( image, P )
			, expr::makeTexelFetchBufferUR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region texelFetchOffset
	/**
	*name
	*	texelFetchOffset
	*/
	/**@{*/
	MaybeOptional< Vec4 > texelFetchOffset( MaybeOptional< SampledImage1DRgba32 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DFRgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DFRgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > texelFetchOffset( MaybeOptional< SampledImage1DRgba16 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DFRgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DFRgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > texelFetchOffset( MaybeOptional< SampledImage1DRg32 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DFRg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DFRg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > texelFetchOffset( MaybeOptional< SampledImage1DRg16 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DFRg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DFRg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > texelFetchOffset( MaybeOptional< SampledImage1DR32 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DFR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Float{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DFR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > texelFetchOffset( MaybeOptional< SampledImage1DR16 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DFR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Float{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DFR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > texelFetchOffset( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DFRgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DFRgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > texelFetchOffset( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DFRgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DFRgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > texelFetchOffset( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DFRg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DFRg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > texelFetchOffset( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DFRg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DFRg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > texelFetchOffset( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DFR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Float{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DFR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > texelFetchOffset( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DFR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Float{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DFR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > texelFetchOffset( MaybeOptional< SampledImage3DRgba32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset3DFRgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DFRgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > texelFetchOffset( MaybeOptional< SampledImage3DRgba16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset3DFRgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DFRgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > texelFetchOffset( MaybeOptional< SampledImage3DRg32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset3DFRg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DFRg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > texelFetchOffset( MaybeOptional< SampledImage3DRg16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset3DFRg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DFRg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > texelFetchOffset( MaybeOptional< SampledImage3DR32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset3DFR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Float{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DFR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > texelFetchOffset( MaybeOptional< SampledImage3DR16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset3DFR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Float{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DFR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > texelFetchOffset( MaybeOptional< SampledImage1DArrayRgba32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DArrayFRgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayFRgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > texelFetchOffset( MaybeOptional< SampledImage1DArrayRgba16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DArrayFRgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayFRgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > texelFetchOffset( MaybeOptional< SampledImage1DArrayRg32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DArrayFRg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayFRg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > texelFetchOffset( MaybeOptional< SampledImage1DArrayRg16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DArrayFRg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayFRg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > texelFetchOffset( MaybeOptional< SampledImage1DArrayR32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DArrayFR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Float{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayFR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > texelFetchOffset( MaybeOptional< SampledImage1DArrayR16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DArrayFR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Float{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayFR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > texelFetchOffset( MaybeOptional< SampledImage2DArrayRgba32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DArrayFRgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayFRgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > texelFetchOffset( MaybeOptional< SampledImage2DArrayRgba16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DArrayFRgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayFRgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > texelFetchOffset( MaybeOptional< SampledImage2DArrayRg32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DArrayFRg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayFRg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > texelFetchOffset( MaybeOptional< SampledImage2DArrayRg16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DArrayFRg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayFRg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > texelFetchOffset( MaybeOptional< SampledImage2DArrayR32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DArrayFR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Float{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayFR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > texelFetchOffset( MaybeOptional< SampledImage2DArrayR16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DArrayFR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Float{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayFR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > texelFetchOffset( MaybeOptional< ISampledImage1DRgba32 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DIRgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DIRgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > texelFetchOffset( MaybeOptional< ISampledImage1DRgba16 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DIRgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DIRgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > texelFetchOffset( MaybeOptional< ISampledImage1DRgba8 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DIRgba8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DIRgba8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > texelFetchOffset( MaybeOptional< ISampledImage1DRg32 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DIRg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DIRg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > texelFetchOffset( MaybeOptional< ISampledImage1DRg16 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DIRg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DIRg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > texelFetchOffset( MaybeOptional< ISampledImage1DRg8 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DIRg8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DIRg8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > texelFetchOffset( MaybeOptional< ISampledImage1DR32 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DIR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DIR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > texelFetchOffset( MaybeOptional< ISampledImage1DR16 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DIR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DIR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > texelFetchOffset( MaybeOptional< ISampledImage1DR8 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DIR8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DIR8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > texelFetchOffset( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DIRgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DIRgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > texelFetchOffset( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DIRgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DIRgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > texelFetchOffset( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DIRgba8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DIRgba8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > texelFetchOffset( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DIRg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DIRg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > texelFetchOffset( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DIRg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DIRg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > texelFetchOffset( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DIRg8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DIRg8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > texelFetchOffset( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DIR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DIR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > texelFetchOffset( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DIR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DIR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > texelFetchOffset( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DIR8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DIR8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > texelFetchOffset( MaybeOptional< ISampledImage3DRgba32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset3DIRgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DIRgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > texelFetchOffset( MaybeOptional< ISampledImage3DRgba16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset3DIRgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DIRgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > texelFetchOffset( MaybeOptional< ISampledImage3DRgba8 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset3DIRgba8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DIRgba8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > texelFetchOffset( MaybeOptional< ISampledImage3DRg32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset3DIRg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DIRg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > texelFetchOffset( MaybeOptional< ISampledImage3DRg16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset3DIRg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DIRg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > texelFetchOffset( MaybeOptional< ISampledImage3DRg8 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset3DIRg8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DIRg8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > texelFetchOffset( MaybeOptional< ISampledImage3DR32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset3DIR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DIR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > texelFetchOffset( MaybeOptional< ISampledImage3DR16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset3DIR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DIR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > texelFetchOffset( MaybeOptional< ISampledImage3DR8 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset3DIR8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DIR8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > texelFetchOffset( MaybeOptional< ISampledImage1DArrayRgba32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DArrayIRgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayIRgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > texelFetchOffset( MaybeOptional< ISampledImage1DArrayRgba16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DArrayIRgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayIRgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > texelFetchOffset( MaybeOptional< ISampledImage1DArrayRgba8 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DArrayIRgba8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayIRgba8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > texelFetchOffset( MaybeOptional< ISampledImage1DArrayRg32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DArrayIRg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayIRg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > texelFetchOffset( MaybeOptional< ISampledImage1DArrayRg16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DArrayIRg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayIRg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > texelFetchOffset( MaybeOptional< ISampledImage1DArrayRg8 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DArrayIRg8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayIRg8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > texelFetchOffset( MaybeOptional< ISampledImage1DArrayR32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DArrayIR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayIR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > texelFetchOffset( MaybeOptional< ISampledImage1DArrayR16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DArrayIR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayIR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > texelFetchOffset( MaybeOptional< ISampledImage1DArrayR8 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DArrayIR8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayIR8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > texelFetchOffset( MaybeOptional< ISampledImage2DArrayRgba32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DArrayIRgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayIRgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > texelFetchOffset( MaybeOptional< ISampledImage2DArrayRgba16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DArrayIRgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayIRgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > texelFetchOffset( MaybeOptional< ISampledImage2DArrayRgba8 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DArrayIRgba8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayIRgba8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > texelFetchOffset( MaybeOptional< ISampledImage2DArrayRg32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DArrayIRg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayIRg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > texelFetchOffset( MaybeOptional< ISampledImage2DArrayRg16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DArrayIRg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayIRg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > texelFetchOffset( MaybeOptional< ISampledImage2DArrayRg8 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DArrayIRg8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayIRg8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > texelFetchOffset( MaybeOptional< ISampledImage2DArrayR32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DArrayIR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayIR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > texelFetchOffset( MaybeOptional< ISampledImage2DArrayR16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DArrayIR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayIR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > texelFetchOffset( MaybeOptional< ISampledImage2DArrayR8 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DArrayIR8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayIR8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > texelFetchOffset( MaybeOptional< USampledImage1DRgba32 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DURgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DURgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > texelFetchOffset( MaybeOptional< USampledImage1DRgba16 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DURgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DURgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > texelFetchOffset( MaybeOptional< USampledImage1DRgba8 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DURgba8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DURgba8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > texelFetchOffset( MaybeOptional< USampledImage1DRg32 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DURg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DURg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > texelFetchOffset( MaybeOptional< USampledImage1DRg16 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DURg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DURg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > texelFetchOffset( MaybeOptional< USampledImage1DRg8 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DURg8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DURg8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > texelFetchOffset( MaybeOptional< USampledImage1DR32 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DUR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DUR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > texelFetchOffset( MaybeOptional< USampledImage1DR16 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DUR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DUR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > texelFetchOffset( MaybeOptional< USampledImage1DR8 > const & image
		, MaybeOptional< Int > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DUR8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DUR8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > texelFetchOffset( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DURgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DURgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > texelFetchOffset( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DURgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DURgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > texelFetchOffset( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DURgba8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DURgba8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > texelFetchOffset( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DURg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DURg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > texelFetchOffset( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DURg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DURg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > texelFetchOffset( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DURg8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DURg8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > texelFetchOffset( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DUR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DUR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > texelFetchOffset( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DUR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DUR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > texelFetchOffset( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DUR8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DUR8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > texelFetchOffset( MaybeOptional< USampledImage3DRgba32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset3DURgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DURgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > texelFetchOffset( MaybeOptional< USampledImage3DRgba16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset3DURgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DURgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > texelFetchOffset( MaybeOptional< USampledImage3DRgba8 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset3DURgba8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DURgba8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > texelFetchOffset( MaybeOptional< USampledImage3DRg32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset3DURg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DURg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > texelFetchOffset( MaybeOptional< USampledImage3DRg16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset3DURg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DURg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > texelFetchOffset( MaybeOptional< USampledImage3DRg8 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset3DURg8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DURg8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > texelFetchOffset( MaybeOptional< USampledImage3DR32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset3DUR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DUR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > texelFetchOffset( MaybeOptional< USampledImage3DR16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset3DUR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DUR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > texelFetchOffset( MaybeOptional< USampledImage3DR8 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset3DUR8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset3DUR8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > texelFetchOffset( MaybeOptional< USampledImage1DArrayRgba32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DArrayURgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayURgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > texelFetchOffset( MaybeOptional< USampledImage1DArrayRgba16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DArrayURgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayURgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > texelFetchOffset( MaybeOptional< USampledImage1DArrayRgba8 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DArrayURgba8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayURgba8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > texelFetchOffset( MaybeOptional< USampledImage1DArrayRg32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DArrayURg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayURg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > texelFetchOffset( MaybeOptional< USampledImage1DArrayRg16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DArrayURg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayURg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > texelFetchOffset( MaybeOptional< USampledImage1DArrayRg8 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DArrayURg8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayURg8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > texelFetchOffset( MaybeOptional< USampledImage1DArrayR32 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DArrayUR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayUR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > texelFetchOffset( MaybeOptional< USampledImage1DArrayR16 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DArrayUR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayUR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > texelFetchOffset( MaybeOptional< USampledImage1DArrayR8 > const & image
		, MaybeOptional< IVec2 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset1DArrayUR8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset1DArrayUR8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > texelFetchOffset( MaybeOptional< USampledImage2DArrayRgba32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DArrayURgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayURgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > texelFetchOffset( MaybeOptional< USampledImage2DArrayRgba16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DArrayURgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayURgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > texelFetchOffset( MaybeOptional< USampledImage2DArrayRgba8 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DArrayURgba8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayURgba8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > texelFetchOffset( MaybeOptional< USampledImage2DArrayRg32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DArrayURg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayURg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > texelFetchOffset( MaybeOptional< USampledImage2DArrayRg16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DArrayURg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayURg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > texelFetchOffset( MaybeOptional< USampledImage2DArrayRg8 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DArrayURg8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayURg8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > texelFetchOffset( MaybeOptional< USampledImage2DArrayR32 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DArrayUR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayUR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > texelFetchOffset( MaybeOptional< USampledImage2DArrayR16 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DArrayUR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayUR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > texelFetchOffset( MaybeOptional< USampledImage2DArrayR8 > const & image
		, MaybeOptional< IVec3 > const & P
		, MaybeOptional< Int > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTexelFetchOffset2DArrayUR8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTexelFetchOffset2DArrayUR8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureProjOffset
	/**
	*name
	*	textureProjOffset
	*/
	/**@{*/
	MaybeOptional< Vec4 > textureProjOffset( MaybeOptional< SampledImage1DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DF2Rgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DF2Rgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureProjOffset( MaybeOptional< SampledImage1DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DF2Rgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DF2Rgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureProjOffset( MaybeOptional< SampledImage1DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DF2Rg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DF2Rg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureProjOffset( MaybeOptional< SampledImage1DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DF2Rg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DF2Rg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjOffset( MaybeOptional< SampledImage1DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Float >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DF2R32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Float{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DF2R32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjOffset( MaybeOptional< SampledImage1DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Float >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DF2R16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Float{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DF2R16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureProjOffset( MaybeOptional< SampledImage1DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DF4Rgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DF4Rgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureProjOffset( MaybeOptional< SampledImage1DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DF4Rgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DF4Rgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureProjOffset( MaybeOptional< SampledImage1DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DF4Rg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DF4Rg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureProjOffset( MaybeOptional< SampledImage1DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DF4Rg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DF4Rg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjOffset( MaybeOptional< SampledImage1DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Float >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DF4R32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Float{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DF4R32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjOffset( MaybeOptional< SampledImage1DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Float >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DF4R16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Float{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DF4R16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureProjOffset( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DF3Rgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DF3Rgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureProjOffset( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DF3Rgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DF3Rgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureProjOffset( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DF3Rg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DF3Rg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureProjOffset( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DF3Rg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DF3Rg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjOffset( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Float >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DF3R32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Float{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DF3R32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjOffset( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Float >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DF3R16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Float{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DF3R16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureProjOffset( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DF4Rgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DF4Rgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureProjOffset( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DF4Rgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DF4Rgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureProjOffset( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DF4Rg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DF4Rg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureProjOffset( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DF4Rg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DF4Rg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjOffset( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Float >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DF4R32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Float{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DF4R32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjOffset( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Float >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DF4R16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Float{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DF4R16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureProjOffset( MaybeOptional< SampledImage3DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset3DFRgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DFRgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureProjOffset( MaybeOptional< SampledImage3DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset3DFRgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DFRgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureProjOffset( MaybeOptional< SampledImage3DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset3DFRg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DFRg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureProjOffset( MaybeOptional< SampledImage3DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset3DFRg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DFRg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjOffset( MaybeOptional< SampledImage3DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Float >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset3DFR32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Float{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DFR32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjOffset( MaybeOptional< SampledImage3DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Float >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset3DFR16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Float{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DFR16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjOffset( MaybeOptional< ISampledImage1DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DI2Rgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI2Rgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjOffset( MaybeOptional< ISampledImage1DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DI2Rgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI2Rgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjOffset( MaybeOptional< ISampledImage1DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DI2Rgba8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI2Rgba8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjOffset( MaybeOptional< ISampledImage1DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DI2Rg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI2Rg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjOffset( MaybeOptional< ISampledImage1DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DI2Rg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI2Rg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjOffset( MaybeOptional< ISampledImage1DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DI2Rg8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI2Rg8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjOffset( MaybeOptional< ISampledImage1DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Int >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DI2R32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI2R32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjOffset( MaybeOptional< ISampledImage1DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Int >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DI2R16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI2R16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjOffset( MaybeOptional< ISampledImage1DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Int >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DI2R8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI2R8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjOffset( MaybeOptional< ISampledImage1DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DI4Rgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI4Rgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjOffset( MaybeOptional< ISampledImage1DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DI4Rgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI4Rgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjOffset( MaybeOptional< ISampledImage1DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DI4Rgba8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI4Rgba8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjOffset( MaybeOptional< ISampledImage1DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DI4Rg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI4Rg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjOffset( MaybeOptional< ISampledImage1DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DI4Rg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI4Rg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjOffset( MaybeOptional< ISampledImage1DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DI4Rg8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI4Rg8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjOffset( MaybeOptional< ISampledImage1DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Int >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DI4R32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI4R32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjOffset( MaybeOptional< ISampledImage1DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Int >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DI4R16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI4R16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjOffset( MaybeOptional< ISampledImage1DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Int >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DI4R8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DI4R8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjOffset( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DI3Rgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI3Rgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjOffset( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DI3Rgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI3Rgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjOffset( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DI3Rgba8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI3Rgba8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjOffset( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DI3Rg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI3Rg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjOffset( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DI3Rg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI3Rg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjOffset( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DI3Rg8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI3Rg8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjOffset( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Int >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DI3R32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI3R32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjOffset( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Int >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DI3R16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI3R16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjOffset( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Int >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DI3R8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI3R8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjOffset( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DI4Rgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI4Rgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjOffset( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DI4Rgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI4Rgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjOffset( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DI4Rgba8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI4Rgba8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjOffset( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DI4Rg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI4Rg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjOffset( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DI4Rg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI4Rg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjOffset( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DI4Rg8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI4Rg8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjOffset( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Int >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DI4R32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI4R32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjOffset( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Int >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DI4R16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI4R16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjOffset( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Int >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DI4R8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DI4R8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjOffset( MaybeOptional< ISampledImage3DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset3DIRgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DIRgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjOffset( MaybeOptional< ISampledImage3DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset3DIRgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DIRgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjOffset( MaybeOptional< ISampledImage3DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset3DIRgba8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DIRgba8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjOffset( MaybeOptional< ISampledImage3DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset3DIRg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DIRg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjOffset( MaybeOptional< ISampledImage3DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset3DIRg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DIRg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjOffset( MaybeOptional< ISampledImage3DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset3DIRg8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DIRg8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjOffset( MaybeOptional< ISampledImage3DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Int >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset3DIR32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DIR32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjOffset( MaybeOptional< ISampledImage3DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Int >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset3DIR16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DIR16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjOffset( MaybeOptional< ISampledImage3DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Int >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset3DIR8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Int{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DIR8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjOffset( MaybeOptional< USampledImage1DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DU2Rgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU2Rgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjOffset( MaybeOptional< USampledImage1DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DU2Rgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU2Rgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjOffset( MaybeOptional< USampledImage1DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DU2Rgba8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU2Rgba8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjOffset( MaybeOptional< USampledImage1DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DU2Rg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU2Rg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjOffset( MaybeOptional< USampledImage1DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DU2Rg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU2Rg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjOffset( MaybeOptional< USampledImage1DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DU2Rg8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU2Rg8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjOffset( MaybeOptional< USampledImage1DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DU2R32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU2R32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjOffset( MaybeOptional< USampledImage1DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DU2R16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU2R16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjOffset( MaybeOptional< USampledImage1DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DU2R8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU2R8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjOffset( MaybeOptional< USampledImage1DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DU4Rgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU4Rgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjOffset( MaybeOptional< USampledImage1DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DU4Rgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU4Rgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjOffset( MaybeOptional< USampledImage1DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DU4Rgba8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU4Rgba8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjOffset( MaybeOptional< USampledImage1DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DU4Rg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU4Rg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjOffset( MaybeOptional< USampledImage1DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DU4Rg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU4Rg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjOffset( MaybeOptional< USampledImage1DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DU4Rg8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU4Rg8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjOffset( MaybeOptional< USampledImage1DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DU4R32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU4R32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjOffset( MaybeOptional< USampledImage1DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DU4R16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU4R16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjOffset( MaybeOptional< USampledImage1DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset1DU4R8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset1DU4R8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjOffset( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DU3Rgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU3Rgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjOffset( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DU3Rgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU3Rgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjOffset( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DU3Rgba8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU3Rgba8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjOffset( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DU3Rg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU3Rg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjOffset( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DU3Rg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU3Rg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjOffset( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DU3Rg8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU3Rg8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjOffset( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DU3R32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU3R32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjOffset( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DU3R16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU3R16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjOffset( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DU3R8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU3R8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjOffset( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DU4Rgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU4Rgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjOffset( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DU4Rgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU4Rgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjOffset( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DU4Rgba8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU4Rgba8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjOffset( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DU4Rg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU4Rg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjOffset( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DU4Rg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU4Rg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjOffset( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DU4Rg8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU4Rg8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjOffset( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DU4R32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU4R32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjOffset( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DU4R16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU4R16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjOffset( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset2DU4R8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset2DU4R8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjOffset( MaybeOptional< USampledImage3DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset3DURgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DURgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjOffset( MaybeOptional< USampledImage3DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset3DURgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DURgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjOffset( MaybeOptional< USampledImage3DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset3DURgba8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DURgba8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjOffset( MaybeOptional< USampledImage3DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset3DURg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DURg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjOffset( MaybeOptional< USampledImage3DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset3DURg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DURg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjOffset( MaybeOptional< USampledImage3DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset3DURg8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec2{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DURg8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjOffset( MaybeOptional< USampledImage3DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset3DUR32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DUR32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjOffset( MaybeOptional< USampledImage3DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset3DUR16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DUR16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjOffset( MaybeOptional< USampledImage3DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, offset )
				, expr::makeTextureProjOffset3DUR8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UInt{ findShader( image, P, offset )
			, expr::makeTextureProjOffset3DUR8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjOffset( MaybeOptional< SampledImage1DShadowR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, offset )
				, expr::makeTextureProjOffset1DShadowFR32( findTypesCache( image, P, refZ, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, offset ) };
		}

		return Float{ findShader( image, P, refZ, offset )
			, expr::makeTextureProjOffset1DShadowFR32( findTypesCache( image, P, refZ, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjOffset( MaybeOptional< SampledImage1DShadowR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, offset )
				, expr::makeTextureProjOffset1DShadowFR16( findTypesCache( image, P, refZ, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, offset ) };
		}

		return Float{ findShader( image, P, refZ, offset )
			, expr::makeTextureProjOffset1DShadowFR16( findTypesCache( image, P, refZ, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjOffset( MaybeOptional< SampledImage2DShadowR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, offset )
				, expr::makeTextureProjOffset2DShadowFR32( findTypesCache( image, P, refZ, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, offset ) };
		}

		return Float{ findShader( image, P, refZ, offset )
			, expr::makeTextureProjOffset2DShadowFR32( findTypesCache( image, P, refZ, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjOffset( MaybeOptional< SampledImage2DShadowR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, offset )
				, expr::makeTextureProjOffset2DShadowFR16( findTypesCache( image, P, refZ, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, offset ) };
		}

		return Float{ findShader( image, P, refZ, offset )
			, expr::makeTextureProjOffset2DShadowFR16( findTypesCache( image, P, refZ, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureProjOffsetBias
	/**
	*name
	*	textureProjOffsetBias
	*/
	/**@{*/
	MaybeOptional< Vec4 > textureProjOffset( MaybeOptional< SampledImage1DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DF2BiasRgba32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DF2BiasRgba32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > textureProjOffset( MaybeOptional< SampledImage1DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DF2BiasRgba16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DF2BiasRgba16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > textureProjOffset( MaybeOptional< SampledImage1DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DF2BiasRg32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DF2BiasRg32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > textureProjOffset( MaybeOptional< SampledImage1DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DF2BiasRg16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DF2BiasRg16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureProjOffset( MaybeOptional< SampledImage1DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Float >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DF2BiasR32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DF2BiasR32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureProjOffset( MaybeOptional< SampledImage1DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Float >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DF2BiasR16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DF2BiasR16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > textureProjOffset( MaybeOptional< SampledImage1DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DF4BiasRgba32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DF4BiasRgba32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > textureProjOffset( MaybeOptional< SampledImage1DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DF4BiasRgba16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DF4BiasRgba16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > textureProjOffset( MaybeOptional< SampledImage1DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DF4BiasRg32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DF4BiasRg32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > textureProjOffset( MaybeOptional< SampledImage1DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DF4BiasRg16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DF4BiasRg16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureProjOffset( MaybeOptional< SampledImage1DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Float >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DF4BiasR32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DF4BiasR32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureProjOffset( MaybeOptional< SampledImage1DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Float >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DF4BiasR16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DF4BiasR16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > textureProjOffset( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DF3BiasRgba32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DF3BiasRgba32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > textureProjOffset( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DF3BiasRgba16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DF3BiasRgba16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > textureProjOffset( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DF3BiasRg32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DF3BiasRg32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > textureProjOffset( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DF3BiasRg16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DF3BiasRg16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureProjOffset( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Float >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DF3BiasR32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DF3BiasR32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureProjOffset( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Float >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DF3BiasR16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DF3BiasR16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > textureProjOffset( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DF4BiasRgba32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DF4BiasRgba32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > textureProjOffset( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DF4BiasRgba16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DF4BiasRgba16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > textureProjOffset( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DF4BiasRg32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DF4BiasRg32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > textureProjOffset( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DF4BiasRg16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DF4BiasRg16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureProjOffset( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Float >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DF4BiasR32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DF4BiasR32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureProjOffset( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Float >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DF4BiasR16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DF4BiasR16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > textureProjOffset( MaybeOptional< SampledImage3DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset3DFBiasRgba32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DFBiasRgba32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec4 > textureProjOffset( MaybeOptional< SampledImage3DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset3DFBiasRgba16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DFBiasRgba16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > textureProjOffset( MaybeOptional< SampledImage3DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset3DFBiasRg32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DFBiasRg32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Vec2 > textureProjOffset( MaybeOptional< SampledImage3DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Vec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset3DFBiasRg16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Vec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DFBiasRg16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureProjOffset( MaybeOptional< SampledImage3DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Float >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset3DFBiasR32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DFBiasR32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureProjOffset( MaybeOptional< SampledImage3DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Float >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset3DFBiasR16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Float{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DFBiasR16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureProjOffset( MaybeOptional< ISampledImage1DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DI2BiasRgba32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI2BiasRgba32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureProjOffset( MaybeOptional< ISampledImage1DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DI2BiasRgba16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI2BiasRgba16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureProjOffset( MaybeOptional< ISampledImage1DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DI2BiasRgba8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI2BiasRgba8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureProjOffset( MaybeOptional< ISampledImage1DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DI2BiasRg32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI2BiasRg32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureProjOffset( MaybeOptional< ISampledImage1DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DI2BiasRg16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI2BiasRg16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureProjOffset( MaybeOptional< ISampledImage1DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DI2BiasRg8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI2BiasRg8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureProjOffset( MaybeOptional< ISampledImage1DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Int >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DI2BiasR32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI2BiasR32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureProjOffset( MaybeOptional< ISampledImage1DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Int >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DI2BiasR16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI2BiasR16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureProjOffset( MaybeOptional< ISampledImage1DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Int >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DI2BiasR8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI2BiasR8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureProjOffset( MaybeOptional< ISampledImage1DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DI4BiasRgba32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI4BiasRgba32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureProjOffset( MaybeOptional< ISampledImage1DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DI4BiasRgba16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI4BiasRgba16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureProjOffset( MaybeOptional< ISampledImage1DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DI4BiasRgba8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI4BiasRgba8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureProjOffset( MaybeOptional< ISampledImage1DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DI4BiasRg32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI4BiasRg32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureProjOffset( MaybeOptional< ISampledImage1DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DI4BiasRg16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI4BiasRg16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureProjOffset( MaybeOptional< ISampledImage1DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DI4BiasRg8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI4BiasRg8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureProjOffset( MaybeOptional< ISampledImage1DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Int >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DI4BiasR32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI4BiasR32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureProjOffset( MaybeOptional< ISampledImage1DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Int >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DI4BiasR16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI4BiasR16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureProjOffset( MaybeOptional< ISampledImage1DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Int >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DI4BiasR8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DI4BiasR8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureProjOffset( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DI3BiasRgba32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI3BiasRgba32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureProjOffset( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DI3BiasRgba16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI3BiasRgba16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureProjOffset( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DI3BiasRgba8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI3BiasRgba8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureProjOffset( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DI3BiasRg32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI3BiasRg32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureProjOffset( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DI3BiasRg16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI3BiasRg16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureProjOffset( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DI3BiasRg8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI3BiasRg8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureProjOffset( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Int >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DI3BiasR32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI3BiasR32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureProjOffset( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Int >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DI3BiasR16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI3BiasR16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureProjOffset( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Int >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DI3BiasR8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI3BiasR8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureProjOffset( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DI4BiasRgba32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI4BiasRgba32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureProjOffset( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DI4BiasRgba16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI4BiasRgba16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureProjOffset( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DI4BiasRgba8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI4BiasRgba8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureProjOffset( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DI4BiasRg32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI4BiasRg32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureProjOffset( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DI4BiasRg16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI4BiasRg16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureProjOffset( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DI4BiasRg8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI4BiasRg8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureProjOffset( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Int >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DI4BiasR32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI4BiasR32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureProjOffset( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Int >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DI4BiasR16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI4BiasR16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureProjOffset( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Int >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DI4BiasR8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DI4BiasR8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureProjOffset( MaybeOptional< ISampledImage3DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset3DIBiasRgba32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DIBiasRgba32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureProjOffset( MaybeOptional< ISampledImage3DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset3DIBiasRgba16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DIBiasRgba16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec4 > textureProjOffset( MaybeOptional< ISampledImage3DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset3DIBiasRgba8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DIBiasRgba8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureProjOffset( MaybeOptional< ISampledImage3DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset3DIBiasRg32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DIBiasRg32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureProjOffset( MaybeOptional< ISampledImage3DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset3DIBiasRg16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DIBiasRg16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< IVec2 > textureProjOffset( MaybeOptional< ISampledImage3DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< IVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset3DIBiasRg8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return IVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DIBiasRg8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureProjOffset( MaybeOptional< ISampledImage3DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Int >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset3DIBiasR32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DIBiasR32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureProjOffset( MaybeOptional< ISampledImage3DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Int >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset3DIBiasR16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DIBiasR16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Int > textureProjOffset( MaybeOptional< ISampledImage3DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< Int >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset3DIBiasR8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return Int{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DIBiasR8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureProjOffset( MaybeOptional< USampledImage1DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DU2BiasRgba32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU2BiasRgba32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureProjOffset( MaybeOptional< USampledImage1DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DU2BiasRgba16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU2BiasRgba16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureProjOffset( MaybeOptional< USampledImage1DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DU2BiasRgba8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU2BiasRgba8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureProjOffset( MaybeOptional< USampledImage1DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DU2BiasRg32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU2BiasRg32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureProjOffset( MaybeOptional< USampledImage1DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DU2BiasRg16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU2BiasRg16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureProjOffset( MaybeOptional< USampledImage1DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DU2BiasRg8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU2BiasRg8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureProjOffset( MaybeOptional< USampledImage1DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DU2BiasR32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU2BiasR32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureProjOffset( MaybeOptional< USampledImage1DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DU2BiasR16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU2BiasR16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureProjOffset( MaybeOptional< USampledImage1DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DU2BiasR8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU2BiasR8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureProjOffset( MaybeOptional< USampledImage1DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DU4BiasRgba32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU4BiasRgba32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureProjOffset( MaybeOptional< USampledImage1DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DU4BiasRgba16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU4BiasRgba16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureProjOffset( MaybeOptional< USampledImage1DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DU4BiasRgba8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU4BiasRgba8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureProjOffset( MaybeOptional< USampledImage1DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DU4BiasRg32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU4BiasRg32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureProjOffset( MaybeOptional< USampledImage1DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DU4BiasRg16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU4BiasRg16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureProjOffset( MaybeOptional< USampledImage1DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DU4BiasRg8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU4BiasRg8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureProjOffset( MaybeOptional< USampledImage1DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DU4BiasR32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU4BiasR32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureProjOffset( MaybeOptional< USampledImage1DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DU4BiasR16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU4BiasR16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureProjOffset( MaybeOptional< USampledImage1DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset1DU4BiasR8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset1DU4BiasR8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureProjOffset( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DU3BiasRgba32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU3BiasRgba32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureProjOffset( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DU3BiasRgba16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU3BiasRgba16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureProjOffset( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DU3BiasRgba8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU3BiasRgba8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureProjOffset( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DU3BiasRg32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU3BiasRg32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureProjOffset( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DU3BiasRg16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU3BiasRg16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureProjOffset( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DU3BiasRg8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU3BiasRg8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureProjOffset( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DU3BiasR32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU3BiasR32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureProjOffset( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DU3BiasR16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU3BiasR16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureProjOffset( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DU3BiasR8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU3BiasR8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureProjOffset( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DU4BiasRgba32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU4BiasRgba32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureProjOffset( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DU4BiasRgba16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU4BiasRgba16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureProjOffset( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DU4BiasRgba8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU4BiasRgba8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureProjOffset( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DU4BiasRg32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU4BiasRg32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureProjOffset( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DU4BiasRg16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU4BiasRg16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureProjOffset( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DU4BiasRg8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU4BiasRg8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureProjOffset( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DU4BiasR32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU4BiasR32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureProjOffset( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DU4BiasR16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU4BiasR16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureProjOffset( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset2DU4BiasR8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset2DU4BiasR8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureProjOffset( MaybeOptional< USampledImage3DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset3DUBiasRgba32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DUBiasRgba32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureProjOffset( MaybeOptional< USampledImage3DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset3DUBiasRgba16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DUBiasRgba16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec4 > textureProjOffset( MaybeOptional< USampledImage3DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset3DUBiasRgba8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec4{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DUBiasRgba8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureProjOffset( MaybeOptional< USampledImage3DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset3DUBiasRg32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DUBiasRg32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureProjOffset( MaybeOptional< USampledImage3DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset3DUBiasRg16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DUBiasRg16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UVec2 > textureProjOffset( MaybeOptional< USampledImage3DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UVec2 >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset3DUBiasRg8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UVec2{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DUBiasRg8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureProjOffset( MaybeOptional< USampledImage3DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset3DUBiasR32( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DUBiasR32( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureProjOffset( MaybeOptional< USampledImage3DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset3DUBiasR16( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DUBiasR16( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< UInt > textureProjOffset( MaybeOptional< USampledImage3DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< IVec3 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, offset, bias ) )
		{
			return Optional< UInt >{ findShader( image, P, offset, bias )
				, expr::makeTextureProjOffset3DUBiasR8( findTypesCache( image, P, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, offset, bias ) };
		}

		return UInt{ findShader( image, P, offset, bias )
			, expr::makeTextureProjOffset3DUBiasR8( findTypesCache( image, P, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureProjOffset( MaybeOptional< SampledImage1DShadowR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, refZ, offset, bias ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, offset, bias )
				, expr::makeTextureProjOffset1DShadowFBiasR32( findTypesCache( image, P, refZ, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, refZ, offset, bias ) };
		}

		return Float{ findShader( image, P, refZ, offset, bias )
			, expr::makeTextureProjOffset1DShadowFBiasR32( findTypesCache( image, P, refZ, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureProjOffset( MaybeOptional< SampledImage1DShadowR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Int > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, refZ, offset, bias ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, offset, bias )
				, expr::makeTextureProjOffset1DShadowFBiasR16( findTypesCache( image, P, refZ, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, refZ, offset, bias ) };
		}

		return Float{ findShader( image, P, refZ, offset, bias )
			, expr::makeTextureProjOffset1DShadowFBiasR16( findTypesCache( image, P, refZ, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureProjOffset( MaybeOptional< SampledImage2DShadowR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, refZ, offset, bias ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, offset, bias )
				, expr::makeTextureProjOffset2DShadowFBiasR32( findTypesCache( image, P, refZ, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, refZ, offset, bias ) };
		}

		return Float{ findShader( image, P, refZ, offset, bias )
			, expr::makeTextureProjOffset2DShadowFBiasR32( findTypesCache( image, P, refZ, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	MaybeOptional< Float > textureProjOffset( MaybeOptional< SampledImage2DShadowR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Float > const & bias )
	{
		if ( isAnyOptional( image, P, refZ, offset, bias ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, offset, bias )
				, expr::makeTextureProjOffset2DShadowFBiasR16( findTypesCache( image, P, refZ, offset, bias )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( offset )
					, makeExpr( bias ) )
				, areOptionalEnabled( image, P, refZ, offset, bias ) };
		}

		return Float{ findShader( image, P, refZ, offset, bias )
			, expr::makeTextureProjOffset2DShadowFBiasR16( findTypesCache( image, P, refZ, offset, bias )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset )
				, makeExpr( bias ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureLodOffset
	/**
	*name
	*	textureLodOffset
	*/
	/**@{*/
	MaybeOptional< Vec4 > textureLodOffset( MaybeOptional< SampledImage1DRgba32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DFRgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DFRgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureLodOffset( MaybeOptional< SampledImage1DRgba16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DFRgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DFRgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureLodOffset( MaybeOptional< SampledImage1DRg32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DFRg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DFRg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureLodOffset( MaybeOptional< SampledImage1DRg16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DFRg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DFRg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureLodOffset( MaybeOptional< SampledImage1DR32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DFR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DFR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureLodOffset( MaybeOptional< SampledImage1DR16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DFR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DFR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureLodOffset( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DFRgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DFRgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureLodOffset( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DFRgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DFRgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureLodOffset( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DFRg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DFRg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureLodOffset( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DFRg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DFRg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureLodOffset( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DFR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DFR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureLodOffset( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DFR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DFR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureLodOffset( MaybeOptional< SampledImage3DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset3DFRgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DFRgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureLodOffset( MaybeOptional< SampledImage3DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset3DFRgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DFRgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureLodOffset( MaybeOptional< SampledImage3DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset3DFRg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DFRg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureLodOffset( MaybeOptional< SampledImage3DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset3DFRg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DFRg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureLodOffset( MaybeOptional< SampledImage3DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset3DFR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DFR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureLodOffset( MaybeOptional< SampledImage3DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset3DFR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DFR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureLodOffset( MaybeOptional< SampledImage1DArrayRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DArrayFRgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayFRgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureLodOffset( MaybeOptional< SampledImage1DArrayRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DArrayFRgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayFRgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureLodOffset( MaybeOptional< SampledImage1DArrayRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DArrayFRg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayFRg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureLodOffset( MaybeOptional< SampledImage1DArrayRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DArrayFRg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayFRg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureLodOffset( MaybeOptional< SampledImage1DArrayR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DArrayFR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayFR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureLodOffset( MaybeOptional< SampledImage1DArrayR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DArrayFR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayFR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureLodOffset( MaybeOptional< SampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DArrayFRgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayFRgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureLodOffset( MaybeOptional< SampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DArrayFRgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayFRgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureLodOffset( MaybeOptional< SampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DArrayFRg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayFRg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureLodOffset( MaybeOptional< SampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DArrayFRg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayFRg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureLodOffset( MaybeOptional< SampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DArrayFR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayFR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureLodOffset( MaybeOptional< SampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DArrayFR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayFR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureLodOffset( MaybeOptional< ISampledImage1DRgba32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DIRgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DIRgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureLodOffset( MaybeOptional< ISampledImage1DRgba16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DIRgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DIRgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureLodOffset( MaybeOptional< ISampledImage1DRgba8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DIRgba8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DIRgba8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureLodOffset( MaybeOptional< ISampledImage1DRg32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DIRg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DIRg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureLodOffset( MaybeOptional< ISampledImage1DRg16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DIRg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DIRg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureLodOffset( MaybeOptional< ISampledImage1DRg8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DIRg8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DIRg8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureLodOffset( MaybeOptional< ISampledImage1DR32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DIR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DIR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureLodOffset( MaybeOptional< ISampledImage1DR16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DIR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DIR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureLodOffset( MaybeOptional< ISampledImage1DR8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DIR8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DIR8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureLodOffset( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DIRgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DIRgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureLodOffset( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DIRgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DIRgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureLodOffset( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DIRgba8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DIRgba8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureLodOffset( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DIRg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DIRg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureLodOffset( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DIRg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DIRg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureLodOffset( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DIRg8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DIRg8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureLodOffset( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DIR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DIR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureLodOffset( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DIR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DIR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureLodOffset( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DIR8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DIR8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureLodOffset( MaybeOptional< ISampledImage3DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset3DIRgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DIRgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureLodOffset( MaybeOptional< ISampledImage3DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset3DIRgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DIRgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureLodOffset( MaybeOptional< ISampledImage3DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset3DIRgba8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DIRgba8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureLodOffset( MaybeOptional< ISampledImage3DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset3DIRg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DIRg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureLodOffset( MaybeOptional< ISampledImage3DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset3DIRg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DIRg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureLodOffset( MaybeOptional< ISampledImage3DRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset3DIRg8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DIRg8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureLodOffset( MaybeOptional< ISampledImage3DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset3DIR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DIR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureLodOffset( MaybeOptional< ISampledImage3DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset3DIR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DIR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureLodOffset( MaybeOptional< ISampledImage3DR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset3DIR8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DIR8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureLodOffset( MaybeOptional< ISampledImage1DArrayRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DArrayIRgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayIRgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureLodOffset( MaybeOptional< ISampledImage1DArrayRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DArrayIRgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayIRgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureLodOffset( MaybeOptional< ISampledImage1DArrayRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DArrayIRgba8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayIRgba8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureLodOffset( MaybeOptional< ISampledImage1DArrayRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DArrayIRg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayIRg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureLodOffset( MaybeOptional< ISampledImage1DArrayRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DArrayIRg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayIRg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureLodOffset( MaybeOptional< ISampledImage1DArrayRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DArrayIRg8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayIRg8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureLodOffset( MaybeOptional< ISampledImage1DArrayR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DArrayIR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayIR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureLodOffset( MaybeOptional< ISampledImage1DArrayR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DArrayIR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayIR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureLodOffset( MaybeOptional< ISampledImage1DArrayR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DArrayIR8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayIR8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureLodOffset( MaybeOptional< ISampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DArrayIRgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayIRgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureLodOffset( MaybeOptional< ISampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DArrayIRgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayIRgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureLodOffset( MaybeOptional< ISampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DArrayIRgba8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayIRgba8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureLodOffset( MaybeOptional< ISampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DArrayIRg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayIRg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureLodOffset( MaybeOptional< ISampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DArrayIRg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayIRg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureLodOffset( MaybeOptional< ISampledImage2DArrayRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DArrayIRg8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayIRg8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureLodOffset( MaybeOptional< ISampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DArrayIR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayIR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureLodOffset( MaybeOptional< ISampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DArrayIR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayIR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureLodOffset( MaybeOptional< ISampledImage2DArrayR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DArrayIR8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayIR8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureLodOffset( MaybeOptional< USampledImage1DRgba32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DURgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DURgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureLodOffset( MaybeOptional< USampledImage1DRgba16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DURgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DURgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureLodOffset( MaybeOptional< USampledImage1DRgba8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DURgba8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DURgba8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureLodOffset( MaybeOptional< USampledImage1DRg32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DURg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DURg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureLodOffset( MaybeOptional< USampledImage1DRg16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DURg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DURg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureLodOffset( MaybeOptional< USampledImage1DRg8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DURg8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DURg8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureLodOffset( MaybeOptional< USampledImage1DR32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DUR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DUR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureLodOffset( MaybeOptional< USampledImage1DR16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DUR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DUR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureLodOffset( MaybeOptional< USampledImage1DR8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DUR8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DUR8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureLodOffset( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DURgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DURgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureLodOffset( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DURgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DURgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureLodOffset( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DURgba8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DURgba8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureLodOffset( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DURg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DURg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureLodOffset( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DURg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DURg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureLodOffset( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DURg8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DURg8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureLodOffset( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DUR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DUR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureLodOffset( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DUR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DUR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureLodOffset( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DUR8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DUR8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureLodOffset( MaybeOptional< USampledImage3DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset3DURgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DURgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureLodOffset( MaybeOptional< USampledImage3DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset3DURgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DURgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureLodOffset( MaybeOptional< USampledImage3DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset3DURgba8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DURgba8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureLodOffset( MaybeOptional< USampledImage3DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset3DURg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DURg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureLodOffset( MaybeOptional< USampledImage3DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset3DURg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DURg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureLodOffset( MaybeOptional< USampledImage3DRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset3DURg8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DURg8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureLodOffset( MaybeOptional< USampledImage3DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset3DUR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DUR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureLodOffset( MaybeOptional< USampledImage3DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset3DUR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DUR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureLodOffset( MaybeOptional< USampledImage3DR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset3DUR8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset3DUR8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureLodOffset( MaybeOptional< USampledImage1DArrayRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DArrayURgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayURgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureLodOffset( MaybeOptional< USampledImage1DArrayRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DArrayURgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayURgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureLodOffset( MaybeOptional< USampledImage1DArrayRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DArrayURgba8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayURgba8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureLodOffset( MaybeOptional< USampledImage1DArrayRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DArrayURg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayURg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureLodOffset( MaybeOptional< USampledImage1DArrayRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DArrayURg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayURg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureLodOffset( MaybeOptional< USampledImage1DArrayRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DArrayURg8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayURg8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureLodOffset( MaybeOptional< USampledImage1DArrayR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DArrayUR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayUR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureLodOffset( MaybeOptional< USampledImage1DArrayR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DArrayUR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayUR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureLodOffset( MaybeOptional< USampledImage1DArrayR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset1DArrayUR8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset1DArrayUR8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureLodOffset( MaybeOptional< USampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DArrayURgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayURgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureLodOffset( MaybeOptional< USampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DArrayURgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayURgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureLodOffset( MaybeOptional< USampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DArrayURgba8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayURgba8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureLodOffset( MaybeOptional< USampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DArrayURg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayURg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureLodOffset( MaybeOptional< USampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DArrayURg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayURg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureLodOffset( MaybeOptional< USampledImage2DArrayRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DArrayURg8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayURg8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureLodOffset( MaybeOptional< USampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DArrayUR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayUR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureLodOffset( MaybeOptional< USampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DArrayUR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayUR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureLodOffset( MaybeOptional< USampledImage2DArrayR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTextureLodOffset2DArrayUR8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureLodOffset2DArrayUR8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureLodOffset( MaybeOptional< SampledImage1DShadowR32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, lod, offset )
				, expr::makeTextureLodOffset1DShadowFR32( findTypesCache( image, P, refZ, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, lod, offset ) };
		}

		return Float{ findShader( image, P, refZ, lod, offset )
			, expr::makeTextureLodOffset1DShadowFR32( findTypesCache( image, P, refZ, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureLodOffset( MaybeOptional< SampledImage1DShadowR16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, lod, offset )
				, expr::makeTextureLodOffset1DShadowFR16( findTypesCache( image, P, refZ, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, lod, offset ) };
		}

		return Float{ findShader( image, P, refZ, lod, offset )
			, expr::makeTextureLodOffset1DShadowFR16( findTypesCache( image, P, refZ, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureLodOffset( MaybeOptional< SampledImage2DShadowR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, lod, offset )
				, expr::makeTextureLodOffset2DShadowFR32( findTypesCache( image, P, refZ, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, lod, offset ) };
		}

		return Float{ findShader( image, P, refZ, lod, offset )
			, expr::makeTextureLodOffset2DShadowFR32( findTypesCache( image, P, refZ, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureLodOffset( MaybeOptional< SampledImage2DShadowR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, lod, offset )
				, expr::makeTextureLodOffset2DShadowFR16( findTypesCache( image, P, refZ, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, lod, offset ) };
		}

		return Float{ findShader( image, P, refZ, lod, offset )
			, expr::makeTextureLodOffset2DShadowFR16( findTypesCache( image, P, refZ, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureLodOffset( MaybeOptional< SampledImage1DArrayShadowR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, lod, offset )
				, expr::makeTextureLodOffset1DArrayShadowFR32( findTypesCache( image, P, refZ, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, lod, offset ) };
		}

		return Float{ findShader( image, P, refZ, lod, offset )
			, expr::makeTextureLodOffset1DArrayShadowFR32( findTypesCache( image, P, refZ, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureLodOffset( MaybeOptional< SampledImage1DArrayShadowR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, lod, offset )
				, expr::makeTextureLodOffset1DArrayShadowFR16( findTypesCache( image, P, refZ, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, lod, offset ) };
		}

		return Float{ findShader( image, P, refZ, lod, offset )
			, expr::makeTextureLodOffset1DArrayShadowFR16( findTypesCache( image, P, refZ, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureProjLod
	/**
	*name
	*	textureProjLod
	*/
	/**@{*/
	MaybeOptional< Vec4 > textureProjLod( MaybeOptional< SampledImage1DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DF2Rgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DF2Rgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > textureProjLod( MaybeOptional< SampledImage1DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DF2Rgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DF2Rgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > textureProjLod( MaybeOptional< SampledImage1DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DF2Rg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DF2Rg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > textureProjLod( MaybeOptional< SampledImage1DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DF2Rg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DF2Rg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureProjLod( MaybeOptional< SampledImage1DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DF2R32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DF2R32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureProjLod( MaybeOptional< SampledImage1DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DF2R16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DF2R16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > textureProjLod( MaybeOptional< SampledImage1DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DF4Rgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DF4Rgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > textureProjLod( MaybeOptional< SampledImage1DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DF4Rgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DF4Rgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > textureProjLod( MaybeOptional< SampledImage1DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DF4Rg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DF4Rg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > textureProjLod( MaybeOptional< SampledImage1DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DF4Rg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DF4Rg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureProjLod( MaybeOptional< SampledImage1DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DF4R32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DF4R32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureProjLod( MaybeOptional< SampledImage1DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DF4R16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DF4R16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > textureProjLod( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DF3Rgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DF3Rgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > textureProjLod( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DF3Rgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DF3Rgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > textureProjLod( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DF3Rg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DF3Rg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > textureProjLod( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DF3Rg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DF3Rg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureProjLod( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DF3R32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DF3R32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureProjLod( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DF3R16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DF3R16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > textureProjLod( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DF4Rgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DF4Rgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > textureProjLod( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DF4Rgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DF4Rgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > textureProjLod( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DF4Rg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DF4Rg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > textureProjLod( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DF4Rg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DF4Rg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureProjLod( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DF4R32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DF4R32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureProjLod( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DF4R16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DF4R16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > textureProjLod( MaybeOptional< SampledImage3DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod3DFRgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DFRgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec4 > textureProjLod( MaybeOptional< SampledImage3DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod3DFRgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DFRgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > textureProjLod( MaybeOptional< SampledImage3DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod3DFRg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DFRg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Vec2 > textureProjLod( MaybeOptional< SampledImage3DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod3DFRg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Vec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DFRg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureProjLod( MaybeOptional< SampledImage3DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTextureProjLod3DFR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DFR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureProjLod( MaybeOptional< SampledImage3DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Float >{ findShader( image, P, lod )
				, expr::makeTextureProjLod3DFR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Float{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DFR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureProjLod( MaybeOptional< ISampledImage1DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DI2Rgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI2Rgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureProjLod( MaybeOptional< ISampledImage1DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DI2Rgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI2Rgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureProjLod( MaybeOptional< ISampledImage1DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DI2Rgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI2Rgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureProjLod( MaybeOptional< ISampledImage1DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DI2Rg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI2Rg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureProjLod( MaybeOptional< ISampledImage1DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DI2Rg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI2Rg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureProjLod( MaybeOptional< ISampledImage1DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DI2Rg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI2Rg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureProjLod( MaybeOptional< ISampledImage1DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DI2R32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI2R32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureProjLod( MaybeOptional< ISampledImage1DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DI2R16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI2R16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureProjLod( MaybeOptional< ISampledImage1DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DI2R8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI2R8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureProjLod( MaybeOptional< ISampledImage1DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DI4Rgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI4Rgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureProjLod( MaybeOptional< ISampledImage1DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DI4Rgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI4Rgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureProjLod( MaybeOptional< ISampledImage1DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DI4Rgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI4Rgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureProjLod( MaybeOptional< ISampledImage1DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DI4Rg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI4Rg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureProjLod( MaybeOptional< ISampledImage1DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DI4Rg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI4Rg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureProjLod( MaybeOptional< ISampledImage1DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DI4Rg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI4Rg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureProjLod( MaybeOptional< ISampledImage1DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DI4R32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI4R32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureProjLod( MaybeOptional< ISampledImage1DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DI4R16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI4R16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureProjLod( MaybeOptional< ISampledImage1DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DI4R8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DI4R8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureProjLod( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DI3Rgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI3Rgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureProjLod( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DI3Rgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI3Rgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureProjLod( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DI3Rgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI3Rgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureProjLod( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DI3Rg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI3Rg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureProjLod( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DI3Rg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI3Rg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureProjLod( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DI3Rg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI3Rg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureProjLod( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DI3R32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI3R32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureProjLod( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DI3R16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI3R16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureProjLod( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DI3R8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI3R8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureProjLod( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DI4Rgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI4Rgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureProjLod( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DI4Rgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI4Rgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureProjLod( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DI4Rgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI4Rgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureProjLod( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DI4Rg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI4Rg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureProjLod( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DI4Rg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI4Rg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureProjLod( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DI4Rg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI4Rg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureProjLod( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DI4R32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI4R32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureProjLod( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DI4R16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI4R16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureProjLod( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DI4R8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DI4R8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureProjLod( MaybeOptional< ISampledImage3DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod3DIRgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DIRgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureProjLod( MaybeOptional< ISampledImage3DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod3DIRgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DIRgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec4 > textureProjLod( MaybeOptional< ISampledImage3DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod3DIRgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DIRgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureProjLod( MaybeOptional< ISampledImage3DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod3DIRg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DIRg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureProjLod( MaybeOptional< ISampledImage3DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod3DIRg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DIRg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< IVec2 > textureProjLod( MaybeOptional< ISampledImage3DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod3DIRg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return IVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DIRg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureProjLod( MaybeOptional< ISampledImage3DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureProjLod3DIR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DIR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureProjLod( MaybeOptional< ISampledImage3DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureProjLod3DIR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DIR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Int > textureProjLod( MaybeOptional< ISampledImage3DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< Int >{ findShader( image, P, lod )
				, expr::makeTextureProjLod3DIR8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return Int{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DIR8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureProjLod( MaybeOptional< USampledImage1DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DU2Rgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU2Rgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureProjLod( MaybeOptional< USampledImage1DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DU2Rgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU2Rgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureProjLod( MaybeOptional< USampledImage1DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DU2Rgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU2Rgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureProjLod( MaybeOptional< USampledImage1DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DU2Rg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU2Rg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureProjLod( MaybeOptional< USampledImage1DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DU2Rg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU2Rg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureProjLod( MaybeOptional< USampledImage1DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DU2Rg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU2Rg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureProjLod( MaybeOptional< USampledImage1DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DU2R32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU2R32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureProjLod( MaybeOptional< USampledImage1DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DU2R16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU2R16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureProjLod( MaybeOptional< USampledImage1DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DU2R8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU2R8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureProjLod( MaybeOptional< USampledImage1DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DU4Rgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU4Rgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureProjLod( MaybeOptional< USampledImage1DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DU4Rgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU4Rgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureProjLod( MaybeOptional< USampledImage1DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DU4Rgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU4Rgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureProjLod( MaybeOptional< USampledImage1DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DU4Rg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU4Rg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureProjLod( MaybeOptional< USampledImage1DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DU4Rg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU4Rg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureProjLod( MaybeOptional< USampledImage1DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DU4Rg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU4Rg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureProjLod( MaybeOptional< USampledImage1DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DU4R32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU4R32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureProjLod( MaybeOptional< USampledImage1DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DU4R16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU4R16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureProjLod( MaybeOptional< USampledImage1DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureProjLod1DU4R8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureProjLod1DU4R8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureProjLod( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DU3Rgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU3Rgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureProjLod( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DU3Rgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU3Rgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureProjLod( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DU3Rgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU3Rgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureProjLod( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DU3Rg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU3Rg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureProjLod( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DU3Rg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU3Rg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureProjLod( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DU3Rg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU3Rg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureProjLod( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DU3R32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU3R32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureProjLod( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DU3R16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU3R16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureProjLod( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DU3R8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU3R8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureProjLod( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DU4Rgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU4Rgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureProjLod( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DU4Rgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU4Rgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureProjLod( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DU4Rgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU4Rgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureProjLod( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DU4Rg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU4Rg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureProjLod( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DU4Rg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU4Rg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureProjLod( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DU4Rg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU4Rg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureProjLod( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DU4R32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU4R32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureProjLod( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DU4R16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU4R16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureProjLod( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureProjLod2DU4R8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureProjLod2DU4R8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureProjLod( MaybeOptional< USampledImage3DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod3DURgba32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DURgba32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureProjLod( MaybeOptional< USampledImage3DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod3DURgba16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DURgba16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec4 > textureProjLod( MaybeOptional< USampledImage3DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod3DURgba8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec4{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DURgba8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureProjLod( MaybeOptional< USampledImage3DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod3DURg32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DURg32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureProjLod( MaybeOptional< USampledImage3DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod3DURg16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DURg16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UVec2 > textureProjLod( MaybeOptional< USampledImage3DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod )
				, expr::makeTextureProjLod3DURg8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UVec2{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DURg8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureProjLod( MaybeOptional< USampledImage3DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureProjLod3DUR32( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DUR32( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureProjLod( MaybeOptional< USampledImage3DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureProjLod3DUR16( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DUR16( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< UInt > textureProjLod( MaybeOptional< USampledImage3DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, lod ) )
		{
			return Optional< UInt >{ findShader( image, P, lod )
				, expr::makeTextureProjLod3DUR8( findTypesCache( image, P, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, lod ) };
		}

		return UInt{ findShader( image, P, lod )
			, expr::makeTextureProjLod3DUR8( findTypesCache( image, P, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureProjLod( MaybeOptional< SampledImage1DShadowR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, refZ, lod ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, lod )
				, expr::makeTextureProjLod1DShadowFR32( findTypesCache( image, P, refZ, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, refZ, lod ) };
		}

		return Float{ findShader( image, P, refZ, lod )
			, expr::makeTextureProjLod1DShadowFR32( findTypesCache( image, P, refZ, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureProjLod( MaybeOptional< SampledImage1DShadowR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, refZ, lod ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, lod )
				, expr::makeTextureProjLod1DShadowFR16( findTypesCache( image, P, refZ, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, refZ, lod ) };
		}

		return Float{ findShader( image, P, refZ, lod )
			, expr::makeTextureProjLod1DShadowFR16( findTypesCache( image, P, refZ, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureProjLod( MaybeOptional< SampledImage2DShadowR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, refZ, lod ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, lod )
				, expr::makeTextureProjLod2DShadowFR32( findTypesCache( image, P, refZ, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, refZ, lod ) };
		}

		return Float{ findShader( image, P, refZ, lod )
			, expr::makeTextureProjLod2DShadowFR32( findTypesCache( image, P, refZ, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod ) ) };
	}
	MaybeOptional< Float > textureProjLod( MaybeOptional< SampledImage2DShadowR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & lod )
	{
		if ( isAnyOptional( image, P, refZ, lod ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, lod )
				, expr::makeTextureProjLod2DShadowFR16( findTypesCache( image, P, refZ, lod )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( lod ) )
				, areOptionalEnabled( image, P, refZ, lod ) };
		}

		return Float{ findShader( image, P, refZ, lod )
			, expr::makeTextureProjLod2DShadowFR16( findTypesCache( image, P, refZ, lod )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureProjLodOffset
	/**
	*name
	*	textureProjLodOffset
	*/
	/**@{*/
	MaybeOptional< Vec4 > textureProjLodOffset( MaybeOptional< SampledImage1DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DF2Rgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DF2Rgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureProjLodOffset( MaybeOptional< SampledImage1DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DF2Rgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DF2Rgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureProjLodOffset( MaybeOptional< SampledImage1DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DF2Rg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DF2Rg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureProjLodOffset( MaybeOptional< SampledImage1DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DF2Rg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DF2Rg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjLodOffset( MaybeOptional< SampledImage1DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DF2R32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DF2R32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjLodOffset( MaybeOptional< SampledImage1DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DF2R16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DF2R16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureProjLodOffset( MaybeOptional< SampledImage1DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DF4Rgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DF4Rgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureProjLodOffset( MaybeOptional< SampledImage1DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DF4Rgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DF4Rgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureProjLodOffset( MaybeOptional< SampledImage1DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DF4Rg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DF4Rg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureProjLodOffset( MaybeOptional< SampledImage1DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DF4Rg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DF4Rg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjLodOffset( MaybeOptional< SampledImage1DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DF4R32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DF4R32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjLodOffset( MaybeOptional< SampledImage1DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DF4R16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DF4R16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureProjLodOffset( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DF3Rgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DF3Rgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureProjLodOffset( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DF3Rgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DF3Rgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureProjLodOffset( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DF3Rg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DF3Rg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureProjLodOffset( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DF3Rg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DF3Rg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjLodOffset( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DF3R32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DF3R32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjLodOffset( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DF3R16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DF3R16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureProjLodOffset( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DF4Rgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DF4Rgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureProjLodOffset( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DF4Rgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DF4Rgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureProjLodOffset( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DF4Rg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DF4Rg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureProjLodOffset( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DF4Rg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DF4Rg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjLodOffset( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DF4R32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DF4R32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjLodOffset( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DF4R16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DF4R16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureProjLodOffset( MaybeOptional< SampledImage3DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset3DFRgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DFRgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureProjLodOffset( MaybeOptional< SampledImage3DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset3DFRgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DFRgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureProjLodOffset( MaybeOptional< SampledImage3DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset3DFRg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DFRg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureProjLodOffset( MaybeOptional< SampledImage3DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset3DFRg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Vec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DFRg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjLodOffset( MaybeOptional< SampledImage3DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset3DFR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DFR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjLodOffset( MaybeOptional< SampledImage3DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset3DFR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Float{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DFR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjLodOffset( MaybeOptional< ISampledImage1DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DI2Rgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI2Rgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjLodOffset( MaybeOptional< ISampledImage1DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DI2Rgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI2Rgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjLodOffset( MaybeOptional< ISampledImage1DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DI2Rgba8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI2Rgba8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjLodOffset( MaybeOptional< ISampledImage1DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DI2Rg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI2Rg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjLodOffset( MaybeOptional< ISampledImage1DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DI2Rg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI2Rg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjLodOffset( MaybeOptional< ISampledImage1DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DI2Rg8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI2Rg8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjLodOffset( MaybeOptional< ISampledImage1DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DI2R32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI2R32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjLodOffset( MaybeOptional< ISampledImage1DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DI2R16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI2R16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjLodOffset( MaybeOptional< ISampledImage1DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DI2R8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI2R8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjLodOffset( MaybeOptional< ISampledImage1DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DI4Rgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI4Rgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjLodOffset( MaybeOptional< ISampledImage1DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DI4Rgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI4Rgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjLodOffset( MaybeOptional< ISampledImage1DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DI4Rgba8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI4Rgba8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjLodOffset( MaybeOptional< ISampledImage1DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DI4Rg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI4Rg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjLodOffset( MaybeOptional< ISampledImage1DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DI4Rg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI4Rg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjLodOffset( MaybeOptional< ISampledImage1DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DI4Rg8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI4Rg8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjLodOffset( MaybeOptional< ISampledImage1DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DI4R32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI4R32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjLodOffset( MaybeOptional< ISampledImage1DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DI4R16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI4R16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjLodOffset( MaybeOptional< ISampledImage1DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DI4R8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DI4R8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjLodOffset( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DI3Rgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI3Rgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjLodOffset( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DI3Rgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI3Rgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjLodOffset( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DI3Rgba8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI3Rgba8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjLodOffset( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DI3Rg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI3Rg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjLodOffset( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DI3Rg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI3Rg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjLodOffset( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DI3Rg8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI3Rg8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjLodOffset( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DI3R32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI3R32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjLodOffset( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DI3R16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI3R16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjLodOffset( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DI3R8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI3R8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjLodOffset( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DI4Rgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI4Rgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjLodOffset( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DI4Rgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI4Rgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjLodOffset( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DI4Rgba8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI4Rgba8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjLodOffset( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DI4Rg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI4Rg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjLodOffset( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DI4Rg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI4Rg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjLodOffset( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DI4Rg8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI4Rg8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjLodOffset( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DI4R32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI4R32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjLodOffset( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DI4R16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI4R16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjLodOffset( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DI4R8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DI4R8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjLodOffset( MaybeOptional< ISampledImage3DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset3DIRgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DIRgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjLodOffset( MaybeOptional< ISampledImage3DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset3DIRgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DIRgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjLodOffset( MaybeOptional< ISampledImage3DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset3DIRgba8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DIRgba8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjLodOffset( MaybeOptional< ISampledImage3DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset3DIRg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DIRg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjLodOffset( MaybeOptional< ISampledImage3DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset3DIRg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DIRg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjLodOffset( MaybeOptional< ISampledImage3DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset3DIRg8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return IVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DIRg8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjLodOffset( MaybeOptional< ISampledImage3DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset3DIR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DIR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjLodOffset( MaybeOptional< ISampledImage3DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset3DIR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DIR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjLodOffset( MaybeOptional< ISampledImage3DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< Int >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset3DIR8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return Int{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DIR8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjLodOffset( MaybeOptional< USampledImage1DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DU2Rgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU2Rgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjLodOffset( MaybeOptional< USampledImage1DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DU2Rgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU2Rgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjLodOffset( MaybeOptional< USampledImage1DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DU2Rgba8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU2Rgba8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjLodOffset( MaybeOptional< USampledImage1DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DU2Rg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU2Rg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjLodOffset( MaybeOptional< USampledImage1DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DU2Rg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU2Rg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjLodOffset( MaybeOptional< USampledImage1DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DU2Rg8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU2Rg8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjLodOffset( MaybeOptional< USampledImage1DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DU2R32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU2R32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjLodOffset( MaybeOptional< USampledImage1DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DU2R16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU2R16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjLodOffset( MaybeOptional< USampledImage1DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DU2R8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU2R8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjLodOffset( MaybeOptional< USampledImage1DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DU4Rgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU4Rgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjLodOffset( MaybeOptional< USampledImage1DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DU4Rgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU4Rgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjLodOffset( MaybeOptional< USampledImage1DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DU4Rgba8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU4Rgba8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjLodOffset( MaybeOptional< USampledImage1DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DU4Rg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU4Rg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjLodOffset( MaybeOptional< USampledImage1DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DU4Rg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU4Rg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjLodOffset( MaybeOptional< USampledImage1DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DU4Rg8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU4Rg8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjLodOffset( MaybeOptional< USampledImage1DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DU4R32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU4R32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjLodOffset( MaybeOptional< USampledImage1DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DU4R16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU4R16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjLodOffset( MaybeOptional< USampledImage1DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset1DU4R8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset1DU4R8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjLodOffset( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DU3Rgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU3Rgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjLodOffset( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DU3Rgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU3Rgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjLodOffset( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DU3Rgba8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU3Rgba8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjLodOffset( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DU3Rg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU3Rg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjLodOffset( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DU3Rg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU3Rg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjLodOffset( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DU3Rg8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU3Rg8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjLodOffset( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DU3R32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU3R32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjLodOffset( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DU3R16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU3R16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjLodOffset( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DU3R8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU3R8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjLodOffset( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DU4Rgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU4Rgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjLodOffset( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DU4Rgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU4Rgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjLodOffset( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DU4Rgba8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU4Rgba8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjLodOffset( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DU4Rg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU4Rg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjLodOffset( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DU4Rg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU4Rg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjLodOffset( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DU4Rg8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU4Rg8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjLodOffset( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DU4R32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU4R32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjLodOffset( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DU4R16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU4R16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjLodOffset( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset2DU4R8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset2DU4R8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjLodOffset( MaybeOptional< USampledImage3DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset3DURgba32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DURgba32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjLodOffset( MaybeOptional< USampledImage3DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset3DURgba16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DURgba16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjLodOffset( MaybeOptional< USampledImage3DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset3DURgba8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec4{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DURgba8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjLodOffset( MaybeOptional< USampledImage3DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset3DURg32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DURg32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjLodOffset( MaybeOptional< USampledImage3DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset3DURg16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DURg16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjLodOffset( MaybeOptional< USampledImage3DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset3DURg8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UVec2{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DURg8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjLodOffset( MaybeOptional< USampledImage3DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset3DUR32( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DUR32( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjLodOffset( MaybeOptional< USampledImage3DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset3DUR16( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DUR16( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjLodOffset( MaybeOptional< USampledImage3DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, lod, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, lod, offset )
				, expr::makeTextureProjLodOffset3DUR8( findTypesCache( image, P, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, lod, offset ) };
		}

		return UInt{ findShader( image, P, lod, offset )
			, expr::makeTextureProjLodOffset3DUR8( findTypesCache( image, P, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjLodOffset( MaybeOptional< SampledImage1DShadowR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, lod, offset )
				, expr::makeTextureProjLodOffset1DShadowFR32( findTypesCache( image, P, refZ, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, lod, offset ) };
		}

		return Float{ findShader( image, P, refZ, lod, offset )
			, expr::makeTextureProjLodOffset1DShadowFR32( findTypesCache( image, P, refZ, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjLodOffset( MaybeOptional< SampledImage1DShadowR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & lod
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, lod, offset )
				, expr::makeTextureProjLodOffset1DShadowFR16( findTypesCache( image, P, refZ, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, lod, offset ) };
		}

		return Float{ findShader( image, P, refZ, lod, offset )
			, expr::makeTextureProjLodOffset1DShadowFR16( findTypesCache( image, P, refZ, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjLodOffset( MaybeOptional< SampledImage2DShadowR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, lod, offset )
				, expr::makeTextureProjLodOffset2DShadowFR32( findTypesCache( image, P, refZ, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, lod, offset ) };
		}

		return Float{ findShader( image, P, refZ, lod, offset )
			, expr::makeTextureProjLodOffset2DShadowFR32( findTypesCache( image, P, refZ, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjLodOffset( MaybeOptional< SampledImage2DShadowR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & lod
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, lod, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, lod, offset )
				, expr::makeTextureProjLodOffset2DShadowFR16( findTypesCache( image, P, refZ, lod, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( lod )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, lod, offset ) };
		}

		return Float{ findShader( image, P, refZ, lod, offset )
			, expr::makeTextureProjLodOffset2DShadowFR16( findTypesCache( image, P, refZ, lod, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( lod )
				, makeExpr( offset ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureGrad
	/**
	*name
	*	textureGrad
	*/
	/**@{*/
	MaybeOptional< Vec4 > textureGrad( MaybeOptional< SampledImage1DRgba32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DFRgba32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DFRgba32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Vec4 > textureGrad( MaybeOptional< SampledImage1DRgba16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DFRgba16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DFRgba16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Vec2 > textureGrad( MaybeOptional< SampledImage1DRg32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DFRg32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DFRg32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Vec2 > textureGrad( MaybeOptional< SampledImage1DRg16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DFRg16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DFRg16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Float > textureGrad( MaybeOptional< SampledImage1DR32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DFR32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DFR32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Float > textureGrad( MaybeOptional< SampledImage1DR16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DFR16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DFR16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Vec4 > textureGrad( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DFRgba32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DFRgba32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Vec4 > textureGrad( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DFRgba16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DFRgba16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Vec2 > textureGrad( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DFRg32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DFRg32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Vec2 > textureGrad( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DFRg16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DFRg16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Float > textureGrad( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DFR32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DFR32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Float > textureGrad( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DFR16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DFR16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Vec4 > textureGrad( MaybeOptional< SampledImage3DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad3DFRgba32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DFRgba32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Vec4 > textureGrad( MaybeOptional< SampledImage3DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad3DFRgba16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DFRgba16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Vec2 > textureGrad( MaybeOptional< SampledImage3DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad3DFRg32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DFRg32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Vec2 > textureGrad( MaybeOptional< SampledImage3DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad3DFRg16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DFRg16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Float > textureGrad( MaybeOptional< SampledImage3DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad3DFR32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DFR32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Float > textureGrad( MaybeOptional< SampledImage3DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad3DFR16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DFR16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Vec4 > textureGrad( MaybeOptional< SampledImageCubeRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeFRgba32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeFRgba32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Vec4 > textureGrad( MaybeOptional< SampledImageCubeRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeFRgba16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeFRgba16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Vec2 > textureGrad( MaybeOptional< SampledImageCubeRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeFRg32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeFRg32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Vec2 > textureGrad( MaybeOptional< SampledImageCubeRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeFRg16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeFRg16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Float > textureGrad( MaybeOptional< SampledImageCubeR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeFR32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeFR32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Float > textureGrad( MaybeOptional< SampledImageCubeR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeFR16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeFR16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Vec4 > textureGrad( MaybeOptional< SampledImage1DArrayRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DArrayFRgba32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayFRgba32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Vec4 > textureGrad( MaybeOptional< SampledImage1DArrayRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DArrayFRgba16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayFRgba16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Vec2 > textureGrad( MaybeOptional< SampledImage1DArrayRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DArrayFRg32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayFRg32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Vec2 > textureGrad( MaybeOptional< SampledImage1DArrayRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DArrayFRg16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayFRg16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Float > textureGrad( MaybeOptional< SampledImage1DArrayR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DArrayFR32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayFR32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Float > textureGrad( MaybeOptional< SampledImage1DArrayR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DArrayFR16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayFR16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Vec4 > textureGrad( MaybeOptional< SampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DArrayFRgba32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayFRgba32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Vec4 > textureGrad( MaybeOptional< SampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DArrayFRgba16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayFRgba16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Vec2 > textureGrad( MaybeOptional< SampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DArrayFRg32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayFRg32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Vec2 > textureGrad( MaybeOptional< SampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DArrayFRg16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayFRg16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Float > textureGrad( MaybeOptional< SampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DArrayFR32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayFR32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Float > textureGrad( MaybeOptional< SampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DArrayFR16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayFR16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Vec4 > textureGrad( MaybeOptional< SampledImageCubeArrayRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeArrayFRgba32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayFRgba32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Vec4 > textureGrad( MaybeOptional< SampledImageCubeArrayRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeArrayFRgba16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayFRgba16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Vec2 > textureGrad( MaybeOptional< SampledImageCubeArrayRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeArrayFRg32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayFRg32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Vec2 > textureGrad( MaybeOptional< SampledImageCubeArrayRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeArrayFRg16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayFRg16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Float > textureGrad( MaybeOptional< SampledImageCubeArrayR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeArrayFR32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayFR32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Float > textureGrad( MaybeOptional< SampledImageCubeArrayR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeArrayFR16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayFR16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec4 > textureGrad( MaybeOptional< ISampledImage1DRgba32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DIRgba32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DIRgba32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec4 > textureGrad( MaybeOptional< ISampledImage1DRgba16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DIRgba16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DIRgba16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec4 > textureGrad( MaybeOptional< ISampledImage1DRgba8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DIRgba8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DIRgba8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec2 > textureGrad( MaybeOptional< ISampledImage1DRg32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DIRg32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DIRg32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec2 > textureGrad( MaybeOptional< ISampledImage1DRg16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DIRg16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DIRg16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec2 > textureGrad( MaybeOptional< ISampledImage1DRg8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DIRg8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DIRg8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Int > textureGrad( MaybeOptional< ISampledImage1DR32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DIR32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DIR32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Int > textureGrad( MaybeOptional< ISampledImage1DR16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DIR16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DIR16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Int > textureGrad( MaybeOptional< ISampledImage1DR8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DIR8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DIR8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec4 > textureGrad( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DIRgba32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DIRgba32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec4 > textureGrad( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DIRgba16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DIRgba16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec4 > textureGrad( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DIRgba8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DIRgba8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec2 > textureGrad( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DIRg32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DIRg32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec2 > textureGrad( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DIRg16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DIRg16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec2 > textureGrad( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DIRg8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DIRg8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Int > textureGrad( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DIR32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DIR32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Int > textureGrad( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DIR16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DIR16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Int > textureGrad( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DIR8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DIR8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec4 > textureGrad( MaybeOptional< ISampledImage3DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad3DIRgba32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DIRgba32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec4 > textureGrad( MaybeOptional< ISampledImage3DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad3DIRgba16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DIRgba16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec4 > textureGrad( MaybeOptional< ISampledImage3DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad3DIRgba8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DIRgba8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec2 > textureGrad( MaybeOptional< ISampledImage3DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad3DIRg32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DIRg32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec2 > textureGrad( MaybeOptional< ISampledImage3DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad3DIRg16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DIRg16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec2 > textureGrad( MaybeOptional< ISampledImage3DRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad3DIRg8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DIRg8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Int > textureGrad( MaybeOptional< ISampledImage3DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad3DIR32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DIR32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Int > textureGrad( MaybeOptional< ISampledImage3DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad3DIR16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DIR16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Int > textureGrad( MaybeOptional< ISampledImage3DR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad3DIR8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DIR8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec4 > textureGrad( MaybeOptional< ISampledImageCubeRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeIRgba32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeIRgba32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec4 > textureGrad( MaybeOptional< ISampledImageCubeRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeIRgba16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeIRgba16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec4 > textureGrad( MaybeOptional< ISampledImageCubeRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeIRgba8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeIRgba8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec2 > textureGrad( MaybeOptional< ISampledImageCubeRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeIRg32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeIRg32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec2 > textureGrad( MaybeOptional< ISampledImageCubeRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeIRg16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeIRg16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec2 > textureGrad( MaybeOptional< ISampledImageCubeRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeIRg8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeIRg8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Int > textureGrad( MaybeOptional< ISampledImageCubeR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeIR32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeIR32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Int > textureGrad( MaybeOptional< ISampledImageCubeR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeIR16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeIR16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Int > textureGrad( MaybeOptional< ISampledImageCubeR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeIR8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeIR8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec4 > textureGrad( MaybeOptional< ISampledImage1DArrayRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DArrayIRgba32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayIRgba32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec4 > textureGrad( MaybeOptional< ISampledImage1DArrayRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DArrayIRgba16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayIRgba16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec4 > textureGrad( MaybeOptional< ISampledImage1DArrayRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DArrayIRgba8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayIRgba8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec2 > textureGrad( MaybeOptional< ISampledImage1DArrayRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DArrayIRg32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayIRg32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec2 > textureGrad( MaybeOptional< ISampledImage1DArrayRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DArrayIRg16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayIRg16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec2 > textureGrad( MaybeOptional< ISampledImage1DArrayRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DArrayIRg8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayIRg8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Int > textureGrad( MaybeOptional< ISampledImage1DArrayR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DArrayIR32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayIR32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Int > textureGrad( MaybeOptional< ISampledImage1DArrayR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DArrayIR16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayIR16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Int > textureGrad( MaybeOptional< ISampledImage1DArrayR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DArrayIR8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayIR8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec4 > textureGrad( MaybeOptional< ISampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DArrayIRgba32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayIRgba32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec4 > textureGrad( MaybeOptional< ISampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DArrayIRgba16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayIRgba16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec4 > textureGrad( MaybeOptional< ISampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DArrayIRgba8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayIRgba8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec2 > textureGrad( MaybeOptional< ISampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DArrayIRg32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayIRg32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec2 > textureGrad( MaybeOptional< ISampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DArrayIRg16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayIRg16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec2 > textureGrad( MaybeOptional< ISampledImage2DArrayRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DArrayIRg8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayIRg8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Int > textureGrad( MaybeOptional< ISampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DArrayIR32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayIR32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Int > textureGrad( MaybeOptional< ISampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DArrayIR16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayIR16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Int > textureGrad( MaybeOptional< ISampledImage2DArrayR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DArrayIR8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayIR8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec4 > textureGrad( MaybeOptional< ISampledImageCubeArrayRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeArrayIRgba32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayIRgba32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec4 > textureGrad( MaybeOptional< ISampledImageCubeArrayRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeArrayIRgba16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayIRgba16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec4 > textureGrad( MaybeOptional< ISampledImageCubeArrayRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeArrayIRgba8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayIRgba8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec2 > textureGrad( MaybeOptional< ISampledImageCubeArrayRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeArrayIRg32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayIRg32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec2 > textureGrad( MaybeOptional< ISampledImageCubeArrayRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeArrayIRg16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayIRg16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< IVec2 > textureGrad( MaybeOptional< ISampledImageCubeArrayRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeArrayIRg8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayIRg8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Int > textureGrad( MaybeOptional< ISampledImageCubeArrayR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeArrayIR32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayIR32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Int > textureGrad( MaybeOptional< ISampledImageCubeArrayR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeArrayIR16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayIR16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Int > textureGrad( MaybeOptional< ISampledImageCubeArrayR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeArrayIR8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayIR8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec4 > textureGrad( MaybeOptional< USampledImage1DRgba32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DURgba32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DURgba32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec4 > textureGrad( MaybeOptional< USampledImage1DRgba16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DURgba16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DURgba16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec4 > textureGrad( MaybeOptional< USampledImage1DRgba8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DURgba8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DURgba8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec2 > textureGrad( MaybeOptional< USampledImage1DRg32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DURg32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DURg32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec2 > textureGrad( MaybeOptional< USampledImage1DRg16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DURg16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DURg16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec2 > textureGrad( MaybeOptional< USampledImage1DRg8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DURg8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DURg8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UInt > textureGrad( MaybeOptional< USampledImage1DR32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DUR32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DUR32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UInt > textureGrad( MaybeOptional< USampledImage1DR16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DUR16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DUR16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UInt > textureGrad( MaybeOptional< USampledImage1DR8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DUR8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DUR8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec4 > textureGrad( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DURgba32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DURgba32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec4 > textureGrad( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DURgba16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DURgba16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec4 > textureGrad( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DURgba8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DURgba8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec2 > textureGrad( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DURg32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DURg32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec2 > textureGrad( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DURg16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DURg16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec2 > textureGrad( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DURg8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DURg8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UInt > textureGrad( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DUR32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DUR32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UInt > textureGrad( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DUR16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DUR16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UInt > textureGrad( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DUR8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DUR8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec4 > textureGrad( MaybeOptional< USampledImage3DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad3DURgba32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DURgba32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec4 > textureGrad( MaybeOptional< USampledImage3DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad3DURgba16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DURgba16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec4 > textureGrad( MaybeOptional< USampledImage3DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad3DURgba8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DURgba8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec2 > textureGrad( MaybeOptional< USampledImage3DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad3DURg32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DURg32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec2 > textureGrad( MaybeOptional< USampledImage3DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad3DURg16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DURg16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec2 > textureGrad( MaybeOptional< USampledImage3DRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad3DURg8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DURg8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UInt > textureGrad( MaybeOptional< USampledImage3DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad3DUR32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DUR32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UInt > textureGrad( MaybeOptional< USampledImage3DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad3DUR16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DUR16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UInt > textureGrad( MaybeOptional< USampledImage3DR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad3DUR8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad3DUR8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec4 > textureGrad( MaybeOptional< USampledImageCubeRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeURgba32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeURgba32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec4 > textureGrad( MaybeOptional< USampledImageCubeRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeURgba16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeURgba16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec4 > textureGrad( MaybeOptional< USampledImageCubeRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeURgba8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeURgba8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec2 > textureGrad( MaybeOptional< USampledImageCubeRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeURg32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeURg32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec2 > textureGrad( MaybeOptional< USampledImageCubeRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeURg16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeURg16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec2 > textureGrad( MaybeOptional< USampledImageCubeRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeURg8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeURg8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UInt > textureGrad( MaybeOptional< USampledImageCubeR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeUR32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeUR32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UInt > textureGrad( MaybeOptional< USampledImageCubeR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeUR16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeUR16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UInt > textureGrad( MaybeOptional< USampledImageCubeR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeUR8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeUR8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec4 > textureGrad( MaybeOptional< USampledImage1DArrayRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DArrayURgba32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayURgba32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec4 > textureGrad( MaybeOptional< USampledImage1DArrayRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DArrayURgba16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayURgba16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec4 > textureGrad( MaybeOptional< USampledImage1DArrayRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DArrayURgba8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayURgba8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec2 > textureGrad( MaybeOptional< USampledImage1DArrayRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DArrayURg32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayURg32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec2 > textureGrad( MaybeOptional< USampledImage1DArrayRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DArrayURg16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayURg16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec2 > textureGrad( MaybeOptional< USampledImage1DArrayRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DArrayURg8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayURg8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UInt > textureGrad( MaybeOptional< USampledImage1DArrayR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DArrayUR32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayUR32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UInt > textureGrad( MaybeOptional< USampledImage1DArrayR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DArrayUR16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayUR16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UInt > textureGrad( MaybeOptional< USampledImage1DArrayR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad1DArrayUR8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayUR8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec4 > textureGrad( MaybeOptional< USampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DArrayURgba32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayURgba32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec4 > textureGrad( MaybeOptional< USampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DArrayURgba16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayURgba16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec4 > textureGrad( MaybeOptional< USampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DArrayURgba8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayURgba8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec2 > textureGrad( MaybeOptional< USampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DArrayURg32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayURg32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec2 > textureGrad( MaybeOptional< USampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DArrayURg16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayURg16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec2 > textureGrad( MaybeOptional< USampledImage2DArrayRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DArrayURg8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayURg8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UInt > textureGrad( MaybeOptional< USampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DArrayUR32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayUR32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UInt > textureGrad( MaybeOptional< USampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DArrayUR16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayUR16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UInt > textureGrad( MaybeOptional< USampledImage2DArrayR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGrad2DArrayUR8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGrad2DArrayUR8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec4 > textureGrad( MaybeOptional< USampledImageCubeArrayRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeArrayURgba32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayURgba32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec4 > textureGrad( MaybeOptional< USampledImageCubeArrayRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeArrayURgba16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayURgba16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec4 > textureGrad( MaybeOptional< USampledImageCubeArrayRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeArrayURgba8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayURgba8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec2 > textureGrad( MaybeOptional< USampledImageCubeArrayRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeArrayURg32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayURg32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec2 > textureGrad( MaybeOptional< USampledImageCubeArrayRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeArrayURg16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayURg16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UVec2 > textureGrad( MaybeOptional< USampledImageCubeArrayRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeArrayURg8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayURg8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UInt > textureGrad( MaybeOptional< USampledImageCubeArrayR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeArrayUR32( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayUR32( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UInt > textureGrad( MaybeOptional< USampledImageCubeArrayR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeArrayUR16( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayUR16( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< UInt > textureGrad( MaybeOptional< USampledImageCubeArrayR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy )
				, expr::makeTextureGradCubeArrayUR8( findTypesCache( image, P, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, dPdx, dPdy ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy )
			, expr::makeTextureGradCubeArrayUR8( findTypesCache( image, P, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Float > textureGrad( MaybeOptional< SampledImage1DShadowR32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, refZ, dPdx, dPdy ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, dPdx, dPdy )
				, expr::makeTextureGrad1DShadowFR32( findTypesCache( image, P, refZ, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, refZ, dPdx, dPdy ) };
		}

		return Float{ findShader( image, P, refZ, dPdx, dPdy )
			, expr::makeTextureGrad1DShadowFR32( findTypesCache( image, P, refZ, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Float > textureGrad( MaybeOptional< SampledImage1DShadowR16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, refZ, dPdx, dPdy ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, dPdx, dPdy )
				, expr::makeTextureGrad1DShadowFR16( findTypesCache( image, P, refZ, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, refZ, dPdx, dPdy ) };
		}

		return Float{ findShader( image, P, refZ, dPdx, dPdy )
			, expr::makeTextureGrad1DShadowFR16( findTypesCache( image, P, refZ, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Float > textureGrad( MaybeOptional< SampledImage2DShadowR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, refZ, dPdx, dPdy ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, dPdx, dPdy )
				, expr::makeTextureGrad2DShadowFR32( findTypesCache( image, P, refZ, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, refZ, dPdx, dPdy ) };
		}

		return Float{ findShader( image, P, refZ, dPdx, dPdy )
			, expr::makeTextureGrad2DShadowFR32( findTypesCache( image, P, refZ, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Float > textureGrad( MaybeOptional< SampledImage2DShadowR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy )
	{
		if ( isAnyOptional( image, P, refZ, dPdx, dPdy ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, dPdx, dPdy )
				, expr::makeTextureGrad2DShadowFR16( findTypesCache( image, P, refZ, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, refZ, dPdx, dPdy ) };
		}

		return Float{ findShader( image, P, refZ, dPdx, dPdy )
			, expr::makeTextureGrad2DShadowFR16( findTypesCache( image, P, refZ, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Float > textureGrad( MaybeOptional< SampledImage1DArrayShadowR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, refZ, dPdx, dPdy ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, dPdx, dPdy )
				, expr::makeTextureGrad1DArrayShadowFR32( findTypesCache( image, P, refZ, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, refZ, dPdx, dPdy ) };
		}

		return Float{ findShader( image, P, refZ, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayShadowFR32( findTypesCache( image, P, refZ, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	MaybeOptional< Float > textureGrad( MaybeOptional< SampledImage1DArrayShadowR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy )
	{
		if ( isAnyOptional( image, P, refZ, dPdx, dPdy ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, dPdx, dPdy )
				, expr::makeTextureGrad1DArrayShadowFR16( findTypesCache( image, P, refZ, dPdx, dPdy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( dPdx )
					, makeExpr( dPdy ) )
				, areOptionalEnabled( image, P, refZ, dPdx, dPdy ) };
		}

		return Float{ findShader( image, P, refZ, dPdx, dPdy )
			, expr::makeTextureGrad1DArrayShadowFR16( findTypesCache( image, P, refZ, dPdx, dPdy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureGradOffset
	/**
	*name
	*	textureGradOffset
	*/
	/**@{*/
	MaybeOptional< Vec4 > textureGradOffset( MaybeOptional< SampledImage1DRgba32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DFRgba32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DFRgba32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureGradOffset( MaybeOptional< SampledImage1DRgba16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DFRgba16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DFRgba16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureGradOffset( MaybeOptional< SampledImage1DRg32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DFRg32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DFRg32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureGradOffset( MaybeOptional< SampledImage1DRg16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DFRg16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DFRg16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureGradOffset( MaybeOptional< SampledImage1DR32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DFR32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DFR32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureGradOffset( MaybeOptional< SampledImage1DR16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DFR16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DFR16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureGradOffset( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DFRgba32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DFRgba32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureGradOffset( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DFRgba16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DFRgba16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureGradOffset( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DFRg32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DFRg32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureGradOffset( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DFRg16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DFRg16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureGradOffset( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DFR32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DFR32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureGradOffset( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DFR16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DFR16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureGradOffset( MaybeOptional< SampledImage3DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset3DFRgba32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DFRgba32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureGradOffset( MaybeOptional< SampledImage3DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset3DFRgba16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DFRgba16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureGradOffset( MaybeOptional< SampledImage3DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset3DFRg32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DFRg32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureGradOffset( MaybeOptional< SampledImage3DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset3DFRg16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DFRg16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureGradOffset( MaybeOptional< SampledImage3DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset3DFR32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DFR32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureGradOffset( MaybeOptional< SampledImage3DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset3DFR16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DFR16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureGradOffset( MaybeOptional< SampledImage1DArrayRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DArrayFRgba32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayFRgba32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureGradOffset( MaybeOptional< SampledImage1DArrayRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DArrayFRgba16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayFRgba16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureGradOffset( MaybeOptional< SampledImage1DArrayRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DArrayFRg32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayFRg32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureGradOffset( MaybeOptional< SampledImage1DArrayRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DArrayFRg16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayFRg16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureGradOffset( MaybeOptional< SampledImage1DArrayR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DArrayFR32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayFR32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureGradOffset( MaybeOptional< SampledImage1DArrayR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DArrayFR16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayFR16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureGradOffset( MaybeOptional< SampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DArrayFRgba32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayFRgba32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureGradOffset( MaybeOptional< SampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DArrayFRgba16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayFRgba16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureGradOffset( MaybeOptional< SampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DArrayFRg32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayFRg32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureGradOffset( MaybeOptional< SampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DArrayFRg16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayFRg16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureGradOffset( MaybeOptional< SampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DArrayFR32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayFR32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureGradOffset( MaybeOptional< SampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DArrayFR16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayFR16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGradOffset( MaybeOptional< ISampledImage1DRgba32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DIRgba32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DIRgba32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGradOffset( MaybeOptional< ISampledImage1DRgba16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DIRgba16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DIRgba16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGradOffset( MaybeOptional< ISampledImage1DRgba8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DIRgba8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DIRgba8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureGradOffset( MaybeOptional< ISampledImage1DRg32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DIRg32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DIRg32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureGradOffset( MaybeOptional< ISampledImage1DRg16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DIRg16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DIRg16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureGradOffset( MaybeOptional< ISampledImage1DRg8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DIRg8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DIRg8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureGradOffset( MaybeOptional< ISampledImage1DR32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DIR32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DIR32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureGradOffset( MaybeOptional< ISampledImage1DR16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DIR16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DIR16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureGradOffset( MaybeOptional< ISampledImage1DR8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DIR8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DIR8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGradOffset( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DIRgba32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DIRgba32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGradOffset( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DIRgba16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DIRgba16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGradOffset( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DIRgba8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DIRgba8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureGradOffset( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DIRg32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DIRg32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureGradOffset( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DIRg16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DIRg16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureGradOffset( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DIRg8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DIRg8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureGradOffset( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DIR32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DIR32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureGradOffset( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DIR16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DIR16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureGradOffset( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DIR8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DIR8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGradOffset( MaybeOptional< ISampledImage3DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset3DIRgba32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DIRgba32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGradOffset( MaybeOptional< ISampledImage3DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset3DIRgba16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DIRgba16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGradOffset( MaybeOptional< ISampledImage3DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset3DIRgba8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DIRgba8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureGradOffset( MaybeOptional< ISampledImage3DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset3DIRg32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DIRg32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureGradOffset( MaybeOptional< ISampledImage3DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset3DIRg16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DIRg16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureGradOffset( MaybeOptional< ISampledImage3DRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset3DIRg8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DIRg8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureGradOffset( MaybeOptional< ISampledImage3DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset3DIR32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DIR32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureGradOffset( MaybeOptional< ISampledImage3DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset3DIR16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DIR16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureGradOffset( MaybeOptional< ISampledImage3DR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset3DIR8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DIR8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGradOffset( MaybeOptional< ISampledImage1DArrayRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DArrayIRgba32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayIRgba32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGradOffset( MaybeOptional< ISampledImage1DArrayRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DArrayIRgba16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayIRgba16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGradOffset( MaybeOptional< ISampledImage1DArrayRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DArrayIRgba8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayIRgba8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureGradOffset( MaybeOptional< ISampledImage1DArrayRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DArrayIRg32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayIRg32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureGradOffset( MaybeOptional< ISampledImage1DArrayRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DArrayIRg16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayIRg16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureGradOffset( MaybeOptional< ISampledImage1DArrayRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DArrayIRg8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayIRg8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureGradOffset( MaybeOptional< ISampledImage1DArrayR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DArrayIR32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayIR32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureGradOffset( MaybeOptional< ISampledImage1DArrayR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DArrayIR16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayIR16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureGradOffset( MaybeOptional< ISampledImage1DArrayR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DArrayIR8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayIR8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGradOffset( MaybeOptional< ISampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DArrayIRgba32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayIRgba32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGradOffset( MaybeOptional< ISampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DArrayIRgba16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayIRgba16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGradOffset( MaybeOptional< ISampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DArrayIRgba8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayIRgba8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureGradOffset( MaybeOptional< ISampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DArrayIRg32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayIRg32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureGradOffset( MaybeOptional< ISampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DArrayIRg16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayIRg16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureGradOffset( MaybeOptional< ISampledImage2DArrayRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DArrayIRg8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayIRg8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureGradOffset( MaybeOptional< ISampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DArrayIR32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayIR32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureGradOffset( MaybeOptional< ISampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DArrayIR16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayIR16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureGradOffset( MaybeOptional< ISampledImage2DArrayR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DArrayIR8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayIR8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGradOffset( MaybeOptional< USampledImage1DRgba32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DURgba32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DURgba32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGradOffset( MaybeOptional< USampledImage1DRgba16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DURgba16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DURgba16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGradOffset( MaybeOptional< USampledImage1DRgba8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DURgba8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DURgba8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureGradOffset( MaybeOptional< USampledImage1DRg32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DURg32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DURg32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureGradOffset( MaybeOptional< USampledImage1DRg16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DURg16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DURg16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureGradOffset( MaybeOptional< USampledImage1DRg8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DURg8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DURg8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureGradOffset( MaybeOptional< USampledImage1DR32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DUR32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DUR32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureGradOffset( MaybeOptional< USampledImage1DR16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DUR16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DUR16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureGradOffset( MaybeOptional< USampledImage1DR8 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DUR8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DUR8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGradOffset( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DURgba32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DURgba32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGradOffset( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DURgba16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DURgba16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGradOffset( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DURgba8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DURgba8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureGradOffset( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DURg32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DURg32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureGradOffset( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DURg16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DURg16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureGradOffset( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DURg8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DURg8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureGradOffset( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DUR32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DUR32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureGradOffset( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DUR16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DUR16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureGradOffset( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DUR8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DUR8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGradOffset( MaybeOptional< USampledImage3DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset3DURgba32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DURgba32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGradOffset( MaybeOptional< USampledImage3DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset3DURgba16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DURgba16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGradOffset( MaybeOptional< USampledImage3DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset3DURgba8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DURgba8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureGradOffset( MaybeOptional< USampledImage3DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset3DURg32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DURg32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureGradOffset( MaybeOptional< USampledImage3DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset3DURg16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DURg16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureGradOffset( MaybeOptional< USampledImage3DRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset3DURg8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DURg8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureGradOffset( MaybeOptional< USampledImage3DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset3DUR32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DUR32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureGradOffset( MaybeOptional< USampledImage3DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset3DUR16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DUR16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureGradOffset( MaybeOptional< USampledImage3DR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset3DUR8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset3DUR8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGradOffset( MaybeOptional< USampledImage1DArrayRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DArrayURgba32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayURgba32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGradOffset( MaybeOptional< USampledImage1DArrayRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DArrayURgba16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayURgba16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGradOffset( MaybeOptional< USampledImage1DArrayRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DArrayURgba8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayURgba8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureGradOffset( MaybeOptional< USampledImage1DArrayRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DArrayURg32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayURg32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureGradOffset( MaybeOptional< USampledImage1DArrayRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DArrayURg16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayURg16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureGradOffset( MaybeOptional< USampledImage1DArrayRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DArrayURg8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayURg8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureGradOffset( MaybeOptional< USampledImage1DArrayR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DArrayUR32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayUR32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureGradOffset( MaybeOptional< USampledImage1DArrayR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DArrayUR16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayUR16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureGradOffset( MaybeOptional< USampledImage1DArrayR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DArrayUR8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayUR8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGradOffset( MaybeOptional< USampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DArrayURgba32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayURgba32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGradOffset( MaybeOptional< USampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DArrayURgba16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayURgba16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGradOffset( MaybeOptional< USampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DArrayURgba8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayURgba8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureGradOffset( MaybeOptional< USampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DArrayURg32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayURg32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureGradOffset( MaybeOptional< USampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DArrayURg16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayURg16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureGradOffset( MaybeOptional< USampledImage2DArrayRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DArrayURg8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayURg8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureGradOffset( MaybeOptional< USampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DArrayUR32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayUR32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureGradOffset( MaybeOptional< USampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DArrayUR16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayUR16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureGradOffset( MaybeOptional< USampledImage2DArrayR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DArrayUR8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayUR8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureGradOffset( MaybeOptional< SampledImage1DShadowR32 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DShadowFR32( findTypesCache( image, P, refZ, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, refZ, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DShadowFR32( findTypesCache( image, P, refZ, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureGradOffset( MaybeOptional< SampledImage1DShadowR16 > const & image
		, MaybeOptional< Float > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DShadowFR16( findTypesCache( image, P, refZ, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, refZ, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DShadowFR16( findTypesCache( image, P, refZ, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureGradOffset( MaybeOptional< SampledImage2DShadowR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DShadowFR32( findTypesCache( image, P, refZ, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, refZ, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DShadowFR32( findTypesCache( image, P, refZ, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureGradOffset( MaybeOptional< SampledImage2DShadowR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DShadowFR16( findTypesCache( image, P, refZ, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, refZ, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DShadowFR16( findTypesCache( image, P, refZ, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureGradOffset( MaybeOptional< SampledImage1DArrayShadowR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DArrayShadowFR32( findTypesCache( image, P, refZ, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, refZ, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayShadowFR32( findTypesCache( image, P, refZ, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureGradOffset( MaybeOptional< SampledImage1DArrayShadowR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset1DArrayShadowFR16( findTypesCache( image, P, refZ, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, refZ, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset1DArrayShadowFR16( findTypesCache( image, P, refZ, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureGradOffset( MaybeOptional< SampledImage2DArrayShadowR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DArrayShadowFR32( findTypesCache( image, P, refZ, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, refZ, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayShadowFR32( findTypesCache( image, P, refZ, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureGradOffset( MaybeOptional< SampledImage2DArrayShadowR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, dPdx, dPdy, offset )
				, expr::makeTextureGradOffset2DArrayShadowFR16( findTypesCache( image, P, refZ, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, refZ, dPdx, dPdy, offset )
			, expr::makeTextureGradOffset2DArrayShadowFR16( findTypesCache( image, P, refZ, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureProjGrad
	/**
	*name
	*	textureProjGrad
	*/
	/**@{*/
	MaybeOptional< Vec4 > textureProjGrad( MaybeOptional< SampledImage1DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Vec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DF2Rgba32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Vec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DF2Rgba32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Vec4 > textureProjGrad( MaybeOptional< SampledImage1DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Vec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DF2Rgba16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Vec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DF2Rgba16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Vec2 > textureProjGrad( MaybeOptional< SampledImage1DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Vec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DF2Rg32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Vec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DF2Rg32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Vec2 > textureProjGrad( MaybeOptional< SampledImage1DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Vec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DF2Rg16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Vec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DF2Rg16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Float > textureProjGrad( MaybeOptional< SampledImage1DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Float >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DF2R32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Float{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DF2R32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Float > textureProjGrad( MaybeOptional< SampledImage1DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Float >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DF2R16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Float{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DF2R16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Vec4 > textureProjGrad( MaybeOptional< SampledImage1DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Vec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DF4Rgba32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Vec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DF4Rgba32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Vec4 > textureProjGrad( MaybeOptional< SampledImage1DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Vec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DF4Rgba16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Vec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DF4Rgba16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Vec2 > textureProjGrad( MaybeOptional< SampledImage1DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Vec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DF4Rg32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Vec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DF4Rg32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Vec2 > textureProjGrad( MaybeOptional< SampledImage1DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Vec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DF4Rg16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Vec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DF4Rg16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Float > textureProjGrad( MaybeOptional< SampledImage1DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Float >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DF4R32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Float{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DF4R32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Float > textureProjGrad( MaybeOptional< SampledImage1DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Float >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DF4R16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Float{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DF4R16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Vec4 > textureProjGrad( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Vec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DF3Rgba32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Vec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DF3Rgba32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Vec4 > textureProjGrad( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Vec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DF3Rgba16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Vec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DF3Rgba16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Vec2 > textureProjGrad( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Vec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DF3Rg32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Vec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DF3Rg32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Vec2 > textureProjGrad( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Vec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DF3Rg16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Vec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DF3Rg16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Float > textureProjGrad( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Float >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DF3R32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Float{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DF3R32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Float > textureProjGrad( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Float >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DF3R16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Float{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DF3R16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Vec4 > textureProjGrad( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Vec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DF4Rgba32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Vec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DF4Rgba32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Vec4 > textureProjGrad( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Vec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DF4Rgba16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Vec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DF4Rgba16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Vec2 > textureProjGrad( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Vec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DF4Rg32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Vec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DF4Rg32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Vec2 > textureProjGrad( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Vec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DF4Rg16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Vec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DF4Rg16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Float > textureProjGrad( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Float >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DF4R32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Float{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DF4R32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Float > textureProjGrad( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Float >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DF4R16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Float{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DF4R16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Vec4 > textureProjGrad( MaybeOptional< SampledImage3DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & pDx
		, MaybeOptional< Vec3 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Vec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad3DFRgba32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Vec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DFRgba32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Vec4 > textureProjGrad( MaybeOptional< SampledImage3DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & pDx
		, MaybeOptional< Vec3 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Vec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad3DFRgba16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Vec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DFRgba16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Vec2 > textureProjGrad( MaybeOptional< SampledImage3DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & pDx
		, MaybeOptional< Vec3 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Vec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad3DFRg32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Vec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DFRg32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Vec2 > textureProjGrad( MaybeOptional< SampledImage3DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & pDx
		, MaybeOptional< Vec3 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Vec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad3DFRg16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Vec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DFRg16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Float > textureProjGrad( MaybeOptional< SampledImage3DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & pDx
		, MaybeOptional< Vec3 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Float >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad3DFR32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Float{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DFR32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Float > textureProjGrad( MaybeOptional< SampledImage3DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & pDx
		, MaybeOptional< Vec3 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Float >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad3DFR16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Float{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DFR16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< IVec4 > textureProjGrad( MaybeOptional< ISampledImage1DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DI2Rgba32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI2Rgba32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< IVec4 > textureProjGrad( MaybeOptional< ISampledImage1DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DI2Rgba16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI2Rgba16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< IVec4 > textureProjGrad( MaybeOptional< ISampledImage1DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DI2Rgba8( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI2Rgba8( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< IVec2 > textureProjGrad( MaybeOptional< ISampledImage1DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DI2Rg32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI2Rg32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< IVec2 > textureProjGrad( MaybeOptional< ISampledImage1DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DI2Rg16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI2Rg16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< IVec2 > textureProjGrad( MaybeOptional< ISampledImage1DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DI2Rg8( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI2Rg8( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Int > textureProjGrad( MaybeOptional< ISampledImage1DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Int >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DI2R32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI2R32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Int > textureProjGrad( MaybeOptional< ISampledImage1DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Int >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DI2R16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI2R16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Int > textureProjGrad( MaybeOptional< ISampledImage1DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Int >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DI2R8( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI2R8( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< IVec4 > textureProjGrad( MaybeOptional< ISampledImage1DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DI4Rgba32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI4Rgba32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< IVec4 > textureProjGrad( MaybeOptional< ISampledImage1DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DI4Rgba16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI4Rgba16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< IVec4 > textureProjGrad( MaybeOptional< ISampledImage1DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DI4Rgba8( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI4Rgba8( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< IVec2 > textureProjGrad( MaybeOptional< ISampledImage1DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DI4Rg32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI4Rg32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< IVec2 > textureProjGrad( MaybeOptional< ISampledImage1DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DI4Rg16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI4Rg16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< IVec2 > textureProjGrad( MaybeOptional< ISampledImage1DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DI4Rg8( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI4Rg8( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Int > textureProjGrad( MaybeOptional< ISampledImage1DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Int >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DI4R32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI4R32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Int > textureProjGrad( MaybeOptional< ISampledImage1DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Int >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DI4R16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI4R16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Int > textureProjGrad( MaybeOptional< ISampledImage1DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Int >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DI4R8( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DI4R8( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< IVec4 > textureProjGrad( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DI3Rgba32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI3Rgba32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< IVec4 > textureProjGrad( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DI3Rgba16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI3Rgba16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< IVec4 > textureProjGrad( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DI3Rgba8( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI3Rgba8( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< IVec2 > textureProjGrad( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DI3Rg32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI3Rg32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< IVec2 > textureProjGrad( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DI3Rg16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI3Rg16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< IVec2 > textureProjGrad( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DI3Rg8( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI3Rg8( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Int > textureProjGrad( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Int >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DI3R32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI3R32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Int > textureProjGrad( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Int >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DI3R16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI3R16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Int > textureProjGrad( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Int >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DI3R8( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI3R8( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< IVec4 > textureProjGrad( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DI4Rgba32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI4Rgba32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< IVec4 > textureProjGrad( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DI4Rgba16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI4Rgba16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< IVec4 > textureProjGrad( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DI4Rgba8( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI4Rgba8( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< IVec2 > textureProjGrad( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DI4Rg32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI4Rg32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< IVec2 > textureProjGrad( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DI4Rg16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI4Rg16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< IVec2 > textureProjGrad( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DI4Rg8( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI4Rg8( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Int > textureProjGrad( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Int >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DI4R32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI4R32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Int > textureProjGrad( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Int >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DI4R16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI4R16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Int > textureProjGrad( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Int >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DI4R8( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DI4R8( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< IVec4 > textureProjGrad( MaybeOptional< ISampledImage3DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & pDx
		, MaybeOptional< Vec3 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad3DIRgba32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DIRgba32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< IVec4 > textureProjGrad( MaybeOptional< ISampledImage3DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & pDx
		, MaybeOptional< Vec3 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad3DIRgba16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DIRgba16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< IVec4 > textureProjGrad( MaybeOptional< ISampledImage3DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & pDx
		, MaybeOptional< Vec3 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< IVec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad3DIRgba8( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return IVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DIRgba8( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< IVec2 > textureProjGrad( MaybeOptional< ISampledImage3DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & pDx
		, MaybeOptional< Vec3 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad3DIRg32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DIRg32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< IVec2 > textureProjGrad( MaybeOptional< ISampledImage3DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & pDx
		, MaybeOptional< Vec3 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad3DIRg16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DIRg16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< IVec2 > textureProjGrad( MaybeOptional< ISampledImage3DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & pDx
		, MaybeOptional< Vec3 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< IVec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad3DIRg8( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return IVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DIRg8( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Int > textureProjGrad( MaybeOptional< ISampledImage3DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & pDx
		, MaybeOptional< Vec3 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Int >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad3DIR32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DIR32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Int > textureProjGrad( MaybeOptional< ISampledImage3DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & pDx
		, MaybeOptional< Vec3 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Int >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad3DIR16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DIR16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Int > textureProjGrad( MaybeOptional< ISampledImage3DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & pDx
		, MaybeOptional< Vec3 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< Int >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad3DIR8( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return Int{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DIR8( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UVec4 > textureProjGrad( MaybeOptional< USampledImage1DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DU2Rgba32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU2Rgba32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UVec4 > textureProjGrad( MaybeOptional< USampledImage1DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DU2Rgba16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU2Rgba16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UVec4 > textureProjGrad( MaybeOptional< USampledImage1DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DU2Rgba8( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU2Rgba8( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UVec2 > textureProjGrad( MaybeOptional< USampledImage1DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DU2Rg32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU2Rg32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UVec2 > textureProjGrad( MaybeOptional< USampledImage1DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DU2Rg16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU2Rg16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UVec2 > textureProjGrad( MaybeOptional< USampledImage1DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DU2Rg8( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU2Rg8( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UInt > textureProjGrad( MaybeOptional< USampledImage1DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UInt >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DU2R32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU2R32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UInt > textureProjGrad( MaybeOptional< USampledImage1DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UInt >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DU2R16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU2R16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UInt > textureProjGrad( MaybeOptional< USampledImage1DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UInt >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DU2R8( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU2R8( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UVec4 > textureProjGrad( MaybeOptional< USampledImage1DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DU4Rgba32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU4Rgba32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UVec4 > textureProjGrad( MaybeOptional< USampledImage1DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DU4Rgba16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU4Rgba16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UVec4 > textureProjGrad( MaybeOptional< USampledImage1DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DU4Rgba8( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU4Rgba8( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UVec2 > textureProjGrad( MaybeOptional< USampledImage1DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DU4Rg32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU4Rg32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UVec2 > textureProjGrad( MaybeOptional< USampledImage1DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DU4Rg16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU4Rg16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UVec2 > textureProjGrad( MaybeOptional< USampledImage1DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DU4Rg8( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU4Rg8( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UInt > textureProjGrad( MaybeOptional< USampledImage1DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UInt >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DU4R32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU4R32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UInt > textureProjGrad( MaybeOptional< USampledImage1DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UInt >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DU4R16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU4R16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UInt > textureProjGrad( MaybeOptional< USampledImage1DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UInt >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad1DU4R8( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad1DU4R8( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UVec4 > textureProjGrad( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DU3Rgba32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU3Rgba32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UVec4 > textureProjGrad( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DU3Rgba16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU3Rgba16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UVec4 > textureProjGrad( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DU3Rgba8( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU3Rgba8( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UVec2 > textureProjGrad( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DU3Rg32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU3Rg32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UVec2 > textureProjGrad( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DU3Rg16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU3Rg16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UVec2 > textureProjGrad( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DU3Rg8( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU3Rg8( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UInt > textureProjGrad( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UInt >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DU3R32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU3R32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UInt > textureProjGrad( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UInt >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DU3R16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU3R16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UInt > textureProjGrad( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UInt >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DU3R8( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU3R8( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UVec4 > textureProjGrad( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DU4Rgba32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU4Rgba32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UVec4 > textureProjGrad( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DU4Rgba16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU4Rgba16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UVec4 > textureProjGrad( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DU4Rgba8( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU4Rgba8( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UVec2 > textureProjGrad( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DU4Rg32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU4Rg32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UVec2 > textureProjGrad( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DU4Rg16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU4Rg16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UVec2 > textureProjGrad( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DU4Rg8( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU4Rg8( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UInt > textureProjGrad( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UInt >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DU4R32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU4R32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UInt > textureProjGrad( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UInt >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DU4R16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU4R16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UInt > textureProjGrad( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UInt >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad2DU4R8( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad2DU4R8( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UVec4 > textureProjGrad( MaybeOptional< USampledImage3DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & pDx
		, MaybeOptional< Vec3 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad3DURgba32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DURgba32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UVec4 > textureProjGrad( MaybeOptional< USampledImage3DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & pDx
		, MaybeOptional< Vec3 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad3DURgba16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DURgba16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UVec4 > textureProjGrad( MaybeOptional< USampledImage3DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & pDx
		, MaybeOptional< Vec3 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UVec4 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad3DURgba8( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UVec4{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DURgba8( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UVec2 > textureProjGrad( MaybeOptional< USampledImage3DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & pDx
		, MaybeOptional< Vec3 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad3DURg32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DURg32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UVec2 > textureProjGrad( MaybeOptional< USampledImage3DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & pDx
		, MaybeOptional< Vec3 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad3DURg16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DURg16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UVec2 > textureProjGrad( MaybeOptional< USampledImage3DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & pDx
		, MaybeOptional< Vec3 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UVec2 >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad3DURg8( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UVec2{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DURg8( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UInt > textureProjGrad( MaybeOptional< USampledImage3DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & pDx
		, MaybeOptional< Vec3 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UInt >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad3DUR32( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DUR32( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UInt > textureProjGrad( MaybeOptional< USampledImage3DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & pDx
		, MaybeOptional< Vec3 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UInt >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad3DUR16( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DUR16( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< UInt > textureProjGrad( MaybeOptional< USampledImage3DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & pDx
		, MaybeOptional< Vec3 > const & pDy )
	{
		if ( isAnyOptional( image, P, pDx, pDy ) )
		{
			return Optional< UInt >{ findShader( image, P, pDx, pDy )
				, expr::makeTextureProjGrad3DUR8( findTypesCache( image, P, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, pDx, pDy ) };
		}

		return UInt{ findShader( image, P, pDx, pDy )
			, expr::makeTextureProjGrad3DUR8( findTypesCache( image, P, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Float > textureProjGrad( MaybeOptional< SampledImage1DShadowR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, refZ, pDx, pDy ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, pDx, pDy )
				, expr::makeTextureProjGrad1DShadowFR32( findTypesCache( image, P, refZ, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, refZ, pDx, pDy ) };
		}

		return Float{ findShader( image, P, refZ, pDx, pDy )
			, expr::makeTextureProjGrad1DShadowFR32( findTypesCache( image, P, refZ, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Float > textureProjGrad( MaybeOptional< SampledImage1DShadowR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & pDx
		, MaybeOptional< Float > const & pDy )
	{
		if ( isAnyOptional( image, P, refZ, pDx, pDy ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, pDx, pDy )
				, expr::makeTextureProjGrad1DShadowFR16( findTypesCache( image, P, refZ, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, refZ, pDx, pDy ) };
		}

		return Float{ findShader( image, P, refZ, pDx, pDy )
			, expr::makeTextureProjGrad1DShadowFR16( findTypesCache( image, P, refZ, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Float > textureProjGrad( MaybeOptional< SampledImage2DShadowR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, refZ, pDx, pDy ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, pDx, pDy )
				, expr::makeTextureProjGrad2DShadowFR32( findTypesCache( image, P, refZ, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, refZ, pDx, pDy ) };
		}

		return Float{ findShader( image, P, refZ, pDx, pDy )
			, expr::makeTextureProjGrad2DShadowFR32( findTypesCache( image, P, refZ, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	MaybeOptional< Float > textureProjGrad( MaybeOptional< SampledImage2DShadowR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Vec2 > const & pDx
		, MaybeOptional< Vec2 > const & pDy )
	{
		if ( isAnyOptional( image, P, refZ, pDx, pDy ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, pDx, pDy )
				, expr::makeTextureProjGrad2DShadowFR16( findTypesCache( image, P, refZ, pDx, pDy )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( pDx )
					, makeExpr( pDy ) )
				, areOptionalEnabled( image, P, refZ, pDx, pDy ) };
		}

		return Float{ findShader( image, P, refZ, pDx, pDy )
			, expr::makeTextureProjGrad2DShadowFR16( findTypesCache( image, P, refZ, pDx, pDy )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( pDx )
				, makeExpr( pDy ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureProjGradOffset
	/**
	*name
	*	textureProjGradOffset
	*/
	/**@{*/
	MaybeOptional< Vec4 > textureProjGradOffset( MaybeOptional< SampledImage1DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DF2Rgba32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DF2Rgba32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureProjGradOffset( MaybeOptional< SampledImage1DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DF2Rgba16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DF2Rgba16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureProjGradOffset( MaybeOptional< SampledImage1DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DF2Rg32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DF2Rg32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureProjGradOffset( MaybeOptional< SampledImage1DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DF2Rg16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DF2Rg16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjGradOffset( MaybeOptional< SampledImage1DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DF2R32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DF2R32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjGradOffset( MaybeOptional< SampledImage1DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DF2R16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DF2R16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureProjGradOffset( MaybeOptional< SampledImage1DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DF4Rgba32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DF4Rgba32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureProjGradOffset( MaybeOptional< SampledImage1DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DF4Rgba16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DF4Rgba16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureProjGradOffset( MaybeOptional< SampledImage1DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DF4Rg32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DF4Rg32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureProjGradOffset( MaybeOptional< SampledImage1DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DF4Rg16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DF4Rg16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjGradOffset( MaybeOptional< SampledImage1DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DF4R32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DF4R32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjGradOffset( MaybeOptional< SampledImage1DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DF4R16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DF4R16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureProjGradOffset( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DF3Rgba32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DF3Rgba32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureProjGradOffset( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DF3Rgba16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DF3Rgba16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureProjGradOffset( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DF3Rg32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DF3Rg32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureProjGradOffset( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DF3Rg16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DF3Rg16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjGradOffset( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DF3R32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DF3R32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjGradOffset( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DF3R16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DF3R16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureProjGradOffset( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DF4Rgba32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DF4Rgba32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureProjGradOffset( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DF4Rgba16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DF4Rgba16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureProjGradOffset( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DF4Rg32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DF4Rg32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureProjGradOffset( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DF4Rg16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DF4Rg16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjGradOffset( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DF4R32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DF4R32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjGradOffset( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DF4R16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DF4R16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureProjGradOffset( MaybeOptional< SampledImage3DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset3DFRgba32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DFRgba32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureProjGradOffset( MaybeOptional< SampledImage3DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset3DFRgba16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DFRgba16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureProjGradOffset( MaybeOptional< SampledImage3DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset3DFRg32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DFRg32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec2 > textureProjGradOffset( MaybeOptional< SampledImage3DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Vec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset3DFRg16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Vec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DFRg16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjGradOffset( MaybeOptional< SampledImage3DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset3DFR32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DFR32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjGradOffset( MaybeOptional< SampledImage3DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset3DFR16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DFR16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjGradOffset( MaybeOptional< ISampledImage1DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DI2Rgba32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI2Rgba32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjGradOffset( MaybeOptional< ISampledImage1DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DI2Rgba16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI2Rgba16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjGradOffset( MaybeOptional< ISampledImage1DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DI2Rgba8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI2Rgba8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjGradOffset( MaybeOptional< ISampledImage1DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DI2Rg32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI2Rg32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjGradOffset( MaybeOptional< ISampledImage1DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DI2Rg16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI2Rg16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjGradOffset( MaybeOptional< ISampledImage1DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DI2Rg8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI2Rg8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjGradOffset( MaybeOptional< ISampledImage1DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DI2R32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI2R32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjGradOffset( MaybeOptional< ISampledImage1DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DI2R16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI2R16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjGradOffset( MaybeOptional< ISampledImage1DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DI2R8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI2R8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjGradOffset( MaybeOptional< ISampledImage1DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DI4Rgba32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI4Rgba32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjGradOffset( MaybeOptional< ISampledImage1DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DI4Rgba16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI4Rgba16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjGradOffset( MaybeOptional< ISampledImage1DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DI4Rgba8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI4Rgba8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjGradOffset( MaybeOptional< ISampledImage1DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DI4Rg32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI4Rg32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjGradOffset( MaybeOptional< ISampledImage1DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DI4Rg16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI4Rg16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjGradOffset( MaybeOptional< ISampledImage1DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DI4Rg8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI4Rg8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjGradOffset( MaybeOptional< ISampledImage1DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DI4R32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI4R32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjGradOffset( MaybeOptional< ISampledImage1DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DI4R16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI4R16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjGradOffset( MaybeOptional< ISampledImage1DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DI4R8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DI4R8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjGradOffset( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DI3Rgba32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI3Rgba32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjGradOffset( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DI3Rgba16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI3Rgba16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjGradOffset( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DI3Rgba8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI3Rgba8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjGradOffset( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DI3Rg32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI3Rg32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjGradOffset( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DI3Rg16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI3Rg16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjGradOffset( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DI3Rg8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI3Rg8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjGradOffset( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DI3R32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI3R32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjGradOffset( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DI3R16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI3R16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjGradOffset( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DI3R8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI3R8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjGradOffset( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DI4Rgba32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI4Rgba32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjGradOffset( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DI4Rgba16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI4Rgba16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjGradOffset( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DI4Rgba8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI4Rgba8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjGradOffset( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DI4Rg32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI4Rg32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjGradOffset( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DI4Rg16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI4Rg16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjGradOffset( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DI4Rg8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI4Rg8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjGradOffset( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DI4R32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI4R32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjGradOffset( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DI4R16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI4R16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjGradOffset( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DI4R8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DI4R8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjGradOffset( MaybeOptional< ISampledImage3DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset3DIRgba32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DIRgba32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjGradOffset( MaybeOptional< ISampledImage3DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset3DIRgba16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DIRgba16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureProjGradOffset( MaybeOptional< ISampledImage3DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset3DIRgba8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DIRgba8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjGradOffset( MaybeOptional< ISampledImage3DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset3DIRg32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DIRg32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjGradOffset( MaybeOptional< ISampledImage3DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset3DIRg16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DIRg16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec2 > textureProjGradOffset( MaybeOptional< ISampledImage3DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< IVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset3DIRg8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return IVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DIRg8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjGradOffset( MaybeOptional< ISampledImage3DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset3DIR32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DIR32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjGradOffset( MaybeOptional< ISampledImage3DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset3DIR16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DIR16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Int > textureProjGradOffset( MaybeOptional< ISampledImage3DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< Int >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset3DIR8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return Int{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DIR8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjGradOffset( MaybeOptional< USampledImage1DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DU2Rgba32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU2Rgba32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjGradOffset( MaybeOptional< USampledImage1DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DU2Rgba16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU2Rgba16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjGradOffset( MaybeOptional< USampledImage1DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DU2Rgba8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU2Rgba8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjGradOffset( MaybeOptional< USampledImage1DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DU2Rg32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU2Rg32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjGradOffset( MaybeOptional< USampledImage1DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DU2Rg16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU2Rg16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjGradOffset( MaybeOptional< USampledImage1DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DU2Rg8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU2Rg8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjGradOffset( MaybeOptional< USampledImage1DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DU2R32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU2R32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjGradOffset( MaybeOptional< USampledImage1DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DU2R16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU2R16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjGradOffset( MaybeOptional< USampledImage1DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DU2R8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU2R8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjGradOffset( MaybeOptional< USampledImage1DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DU4Rgba32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU4Rgba32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjGradOffset( MaybeOptional< USampledImage1DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DU4Rgba16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU4Rgba16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjGradOffset( MaybeOptional< USampledImage1DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DU4Rgba8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU4Rgba8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjGradOffset( MaybeOptional< USampledImage1DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DU4Rg32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU4Rg32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjGradOffset( MaybeOptional< USampledImage1DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DU4Rg16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU4Rg16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjGradOffset( MaybeOptional< USampledImage1DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DU4Rg8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU4Rg8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjGradOffset( MaybeOptional< USampledImage1DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DU4R32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU4R32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjGradOffset( MaybeOptional< USampledImage1DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DU4R16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU4R16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjGradOffset( MaybeOptional< USampledImage1DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DU4R8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DU4R8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjGradOffset( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DU3Rgba32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU3Rgba32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjGradOffset( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DU3Rgba16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU3Rgba16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjGradOffset( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DU3Rgba8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU3Rgba8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjGradOffset( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DU3Rg32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU3Rg32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjGradOffset( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DU3Rg16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU3Rg16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjGradOffset( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DU3Rg8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU3Rg8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjGradOffset( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DU3R32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU3R32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjGradOffset( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DU3R16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU3R16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjGradOffset( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DU3R8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU3R8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjGradOffset( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DU4Rgba32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU4Rgba32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjGradOffset( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DU4Rgba16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU4Rgba16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjGradOffset( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DU4Rgba8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU4Rgba8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjGradOffset( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DU4Rg32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU4Rg32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjGradOffset( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DU4Rg16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU4Rg16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjGradOffset( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DU4Rg8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU4Rg8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjGradOffset( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DU4R32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU4R32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjGradOffset( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DU4R16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU4R16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjGradOffset( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DU4R8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DU4R8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjGradOffset( MaybeOptional< USampledImage3DRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset3DURgba32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DURgba32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjGradOffset( MaybeOptional< USampledImage3DRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset3DURgba16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DURgba16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureProjGradOffset( MaybeOptional< USampledImage3DRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset3DURgba8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec4{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DURgba8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjGradOffset( MaybeOptional< USampledImage3DRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset3DURg32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DURg32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjGradOffset( MaybeOptional< USampledImage3DRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset3DURg16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DURg16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec2 > textureProjGradOffset( MaybeOptional< USampledImage3DRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UVec2 >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset3DURg8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UVec2{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DURg8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjGradOffset( MaybeOptional< USampledImage3DR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset3DUR32( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DUR32( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjGradOffset( MaybeOptional< USampledImage3DR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset3DUR16( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DUR16( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UInt > textureProjGradOffset( MaybeOptional< USampledImage3DR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Vec3 > const & dPdx
		, MaybeOptional< Vec3 > const & dPdy
		, MaybeOptional< IVec3 > const & offset )
	{
		if ( isAnyOptional( image, P, dPdx, dPdy, offset ) )
		{
			return Optional< UInt >{ findShader( image, P, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset3DUR8( findTypesCache( image, P, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, dPdx, dPdy, offset ) };
		}

		return UInt{ findShader( image, P, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset3DUR8( findTypesCache( image, P, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjGradOffset( MaybeOptional< SampledImage1DShadowR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DShadowFR32( findTypesCache( image, P, refZ, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, refZ, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DShadowFR32( findTypesCache( image, P, refZ, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjGradOffset( MaybeOptional< SampledImage1DShadowR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Float > const & dPdx
		, MaybeOptional< Float > const & dPdy
		, MaybeOptional< Int > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset1DShadowFR16( findTypesCache( image, P, refZ, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, refZ, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset1DShadowFR16( findTypesCache( image, P, refZ, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjGradOffset( MaybeOptional< SampledImage2DShadowR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DShadowFR32( findTypesCache( image, P, refZ, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, refZ, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DShadowFR32( findTypesCache( image, P, refZ, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Float > textureProjGradOffset( MaybeOptional< SampledImage2DShadowR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Vec2 > const & dPdx
		, MaybeOptional< Vec2 > const & dPdy
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, dPdx, dPdy, offset ) )
		{
			return Optional< Float >{ findShader( image, P, refZ, dPdx, dPdy, offset )
				, expr::makeTextureProjGradOffset2DShadowFR16( findTypesCache( image, P, refZ, dPdx, dPdy, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( dPdx )
					, makeExpr( dPdy )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, dPdx, dPdy, offset ) };
		}

		return Float{ findShader( image, P, refZ, dPdx, dPdy, offset )
			, expr::makeTextureProjGradOffset2DShadowFR16( findTypesCache( image, P, refZ, dPdx, dPdy, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( dPdx )
				, makeExpr( dPdy )
				, makeExpr( offset ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureGather
	/**
	*name
	*	textureGather
	*/
	/**@{*/
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureGather2DFRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureGather2DFRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureGather2DFRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureGather2DFRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureGather2DFRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureGather2DFRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureGather2DFRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureGather2DFRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureGather2DFR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureGather2DFR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureGather2DFR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureGather2DFR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureGather2DArrayFRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayFRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureGather2DArrayFRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayFRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureGather2DArrayFRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayFRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureGather2DArrayFRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayFRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureGather2DArrayFR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayFR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureGather2DArrayFR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayFR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImageCubeRgba32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeFRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureGatherCubeFRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImageCubeRgba16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeFRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureGatherCubeFRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImageCubeRg32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeFRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureGatherCubeFRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImageCubeRg16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeFRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureGatherCubeFRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImageCubeR32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeFR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureGatherCubeFR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImageCubeR16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeFR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureGatherCubeFR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImageCubeArrayRgba32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeArrayFRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayFRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImageCubeArrayRgba16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeArrayFRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayFRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImageCubeArrayRg32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeArrayFRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayFRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImageCubeArrayRg16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeArrayFRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayFRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImageCubeArrayR32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeArrayFR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayFR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImageCubeArrayR16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< Vec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeArrayFR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return Vec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayFR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DIRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DIRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DIRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DIRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DIRgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DIRgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DIRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DIRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DIRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DIRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DIRg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DIRg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DIR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DIR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DIR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DIR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DIR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DIR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DArrayIRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayIRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DArrayIRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayIRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DArrayIRgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayIRgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DArrayIRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayIRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DArrayIRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayIRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DArrayRg8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DArrayIRg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayIRg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DArrayIR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayIR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DArrayIR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayIR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DArrayR8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DArrayIR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayIR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeRgba32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeIRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeIRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeRgba16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeIRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeIRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeRgba8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeIRgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeIRgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeRg32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeIRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeIRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeRg16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeIRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeIRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeRg8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeIRg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeIRg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeR32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeIR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeIR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeR16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeIR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeIR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeR8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeIR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeIR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeArrayRgba32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeArrayIRgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayIRgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeArrayRgba16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeArrayIRgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayIRgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeArrayRgba8 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeArrayIRgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayIRgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeArrayRg32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeArrayIRg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayIRg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeArrayRg16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeArrayIRg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayIRg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeArrayRg8 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeArrayIRg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayIRg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeArrayR32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeArrayIR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayIR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeArrayR16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeArrayIR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayIR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeArrayR8 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< IVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeArrayIR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return IVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayIR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DURgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DURgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DURgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DURgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DURgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DURgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DURg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DURg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DURg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DURg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DURg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DURg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DUR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DUR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DUR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DUR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Vec2 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DUR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DUR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DArrayURgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayURgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DArrayURgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayURgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DArrayURgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayURgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DArrayURg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayURg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DArrayURg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayURg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DArrayRg8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DArrayURg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayURg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DArrayUR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayUR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DArrayUR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayUR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DArrayR8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGather2DArrayUR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGather2DArrayUR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeRgba32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeURgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeURgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeRgba16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeURgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeURgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeRgba8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeURgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeURgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeRg32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeURg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeURg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeRg16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeURg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeURg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeRg8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeURg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeURg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeR32 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeUR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeUR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeR16 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeUR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeUR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeR8 > const & image
		, MaybeOptional< Vec3 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeUR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeUR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeArrayRgba32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeArrayURgba32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayURgba32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeArrayRgba16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeArrayURgba16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayURgba16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeArrayRgba8 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeArrayURgba8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayURgba8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeArrayRg32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeArrayURg32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayURg32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeArrayRg16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeArrayURg16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayURg16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeArrayRg8 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeArrayURg8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayURg8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeArrayR32 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeArrayUR32( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayUR32( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeArrayR16 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeArrayUR16( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayUR16( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeArrayR8 > const & image
		, MaybeOptional< Vec4 > const & P )
	{
		if ( isAnyOptional( image, P ) )
		{
			return Optional< UVec4 >{ findShader( image, P )
				, expr::makeTextureGatherCubeArrayUR8( findTypesCache( image, P )
					, makeExpr( image )
					, makeExpr( P ) )
				, areOptionalEnabled( image, P ) };
		}

		return UVec4{ findShader( image, P )
			, expr::makeTextureGatherCubeArrayUR8( findTypesCache( image, P )
				, makeExpr( image )
				, makeExpr( P ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImage2DShadowR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ )
	{
		if ( isAnyOptional( image, P, refZ ) )
		{
			return Optional< Vec4 >{ findShader( image, P, refZ )
				, expr::makeTextureGather2DShadowFR32( findTypesCache( image, P, refZ )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ ) )
				, areOptionalEnabled( image, P, refZ ) };
		}

		return Vec4{ findShader( image, P, refZ )
			, expr::makeTextureGather2DShadowFR32( findTypesCache( image, P, refZ )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImage2DShadowR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ )
	{
		if ( isAnyOptional( image, P, refZ ) )
		{
			return Optional< Vec4 >{ findShader( image, P, refZ )
				, expr::makeTextureGather2DShadowFR16( findTypesCache( image, P, refZ )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ ) )
				, areOptionalEnabled( image, P, refZ ) };
		}

		return Vec4{ findShader( image, P, refZ )
			, expr::makeTextureGather2DShadowFR16( findTypesCache( image, P, refZ )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImage2DArrayShadowR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ )
	{
		if ( isAnyOptional( image, P, refZ ) )
		{
			return Optional< Vec4 >{ findShader( image, P, refZ )
				, expr::makeTextureGather2DArrayShadowFR32( findTypesCache( image, P, refZ )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ ) )
				, areOptionalEnabled( image, P, refZ ) };
		}

		return Vec4{ findShader( image, P, refZ )
			, expr::makeTextureGather2DArrayShadowFR32( findTypesCache( image, P, refZ )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImage2DArrayShadowR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ )
	{
		if ( isAnyOptional( image, P, refZ ) )
		{
			return Optional< Vec4 >{ findShader( image, P, refZ )
				, expr::makeTextureGather2DArrayShadowFR16( findTypesCache( image, P, refZ )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ ) )
				, areOptionalEnabled( image, P, refZ ) };
		}

		return Vec4{ findShader( image, P, refZ )
			, expr::makeTextureGather2DArrayShadowFR16( findTypesCache( image, P, refZ )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImageCubeShadowR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ )
	{
		if ( isAnyOptional( image, P, refZ ) )
		{
			return Optional< Vec4 >{ findShader( image, P, refZ )
				, expr::makeTextureGatherCubeShadowFR32( findTypesCache( image, P, refZ )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ ) )
				, areOptionalEnabled( image, P, refZ ) };
		}

		return Vec4{ findShader( image, P, refZ )
			, expr::makeTextureGatherCubeShadowFR32( findTypesCache( image, P, refZ )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImageCubeShadowR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ )
	{
		if ( isAnyOptional( image, P, refZ ) )
		{
			return Optional< Vec4 >{ findShader( image, P, refZ )
				, expr::makeTextureGatherCubeShadowFR16( findTypesCache( image, P, refZ )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ ) )
				, areOptionalEnabled( image, P, refZ ) };
		}

		return Vec4{ findShader( image, P, refZ )
			, expr::makeTextureGatherCubeShadowFR16( findTypesCache( image, P, refZ )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImageCubeArrayShadowR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & refZ )
	{
		if ( isAnyOptional( image, P, refZ ) )
		{
			return Optional< Vec4 >{ findShader( image, P, refZ )
				, expr::makeTextureGatherCubeArrayShadowFR32( findTypesCache( image, P, refZ )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ ) )
				, areOptionalEnabled( image, P, refZ ) };
		}

		return Vec4{ findShader( image, P, refZ )
			, expr::makeTextureGatherCubeArrayShadowFR32( findTypesCache( image, P, refZ )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImageCubeArrayShadowR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Float > const & refZ )
	{
		if ( isAnyOptional( image, P, refZ ) )
		{
			return Optional< Vec4 >{ findShader( image, P, refZ )
				, expr::makeTextureGatherCubeArrayShadowFR16( findTypesCache( image, P, refZ )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ ) )
				, areOptionalEnabled( image, P, refZ ) };
		}

		return Vec4{ findShader( image, P, refZ )
			, expr::makeTextureGatherCubeArrayShadowFR16( findTypesCache( image, P, refZ )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureGatherComp
	/**
	*name
	*	textureGatherComp
	*/
	/**@{*/
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DFCompRgba32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DFCompRgba32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DFCompRgba16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DFCompRgba16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DFCompRg32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DFCompRg32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DFCompRg16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DFCompRg16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DFCompR32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DFCompR32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DFCompR16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DFCompR16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DArrayFCompRgba32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayFCompRgba32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DArrayFCompRgba16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayFCompRgba16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DArrayFCompRg32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayFCompRg32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DArrayFCompRg16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayFCompRg16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DArrayFCompR32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayFCompR32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DArrayFCompR16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayFCompR16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImageCubeRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeFCompRgba32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeFCompRgba32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImageCubeRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeFCompRgba16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeFCompRgba16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImageCubeRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeFCompRg32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeFCompRg32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImageCubeRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeFCompRg16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeFCompRg16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImageCubeR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeFCompR32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeFCompR32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImageCubeR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeFCompR16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeFCompR16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImageCubeArrayRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeArrayFCompRgba32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayFCompRgba32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImageCubeArrayRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeArrayFCompRgba16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayFCompRgba16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImageCubeArrayRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeArrayFCompRg32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayFCompRg32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImageCubeArrayRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeArrayFCompRg16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayFCompRg16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImageCubeArrayR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeArrayFCompR32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayFCompR32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGather( MaybeOptional< SampledImageCubeArrayR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeArrayFCompR16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return Vec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayFCompR16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DICompRgba32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DICompRgba32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DICompRgba16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DICompRgba16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DICompRgba8( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DICompRgba8( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DICompRg32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DICompRg32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DICompRg16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DICompRg16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DICompRg8( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DICompRg8( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DICompR32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DICompR32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DICompR16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DICompR16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DICompR8( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DICompR8( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DArrayICompRgba32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayICompRgba32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DArrayICompRgba16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayICompRgba16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DArrayICompRgba8( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayICompRgba8( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DArrayICompRg32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayICompRg32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DArrayICompRg16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayICompRg16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DArrayRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DArrayICompRg8( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayICompRg8( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DArrayICompR32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayICompR32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DArrayICompR16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayICompR16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImage2DArrayR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DArrayICompR8( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayICompR8( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeICompRgba32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeICompRgba32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeICompRgba16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeICompRgba16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeICompRgba8( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeICompRgba8( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeICompRg32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeICompRg32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeICompRg16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeICompRg16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeICompRg8( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeICompRg8( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeICompR32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeICompR32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeICompR16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeICompR16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeICompR8( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeICompR8( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeArrayRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeArrayICompRgba32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayICompRgba32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeArrayRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeArrayICompRgba16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayICompRgba16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeArrayRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeArrayICompRgba8( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayICompRgba8( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeArrayRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeArrayICompRg32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayICompRg32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeArrayRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeArrayICompRg16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayICompRg16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeArrayRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeArrayICompRg8( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayICompRg8( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeArrayR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeArrayICompR32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayICompR32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeArrayR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeArrayICompR16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayICompR16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGather( MaybeOptional< ISampledImageCubeArrayR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeArrayICompR8( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return IVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayICompR8( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DUCompRgba32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DUCompRgba32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DUCompRgba16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DUCompRgba16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DUCompRgba8( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DUCompRgba8( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DUCompRg32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DUCompRg32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DUCompRg16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DUCompRg16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DUCompRg8( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DUCompRg8( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DUCompR32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DUCompR32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DUCompR16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DUCompR16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DUCompR8( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DUCompR8( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DArrayUCompRgba32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayUCompRgba32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DArrayUCompRgba16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayUCompRgba16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DArrayUCompRgba8( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayUCompRgba8( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DArrayUCompRg32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayUCompRg32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DArrayUCompRg16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayUCompRg16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DArrayRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DArrayUCompRg8( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayUCompRg8( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DArrayUCompR32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayUCompR32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DArrayUCompR16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayUCompR16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImage2DArrayR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGather2DArrayUCompR8( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGather2DArrayUCompR8( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeUCompRgba32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeUCompRgba32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeUCompRgba16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeUCompRgba16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeUCompRgba8( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeUCompRgba8( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeUCompRg32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeUCompRg32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeUCompRg16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeUCompRg16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeUCompRg8( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeUCompRg8( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeUCompR32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeUCompR32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeUCompR16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeUCompR16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeUCompR8( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeUCompR8( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeArrayRgba32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeArrayUCompRgba32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayUCompRgba32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeArrayRgba16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeArrayUCompRgba16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayUCompRgba16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeArrayRgba8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeArrayUCompRgba8( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayUCompRgba8( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeArrayRg32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeArrayUCompRg32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayUCompRg32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeArrayRg16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeArrayUCompRg16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayUCompRg16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeArrayRg8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeArrayUCompRg8( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayUCompRg8( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeArrayR32 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeArrayUCompR32( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayUCompR32( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeArrayR16 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeArrayUCompR16( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayUCompR16( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGather( MaybeOptional< USampledImageCubeArrayR8 > const & image
		, MaybeOptional< Vec4 > const & P
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, comp )
				, expr::makeTextureGatherCubeArrayUCompR8( findTypesCache( image, P, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, comp ) };
		}

		return UVec4{ findShader( image, P, comp )
			, expr::makeTextureGatherCubeArrayUCompR8( findTypesCache( image, P, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( comp ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureGatherOffset
	/**
	*name
	*	textureGatherOffset
	*/
	/**@{*/
	MaybeOptional< Vec4 > textureGatherOffset( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DFRgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DFRgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffset( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DFRgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DFRgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffset( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DFRg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DFRg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffset( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DFRg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DFRg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffset( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DFR32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DFR32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffset( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DFR16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DFR16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffset( MaybeOptional< SampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DArrayFRgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayFRgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffset( MaybeOptional< SampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DArrayFRgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayFRgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffset( MaybeOptional< SampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DArrayFRg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayFRg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffset( MaybeOptional< SampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DArrayFRg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayFRg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffset( MaybeOptional< SampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DArrayFR32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayFR32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffset( MaybeOptional< SampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DArrayFR16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return Vec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayFR16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DIRgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DIRgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DIRgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DIRgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DIRgba8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DIRgba8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DIRg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DIRg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DIRg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DIRg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DIRg8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DIRg8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DIR32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DIR32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DIR16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DIR16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DIR8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DIR8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DArrayIRgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayIRgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DArrayIRgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayIRgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DArrayIRgba8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayIRgba8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DArrayIRg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayIRg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DArrayIRg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayIRg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DArrayRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DArrayIRg8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayIRg8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DArrayIR32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayIR32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DArrayIR16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayIR16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DArrayR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DArrayIR8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return IVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayIR8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DURgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DURgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DURgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DURgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DURgba8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DURgba8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DURg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DURg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DURg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DURg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DURg8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DURg8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DUR32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DUR32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DUR16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DUR16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DUR8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DUR8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DArrayURgba32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayURgba32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DArrayURgba16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayURgba16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DArrayURgba8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayURgba8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DArrayURg32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayURg32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DArrayURg16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayURg16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DArrayRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DArrayURg8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayURg8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DArrayUR32( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayUR32( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DArrayUR16( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayUR16( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DArrayR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, offset ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset )
				, expr::makeTextureGatherOffset2DArrayUR8( findTypesCache( image, P, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, offset ) };
		}

		return UVec4{ findShader( image, P, offset )
			, expr::makeTextureGatherOffset2DArrayUR8( findTypesCache( image, P, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffset( MaybeOptional< SampledImage2DShadowR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, refZ, offset )
				, expr::makeTextureGatherOffset2DShadowFR32( findTypesCache( image, P, refZ, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, offset ) };
		}

		return Vec4{ findShader( image, P, refZ, offset )
			, expr::makeTextureGatherOffset2DShadowFR32( findTypesCache( image, P, refZ, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffset( MaybeOptional< SampledImage2DShadowR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, refZ, offset )
				, expr::makeTextureGatherOffset2DShadowFR16( findTypesCache( image, P, refZ, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, offset ) };
		}

		return Vec4{ findShader( image, P, refZ, offset )
			, expr::makeTextureGatherOffset2DShadowFR16( findTypesCache( image, P, refZ, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffset( MaybeOptional< SampledImage2DArrayShadowR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, refZ, offset )
				, expr::makeTextureGatherOffset2DArrayShadowFR32( findTypesCache( image, P, refZ, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, offset ) };
		}

		return Vec4{ findShader( image, P, refZ, offset )
			, expr::makeTextureGatherOffset2DArrayShadowFR32( findTypesCache( image, P, refZ, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffset( MaybeOptional< SampledImage2DArrayShadowR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< IVec2 > const & offset )
	{
		if ( isAnyOptional( image, P, refZ, offset ) )
		{
			return Optional< Vec4 >{ findShader( image, P, refZ, offset )
				, expr::makeTextureGatherOffset2DArrayShadowFR16( findTypesCache( image, P, refZ, offset )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( offset ) )
				, areOptionalEnabled( image, P, refZ, offset ) };
		}

		return Vec4{ findShader( image, P, refZ, offset )
			, expr::makeTextureGatherOffset2DArrayShadowFR16( findTypesCache( image, P, refZ, offset )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offset ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureGatherOffsetComp
	/**
	*name
	*	textureGatherOffsetComp
	*/
	/**@{*/
	MaybeOptional< Vec4 > textureGatherOffset( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DFCompRgba32( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return Vec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DFCompRgba32( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffset( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DFCompRgba16( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return Vec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DFCompRgba16( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffset( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DFCompRg32( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return Vec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DFCompRg32( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffset( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DFCompRg16( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return Vec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DFCompRg16( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffset( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DFCompR32( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return Vec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DFCompR32( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffset( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DFCompR16( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return Vec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DFCompR16( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffset( MaybeOptional< SampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DArrayFCompRgba32( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return Vec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayFCompRgba32( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffset( MaybeOptional< SampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DArrayFCompRgba16( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return Vec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayFCompRgba16( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffset( MaybeOptional< SampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DArrayFCompRg32( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return Vec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayFCompRg32( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffset( MaybeOptional< SampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DArrayFCompRg16( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return Vec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayFCompRg16( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffset( MaybeOptional< SampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DArrayFCompR32( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return Vec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayFCompR32( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffset( MaybeOptional< SampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DArrayFCompR16( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return Vec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayFCompR16( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DICompRgba32( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DICompRgba32( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DICompRgba16( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DICompRgba16( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DICompRgba8( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DICompRgba8( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DICompRg32( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DICompRg32( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DICompRg16( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DICompRg16( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DICompRg8( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DICompRg8( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DICompR32( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DICompR32( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DICompR16( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DICompR16( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DICompR8( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DICompR8( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DArrayICompRgba32( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayICompRgba32( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DArrayICompRgba16( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayICompRgba16( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DArrayICompRgba8( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayICompRgba8( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DArrayICompRg32( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayICompRg32( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DArrayICompRg16( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayICompRg16( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DArrayRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DArrayICompRg8( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayICompRg8( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DArrayICompR32( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayICompR32( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DArrayICompR16( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayICompR16( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffset( MaybeOptional< ISampledImage2DArrayR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DArrayICompR8( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return IVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayICompR8( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DUCompRgba32( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DUCompRgba32( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DUCompRgba16( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DUCompRgba16( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DUCompRgba8( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DUCompRgba8( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DUCompRg32( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DUCompRg32( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DUCompRg16( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DUCompRg16( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DUCompRg8( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DUCompRg8( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DUCompR32( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DUCompR32( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DUCompR16( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DUCompR16( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DUCompR8( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DUCompR8( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DArrayUCompRgba32( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayUCompRgba32( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DArrayUCompRgba16( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayUCompRgba16( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DArrayUCompRgba8( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayUCompRgba8( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DArrayUCompRg32( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayUCompRg32( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DArrayUCompRg16( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayUCompRg16( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DArrayRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DArrayUCompRg8( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayUCompRg8( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DArrayUCompR32( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayUCompR32( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DArrayUCompR16( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayUCompR16( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffset( MaybeOptional< USampledImage2DArrayR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< IVec2 > const & offset
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offset, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offset, comp )
				, expr::makeTextureGatherOffset2DArrayUCompR8( findTypesCache( image, P, offset, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offset )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offset, comp ) };
		}

		return UVec4{ findShader( image, P, offset, comp )
			, expr::makeTextureGatherOffset2DArrayUCompR8( findTypesCache( image, P, offset, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offset )
				, makeExpr( comp ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureGatherOffsets
	/**
	*name
	*	textureGatherOffsets
	*/
	/**@{*/
	MaybeOptional< Vec4 > textureGatherOffsets( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DFRgba32( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return Vec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DFRgba32( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffsets( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DFRgba16( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return Vec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DFRgba16( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffsets( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DFRg32( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return Vec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DFRg32( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffsets( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DFRg16( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return Vec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DFRg16( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffsets( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DFR32( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return Vec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DFR32( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffsets( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DFR16( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return Vec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DFR16( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffsets( MaybeOptional< SampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DArrayFRgba32( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return Vec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayFRgba32( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffsets( MaybeOptional< SampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DArrayFRgba16( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return Vec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayFRgba16( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffsets( MaybeOptional< SampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DArrayFRg32( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return Vec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayFRg32( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffsets( MaybeOptional< SampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DArrayFRg16( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return Vec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayFRg16( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffsets( MaybeOptional< SampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DArrayFR32( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return Vec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayFR32( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffsets( MaybeOptional< SampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DArrayFR16( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return Vec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayFR16( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DIRgba32( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DIRgba32( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DIRgba16( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DIRgba16( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DIRgba8( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DIRgba8( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DIRg32( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DIRg32( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DIRg16( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DIRg16( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DIRg8( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DIRg8( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DIR32( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DIR32( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DIR16( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DIR16( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DIR8( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DIR8( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DArrayIRgba32( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayIRgba32( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DArrayIRgba16( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayIRgba16( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DArrayIRgba8( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayIRgba8( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DArrayIRg32( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayIRg32( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DArrayIRg16( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayIRg16( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DArrayRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DArrayIRg8( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayIRg8( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DArrayIR32( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayIR32( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DArrayIR16( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayIR16( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DArrayR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DArrayIR8( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return IVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayIR8( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DURgba32( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DURgba32( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DURgba16( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DURgba16( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DURgba8( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DURgba8( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DURg32( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DURg32( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DURg16( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DURg16( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DURg8( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DURg8( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DUR32( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DUR32( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DUR16( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DUR16( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DUR8( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DUR8( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DArrayURgba32( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayURgba32( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DArrayURgba16( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayURgba16( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DArrayURgba8( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayURgba8( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DArrayURg32( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayURg32( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DArrayURg16( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayURg16( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DArrayRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DArrayURg8( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayURg8( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DArrayUR32( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayUR32( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DArrayUR16( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayUR16( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DArrayR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, offsets ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets )
				, expr::makeTextureGatherOffsets2DArrayUR8( findTypesCache( image, P, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, offsets ) };
		}

		return UVec4{ findShader( image, P, offsets )
			, expr::makeTextureGatherOffsets2DArrayUR8( findTypesCache( image, P, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffsets( MaybeOptional< SampledImage2DShadowR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, refZ, offsets ) )
		{
			return Optional< Vec4 >{ findShader( image, P, refZ, offsets )
				, expr::makeTextureGatherOffsets2DShadowFR32( findTypesCache( image, P, refZ, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, refZ, offsets ) };
		}

		return Vec4{ findShader( image, P, refZ, offsets )
			, expr::makeTextureGatherOffsets2DShadowFR32( findTypesCache( image, P, refZ, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffsets( MaybeOptional< SampledImage2DShadowR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, refZ, offsets ) )
		{
			return Optional< Vec4 >{ findShader( image, P, refZ, offsets )
				, expr::makeTextureGatherOffsets2DShadowFR16( findTypesCache( image, P, refZ, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, refZ, offsets ) };
		}

		return Vec4{ findShader( image, P, refZ, offsets )
			, expr::makeTextureGatherOffsets2DShadowFR16( findTypesCache( image, P, refZ, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffsets( MaybeOptional< SampledImage2DArrayShadowR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, refZ, offsets ) )
		{
			return Optional< Vec4 >{ findShader( image, P, refZ, offsets )
				, expr::makeTextureGatherOffsets2DArrayShadowFR32( findTypesCache( image, P, refZ, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, refZ, offsets ) };
		}

		return Vec4{ findShader( image, P, refZ, offsets )
			, expr::makeTextureGatherOffsets2DArrayShadowFR32( findTypesCache( image, P, refZ, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offsets ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffsets( MaybeOptional< SampledImage2DArrayShadowR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Float > const & refZ
		, MaybeOptional< Array< IVec2 > > const & offsets )
	{
		if ( isAnyOptional( image, P, refZ, offsets ) )
		{
			return Optional< Vec4 >{ findShader( image, P, refZ, offsets )
				, expr::makeTextureGatherOffsets2DArrayShadowFR16( findTypesCache( image, P, refZ, offsets )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( refZ )
					, makeExpr( offsets ) )
				, areOptionalEnabled( image, P, refZ, offsets ) };
		}

		return Vec4{ findShader( image, P, refZ, offsets )
			, expr::makeTextureGatherOffsets2DArrayShadowFR16( findTypesCache( image, P, refZ, offsets )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( refZ )
				, makeExpr( offsets ) ) };
	}
	/**@}*/
#pragma endregion
#pragma region textureGatherOffsetsComp
	/**
	*name
	*	textureGatherOffsetsComp
	*/
	/**@{*/
	MaybeOptional< Vec4 > textureGatherOffsets( MaybeOptional< SampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DFCompRgba32( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return Vec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DFCompRgba32( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffsets( MaybeOptional< SampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DFCompRgba16( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return Vec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DFCompRgba16( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffsets( MaybeOptional< SampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DFCompRg32( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return Vec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DFCompRg32( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffsets( MaybeOptional< SampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DFCompRg16( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return Vec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DFCompRg16( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffsets( MaybeOptional< SampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DFCompR32( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return Vec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DFCompR32( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffsets( MaybeOptional< SampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DFCompR16( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return Vec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DFCompR16( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffsets( MaybeOptional< SampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DArrayFCompRgba32( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return Vec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayFCompRgba32( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffsets( MaybeOptional< SampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DArrayFCompRgba16( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return Vec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayFCompRgba16( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffsets( MaybeOptional< SampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DArrayFCompRg32( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return Vec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayFCompRg32( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffsets( MaybeOptional< SampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DArrayFCompRg16( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return Vec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayFCompRg16( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffsets( MaybeOptional< SampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DArrayFCompR32( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return Vec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayFCompR32( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< Vec4 > textureGatherOffsets( MaybeOptional< SampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< Vec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DArrayFCompR16( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return Vec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayFCompR16( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DICompRgba32( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DICompRgba32( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DICompRgba16( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DICompRgba16( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DICompRgba8( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DICompRgba8( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DICompRg32( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DICompRg32( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DICompRg16( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DICompRg16( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DICompRg8( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DICompRg8( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DICompR32( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DICompR32( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DICompR16( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DICompR16( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DICompR8( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DICompR8( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DArrayICompRgba32( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayICompRgba32( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DArrayICompRgba16( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayICompRgba16( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DArrayICompRgba8( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayICompRgba8( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DArrayICompRg32( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayICompRg32( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DArrayICompRg16( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayICompRg16( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DArrayRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DArrayICompRg8( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayICompRg8( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DArrayICompR32( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayICompR32( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DArrayICompR16( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayICompR16( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< IVec4 > textureGatherOffsets( MaybeOptional< ISampledImage2DArrayR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< IVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DArrayICompR8( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return IVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayICompR8( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DRgba32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DUCompRgba32( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DUCompRgba32( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DRgba16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DUCompRgba16( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DUCompRgba16( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DRgba8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DUCompRgba8( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DUCompRgba8( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DRg32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DUCompRg32( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DUCompRg32( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DRg16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DUCompRg16( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DUCompRg16( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DRg8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DUCompRg8( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DUCompRg8( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DR32 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DUCompR32( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DUCompR32( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DR16 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DUCompR16( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DUCompR16( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DR8 > const & image
		, MaybeOptional< Vec2 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DUCompR8( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DUCompR8( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DArrayRgba32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DArrayUCompRgba32( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayUCompRgba32( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DArrayRgba16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DArrayUCompRgba16( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayUCompRgba16( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DArrayRgba8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DArrayUCompRgba8( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayUCompRgba8( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DArrayRg32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DArrayUCompRg32( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayUCompRg32( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DArrayRg16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DArrayUCompRg16( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayUCompRg16( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DArrayRg8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DArrayUCompRg8( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayUCompRg8( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DArrayR32 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DArrayUCompR32( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayUCompR32( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DArrayR16 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DArrayUCompR16( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayUCompR16( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	MaybeOptional< UVec4 > textureGatherOffsets( MaybeOptional< USampledImage2DArrayR8 > const & image
		, MaybeOptional< Vec3 > const & P
		, MaybeOptional< Array< IVec2 > > const & offsets
		, MaybeOptional< Int > const & comp )
	{
		if ( isAnyOptional( image, P, offsets, comp ) )
		{
			return Optional< UVec4 >{ findShader( image, P, offsets, comp )
				, expr::makeTextureGatherOffsets2DArrayUCompR8( findTypesCache( image, P, offsets, comp )
					, makeExpr( image )
					, makeExpr( P )
					, makeExpr( offsets )
					, makeExpr( comp ) )
				, areOptionalEnabled( image, P, offsets, comp ) };
		}

		return UVec4{ findShader( image, P, offsets, comp )
			, expr::makeTextureGatherOffsets2DArrayUCompR8( findTypesCache( image, P, offsets, comp )
				, makeExpr( image )
				, makeExpr( P )
				, makeExpr( offsets )
				, makeExpr( comp ) ) };
	}
	/**@}*/
#pragma endregion
}
