<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

	<Type Name="ast::type::Type">
		<DisplayString>{m_kind}</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="parent">m_parent</Item>
			<Item Name="index">m_index</Item>
		</Expand>
	</Type>
	<Type Name="ast::type::Array">
		<DisplayString>{*m_type}[{m_arraySize}]</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="parent">m_parent</Item>
			<Item Name="index">m_index</Item>
			<Item Name="size">m_arraySize</Item>
			<Item Name="type">*m_type</Item>
		</Expand>
	</Type>
	<Type Name="ast::type::Function">
		<DisplayString>{*m_returnType}(*)({m_parameters})</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="return">m_returnType</Item>
			<Item Name="params">m_parameters</Item>
		</Expand>
	</Type>
	<Type Name="ast::type::Image">
		<DisplayString>image {m_config}</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="config">m_config</Item>
		</Expand>
	</Type>
	<Type Name="ast::type::Pointer">
		<DisplayString>{*m_pointerType}*</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="parent">m_parent</Item>
			<Item Name="index">m_index</Item>
			<Item Name="pointerType">*m_pointerType</Item>
			<Item Name="storage">m_storage</Item>
		</Expand>
	</Type>
	<Type Name="ast::type::SampledImage">
		<DisplayString>combined [{*m_imageType}, {*m_samplerType}]</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="image">*m_imageType</Item>
			<Item Name="sampler">*m_samplerType</Item>
		</Expand>
	</Type>
	<Type Name="ast::type::Sampler">
		<DisplayString>sampler {m_comparison}</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="comparison">m_comparison</Item>
		</Expand>
	</Type>
	<Type Name="ast::type::Struct::Member">
		<DisplayString>[{offset}, {size}] {*type} {name}</DisplayString>
		<Expand>
			<Item Name="type">*type</Item>
			<Item Name="name">name</Item>
			<Item Name="offset">offset</Item>
			<Item Name="size">size</Item>
			<Item Name="arrayStride">arrayStride</Item>
		</Expand>
	</Type>
	<Type Name="ast::type::Struct">
		<DisplayString>struct {m_name} {m_layout} {m_members}</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="name">m_name</Item>
			<Item Name="layout">m_layout</Item>
			<Item Name="members">m_members</Item>
		</Expand>
	</Type>

	<Type Name="ast::var::Variable">
		<DisplayString>{m_name}</DisplayString>
		<Expand>
			<Item Name="name">m_name</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="outer">m_outer</Item>
		</Expand>
	</Type>

	<Type Name="ast::expr::Expr">
		<DisplayString>{m_kind} {*m_type}</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::Binary">
		<DisplayString>( {m_lhs} ) BinOp ( {m_rhs} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="lhs">m_lhs</Item>
			<Item Name="rhs">m_rhs</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::Unary">
		<DisplayString>UnOp ( {m_operand} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="operand">m_operand</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::Alias">
		<DisplayString>{m_lhs} -> ( {m_rhs} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="identifier">m_lhs</Item>
			<Item Name="expr">m_rhs</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::Add">
		<DisplayString>( {m_lhs} ) + ( {m_rhs} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="lhs">m_lhs</Item>
			<Item Name="rhs">m_rhs</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::BitAnd">
		<DisplayString>( {m_lhs} ) &amp; ( {m_rhs} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="lhs">m_lhs</Item>
			<Item Name="rhs">m_rhs</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::BitNot">
		<DisplayString>~( {m_operand} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="lhs">m_lhs</Item>
			<Item Name="rhs">m_rhs</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::BitOr">
		<DisplayString>( {m_lhs} ) | ( {m_rhs} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="lhs">m_lhs</Item>
			<Item Name="rhs">m_rhs</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::BitXor">
		<DisplayString>( {m_lhs} ) ^ ( {m_rhs} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="lhs">m_lhs</Item>
			<Item Name="rhs">m_rhs</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::Divide">
		<DisplayString>( {m_lhs} ) / ( {m_rhs} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="lhs">m_lhs</Item>
			<Item Name="rhs">m_rhs</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::LogAnd">
		<DisplayString>( {m_lhs} ) &amp;&amp; ( {m_rhs} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="lhs">m_lhs</Item>
			<Item Name="rhs">m_rhs</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::LogNot">
		<DisplayString>!( {m_operand} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="lhs">m_lhs</Item>
			<Item Name="rhs">m_rhs</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::LogOr">
		<DisplayString>( {m_lhs} ) || ( {m_rhs} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="lhs">m_lhs</Item>
			<Item Name="rhs">m_rhs</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::LShift">
		<DisplayString>( {m_lhs} ) &lt;&lt; ( {m_rhs} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="lhs">m_lhs</Item>
			<Item Name="rhs">m_rhs</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::Minus">
		<DisplayString>( {m_lhs} ) - ( {m_rhs} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="lhs">m_lhs</Item>
			<Item Name="rhs">m_rhs</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::Modulo">
		<DisplayString>( {m_lhs} ) % ( {m_rhs} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="lhs">m_lhs</Item>
			<Item Name="rhs">m_rhs</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::RShift">
		<DisplayString>( {m_lhs} ) &gt;&gt; ( {m_rhs} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="lhs">m_lhs</Item>
			<Item Name="rhs">m_rhs</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::Times">
		<DisplayString>( {m_lhs} ) * ( {m_rhs} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="lhs">m_lhs</Item>
			<Item Name="rhs">m_rhs</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::AddAssign">
		<DisplayString>( {m_lhs} ) += ( {m_rhs} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="lhs">m_lhs</Item>
			<Item Name="rhs">m_rhs</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::AndAssign">
		<DisplayString>( {m_lhs} ) &amp;= ( {m_rhs} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="lhs">m_lhs</Item>
			<Item Name="rhs">m_rhs</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::OrAssign">
		<DisplayString>( {m_lhs} ) |= ( {m_rhs} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="lhs">m_lhs</Item>
			<Item Name="rhs">m_rhs</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::XorAssign">
		<DisplayString>( {m_lhs} ) ^= ( {m_rhs} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="lhs">m_lhs</Item>
			<Item Name="rhs">m_rhs</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::DivideAssign">
		<DisplayString>( {m_lhs} ) /= ( {m_rhs} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="lhs">m_lhs</Item>
			<Item Name="rhs">m_rhs</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::LShiftAssign">
		<DisplayString>( {m_lhs} ) &lt;&lt;= ( {m_rhs} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="lhs">m_lhs</Item>
			<Item Name="rhs">m_rhs</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::MinusAssign">
		<DisplayString>( {m_lhs} ) -= ( {m_rhs} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="lhs">m_lhs</Item>
			<Item Name="rhs">m_rhs</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::ModuloAssign">
		<DisplayString>( {m_lhs} ) %= ( {m_rhs} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="lhs">m_lhs</Item>
			<Item Name="rhs">m_rhs</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::RShiftAssign">
		<DisplayString>( {m_lhs} ) &gt;&gt;= ( {m_rhs} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="lhs">m_lhs</Item>
			<Item Name="rhs">m_rhs</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::TimesAssign">
		<DisplayString>( {m_lhs} ) *= ( {m_rhs} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="lhs">m_lhs</Item>
			<Item Name="rhs">m_rhs</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::ArrayAccess">
		<DisplayString>( {m_lhs} )[{m_rhs}]</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="array">m_lhs</Item>
			<Item Name="index">m_rhs</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::CompositeConstruct">
		<DisplayString>{*m_type}( {m_composite} {m_component} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="composite">m_composite</Item>
			<Item Name="component">m_component</Item>
			<Item Name="args">m_argList</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::FnCall">
		<DisplayString>{*m_type} {m_fn}( {m_argList} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="fn">m_fn</Item>
			<Item Name="args">m_argList</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::Identifier">
		<DisplayString>( {*m_var} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="var">m_var</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::ImageAccessCall">
		<DisplayString>{*m_type} {m_imageAccess}( {m_argList} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="access">m_imageAccess</Item>
			<Item Name="args">m_argList</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::Init">
		<DisplayString>{*m_type} {*m_identifier} = ( {*m_initialiser} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="ident">m_identifier</Item>
			<Item Name="init">m_initialiser</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::IntrinsicCall">
		<DisplayString>{*m_type} {m_intrinsic}( {m_argList} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="intrinsic">m_intrinsic</Item>
			<Item Name="args">m_argList</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::Literal">
		<DisplayString Condition="m_valueType==ast::expr::LiteralType::eBool">{m_valueType} {m_value.boolv}</DisplayString>
		<DisplayString Condition="m_valueType==ast::expr::LiteralType::eInt">{m_valueType} {m_value.intv}</DisplayString>
		<DisplayString Condition="m_valueType==ast::expr::LiteralType::eUInt">{m_valueType} {m_value.uintv}</DisplayString>
		<DisplayString Condition="m_valueType==ast::expr::LiteralType::eFloat">{m_valueType} {m_value.floatv}</DisplayString>
		<DisplayString Condition="m_valueType==ast::expr::LiteralType::eDouble">{m_valueType} {m_value.doublev}</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="valueType">m_valueType</Item>
			<Item Name="value">m_value</Item>
			<Item Name="value" Condition="m_valueType==ast::expr::LiteralType::eBool">m_value.boolv</Item>
			<Item Name="value" Condition="m_valueType==ast::expr::LiteralType::eInt">m_value.intv</Item>
			<Item Name="value" Condition="m_valueType==ast::expr::LiteralType::eUInt">m_value.uintv</Item>
			<Item Name="value" Condition="m_valueType==ast::expr::LiteralType::eFloat">m_value.floatv</Item>
			<Item Name="value" Condition="m_valueType==ast::expr::LiteralType::eDouble">m_value.doublev</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::MbrSelect">
		<DisplayString>{*m_type} ( {m_outer} ).{m_memberIndex}</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="outer">m_outer</Item>
			<Item Name="index">m_memberIndex</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::Question">
		<DisplayString>( {m_ctrlExpr} ) ? ( {m_trueExpr} ) : ( {m_falseExpr} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="ctrl">m_ctrlExpr</Item>
			<Item Name="true">m_trueExpr</Item>
			<Item Name="false">m_falseExpr</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::Swizzle">
		<DisplayString>( {m_outer} ).{m_swizzle}</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="swizzle">m_swizzle</Item>
			<Item Name="outer">m_outer</Item>
		</Expand>
	</Type>
	<Type Name="ast::expr::TextureAccessCall">
		<DisplayString>{*m_type} {m_textureAccess}( {m_argList} )</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="flags">m_flags</Item>
			<Item Name="type">*m_type</Item>
			<Item Name="access">m_textureAccess</Item>
			<Item Name="args">m_argList</Item>
		</Expand>
	</Type>

	<Type Name="ast::stmt::Stmt">
		<DisplayString>{{kind={m_kind}}}</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
		</Expand>
	</Type>
	<Type Name="ast::stmt::Container">
		<DisplayString>{{kind={m_kind}}}</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="statements">m_statements</Item>
		</Expand>
	</Type>
	<Type Name="ast::stmt::ConstantBufferDecl">
		<DisplayString>{{kind={m_kind} name={m_name}}}</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="name">m_name</Item>
			<Item Name="layout">m_layout</Item>
			<Item Name="set">m_bindingSet</Item>
			<Item Name="binding">m_bindingPoint</Item>
		</Expand>
	</Type>
	<Type Name="ast::stmt::FunctionDecl">
		<DisplayString>{{kind={m_kind} name={m_name}}}</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="name">m_name</Item>
			<Item Name="type">*m_type</Item>
		</Expand>
	</Type>
	<Type Name="ast::stmt::ImageDecl">
		<DisplayString>{{kind={m_kind} var={m_variable}}}</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="var">m_variable</Item>
			<Item Name="set">m_bindingSet</Item>
			<Item Name="binding">m_bindingPoint</Item>
		</Expand>
	</Type>
	<Type Name="ast::stmt::InOutVariableDecl">
		<DisplayString>{{kind={m_kind} var={m_variable}}}</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="var">m_variable</Item>
			<Item Name="location">m_location</Item>
		</Expand>
	</Type>
	<Type Name="ast::stmt::InputComputeLayout">
		<DisplayString>{{kind={m_kind} x={m_workGroupsX} y={m_workGroupsY} z={m_workGroupsZ}}}</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="x">m_workGroupsX</Item>
			<Item Name="y">m_workGroupsY</Item>
			<Item Name="z">m_workGroupsZ</Item>
		</Expand>
	</Type>
	<Type Name="ast::stmt::InputGeometryLayout">
		<DisplayString>{{kind={m_kind} layt={m_layout}}}</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="layout">m_layout</Item>
		</Expand>
	</Type>
	<Type Name="ast::stmt::OutputGeometryLayout">
		<DisplayString>{{kind={m_kind} layt={m_layout} cnt={m_primCount}}}</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="layout">m_layout</Item>
			<Item Name="count">m_primCount</Item>
		</Expand>
	</Type>
	<Type Name="ast::stmt::PushConstantsBufferDecl">
		<DisplayString>{{kind={m_kind} name={m_name}}}</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="name">m_name</Item>
			<Item Name="count">m_layout</Item>
		</Expand>
	</Type>
	<Type Name="ast::stmt::SampledImageDecl">
		<DisplayString>{{kind={m_kind} var={m_variable}}}</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="var">m_variable</Item>
			<Item Name="set">m_bindingSet</Item>
			<Item Name="binding">m_bindingPoint</Item>
		</Expand>
	</Type>
	<Type Name="ast::stmt::SamplerDecl">
		<DisplayString>{{kind={m_kind} var={m_variable}}}</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="var">m_variable</Item>
			<Item Name="set">m_bindingSet</Item>
			<Item Name="binding">m_bindingPoint</Item>
		</Expand>
	</Type>
	<Type Name="ast::stmt::ShaderBufferDecl">
		<DisplayString>{{kind={m_kind} var={m_variable}}}</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="var">m_variable</Item>
			<Item Name="set">m_bindingSet</Item>
			<Item Name="binding">m_bindingPoint</Item>
		</Expand>
	</Type>
	<Type Name="ast::stmt::ShaderStructBufferDecl">
		<DisplayString>{{kind={m_kind} ssbo={m_ssboName} inst={m_instance}}}</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="ssbo">m_ssboName</Item>
			<Item Name="instance">m_instance</Item>
			<Item Name="data">m_data</Item>
			<Item Name="set">m_bindingSet</Item>
			<Item Name="binding">m_bindingPoint</Item>
		</Expand>
	</Type>
	<Type Name="ast::stmt::Simple">
		<DisplayString>{{kind={m_kind} expr={m_expr}}}</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="expr">m_expr</Item>
		</Expand>
	</Type>
	<Type Name="ast::stmt::SpecialisationConstantDecl">
		<DisplayString>{{kind={m_kind} var={m_variable}}}</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="var">m_variable</Item>
			<Item Name="location">m_location</Item>
			<Item Name="value">m_value</Item>
		</Expand>
	</Type>
	<Type Name="ast::stmt::StructureDecl">
		<DisplayString>{{kind={m_kind} type={*m_type}}}</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="type">*m_type</Item>
		</Expand>
	</Type>
	<Type Name="ast::stmt::VariableDecl">
		<DisplayString>{{kind={m_kind} var={m_variable}}}</DisplayString>
		<Expand>
			<Item Name="kind">m_kind</Item>
			<Item Name="var">m_variable</Item>
		</Expand>
	</Type>

</AutoVisualizer>
