if ( NOT DEFINED SDW_BUILD_EXPORTER_SPIRV_STATIC )
	option( SDW_BUILD_EXPORTER_SPIRV_STATIC "Build SPIR-V exporter as a static library" OFF )
endif ()

project( CompilerSpirV )

set( ${PROJECT_NAME}_VERSION_MAJOR 0 )
set( ${PROJECT_NAME}_VERSION_MINOR 1 )
set( ${PROJECT_NAME}_VERSION_BUILD 0 )
set( ${PROJECT_NAME}_VERSION_YEAR 2019 )

set( PROJECT_VERSION "${${PROJECT_NAME}_VERSION_MAJOR}.${${PROJECT_NAME}_VERSION_MINOR}" )
set( PROJECT_SOVERSION "${${PROJECT_NAME}_VERSION_BUILD}" )

set( INCLUDE_DIR ${SDW_SOURCE_DIR}/include/${PROJECT_NAME} )
set( SOURCE_DIR ${SDW_SOURCE_DIR}/source/${PROJECT_NAME} )

file( GLOB_RECURSE ${PROJECT_NAME}_FOLDER_HEADER_FILES
	${INCLUDE_DIR}/*.h
	${INCLUDE_DIR}/*.hpp
	${INCLUDE_DIR}/*.inl
)
file( GLOB_RECURSE ${PROJECT_NAME}_FOLDER_SOURCE_FILES
	${SOURCE_DIR}/*.h
	${SOURCE_DIR}/*.hpp
	${SOURCE_DIR}/*.inl
	${SOURCE_DIR}/*.c
	${SOURCE_DIR}/*.cpp
)
parse_subdir_files( ${SDW_SOURCE_DIR} ${PROJECT_NAME}/spirv "spirv" )

if ( SDW_BUILD_EXPORTER_SPIRV_STATIC )
	add_library( ${PROJECT_NAME}
		STATIC
		${${PROJECT_NAME}_FOLDER_HEADER_FILES}
		${${PROJECT_NAME}_FOLDER_SOURCE_FILES}
		${${PROJECT_NAME}_FOLDER_SCRIPT_FILES}
	)
	target_compile_definitions( ${PROJECT_NAME}
		PUBLIC
			${PROJECT_NAME}_Static
			SDW_Has${PROJECT_NAME}
	)
else ()
	add_library( ${PROJECT_NAME}
		SHARED
		${${PROJECT_NAME}_FOLDER_HEADER_FILES}
		${${PROJECT_NAME}_FOLDER_SOURCE_FILES}
		${${PROJECT_NAME}_FOLDER_SCRIPT_FILES}
	)
	target_compile_definitions( ${PROJECT_NAME}
		PRIVATE
			${PROJECT_NAME}_Exports
		PUBLIC
			SDW_Has${PROJECT_NAME}
	)
endif ()
add_library( sdw::${PROJECT_NAME}
	ALIAS
	${PROJECT_NAME}
)
target_link_libraries( ${PROJECT_NAME} PUBLIC
	sdw::ShaderAST
	sdw::ShaderWriter
)
set_target_properties( ${PROJECT_NAME}
	PROPERTIES
		VERSION ${PROJECT_VERSION}
		SOVERSION ${PROJECT_SOVERSION}
		CXX_STANDARD 17
		FOLDER "${SDW_BASE_DIR}/Exporters"
)
target_include_directories( ${PROJECT_NAME} PRIVATE
	${SDW_SOURCE_DIR}/source
	${INCLUDE_DIR}
	${SOURCE_DIR}
)

# We install headers to <install_dir>/include/${PROJECT_NAME}
target_install_headers( ${PROJECT_NAME} ${SDW_SOURCE_DIR}/include/${PROJECT_NAME} )

set( SDW_EXPORTERS_LIST
	${SDW_EXPORTERS_LIST}
	sdw::${PROJECT_NAME}
	PARENT_SCOPE
)

set( SDW_INSTEXP_LIST
	${SDW_INSTEXP_LIST}
	${PROJECT_NAME}
	PARENT_SCOPE
)
